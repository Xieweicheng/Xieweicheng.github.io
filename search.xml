<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用gradle打jar包的几种方式]]></title>
    <url>%2F%E4%BD%BF%E7%94%A8gradle%E6%89%93jar%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.html</url>
    <content type="text"><![CDATA[一、不借助manifest文件 若有a.jar，b.jar，c.jar在同一目录下，主方法所在类全类名为cn.mrxiexie.jar.Main 12# jar包使用`:`分开，最后指定主方法所在类全类名即可java -classpath a.jar:b.jar:c.jar cn.mrxiexie.jar.Main 二、借助manifest文件 若有a.jar，b.jar，c.jar在同一目录下，主方法所在类全类名为cn.mrxiexie.jar.Main且在a.jar中 修改a.jar中的MANIFEST如下 123# a.jar的MANIFEST内容，jar包使用空格分开Main-Class: cn.mrxiexie.jar.MainClass-Path: b.jar c.jar 执行a.jar 1java -jar a.jar 三、打成一个jar包 使用gradle把多个依赖打成一个可运行jar包，主方法所在类全类名为cn.mrxiexie.jar.Main 12345678910jar &#123; from &#123; //添加依懒到打包文件 //configurations.compile.collect &#123; it.isDirectory() ? it : zipTree(it) &#125; configurations.runtime.collect&#123;zipTree(it)&#125; &#125; manifest &#123; attributes 'Main-Class': 'cn.mrxiexie.jar.Main' &#125;&#125; 执行jar，即可获取一个jar包 四、打成多个jar包 使用gradle把多个依赖打成多个可运行jar包，主方法所在类全类名为cn.mrxiexie.jar.Main 123456789101112131415161718// 打主jar包，并编写manifest文件，编写结果如方法二jar &#123; String str = '' configurations.runtime.each &#123; str = str + " " + it.name &#125; manifest &#123; attributes 'Main-Class': 'cn.mrxiexie.jar.Main' attributes 'Class-Path': str &#125;&#125;// 复制依赖包到libs目录下task copyJars(type: Copy) &#123; from configurations.runtime into('build/libs')&#125;// clean后，执行release即可获取多个jar包task release(type: Copy, dependsOn: [build, copyJars]) 执行release，即可获取多个jar包 执行主方法所在jar包 1java -jar a.jar 参考： https://www.jianshu.com/p/5bb1e87df15f https://www.cnblogs.com/yjmyzz/p/executable-jar.html]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2Fhello.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux之firewalld防火墙常用命令]]></title>
    <url>%2FLinux%E4%B9%8Bfirewalld%E9%98%B2%E7%81%AB%E5%A2%99%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
    <content type="text"><![CDATA[一、firewalld启动关闭 启动：systemctl start firewalld 关闭：systemctl stop firewalld 查看状态：systemctl status firewalld 开机禁用：systemctl disable firewalld 开机启用：systemctl enable firewalld 查看是否开机启动：systemctl is-enabled firewalld 查看已启动的服务列表：systemctl list-unit-files | grep enabled 查看启动失败的服务列表：systemctl --failed 二、firewalld-cmd指令 查看版本： firewall-cmd --version 查看帮助： firewall-cmd --help 显示状态： firewall-cmd --state 查看所有打开的端口： firewall-cmd --zone=public --list-ports 更新防火墙规则： firewall-cmd --reload 查看区域信息: firewall-cmd --get-active-zones 查看指定接口所属区域： firewall-cmd --get-zone-of-interface=eth0 拒绝所有包：firewall-cmd --panic-on 取消拒绝状态： firewall-cmd --panic-off 查看是否拒绝： firewall-cmd --query-panic 开启一个端口：firewall-cmd --zone=public --add-port=80/tcp --permanent（–permanent永久生效，没有此参数重启后失效） 查看端口是否开启：firewall-cmd --zone=public --query-port=80/tcp 删除一个端口：firewall-cmd --zone=public --remove-port=80/tcp --permanent 参考链接：https://www.cnblogs.com/moxiaoan/p/5683743.html]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HashMap底层原理]]></title>
    <url>%2FHashMap%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86.html</url>
    <content type="text"><![CDATA[一、JDK1.8之前的HashMapjdk1.8之前，hashmap的数据结构为：数组与链表的组合 新增的元素会添加到链表的头节点（快，只需要指定下一个节点） jdk1.8前hashmap的put方法： 1234567891011121314151617181920212223242526public V put(K key, V value) &#123; if (table == EMPTY_TABLE) &#123; inflateTable(threshold); &#125; if (key == null) return putForNullKey(value); // key值进行hash运算 int hash = hash(key); // 根据hash值与hashmap长度，求出数组索引 int i = indexFor(hash, table.length); for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123; Object k; // 如果存在该key，则返回旧value，并用新value替换旧value if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123; V oldValue = e.value; e.value = value; e.recordAccess(this); return oldValue; &#125; &#125; modCount++; // 链表中添加节点 addEntry(hash, key, value, i); return null;&#125; inflateTable方法： 12345678private void inflateTable(int toSize) &#123; // 求出数组长度，其值为2的指数幂，若传进去的大小为5，则求出值为8 int capacity = roundUpToPowerOf2(toSize); // 数组长度（默认为16）与加载因子（默认为0.75）求出阈值（临界值，默认为12） threshold = (int) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + 1); table = new Entry[capacity]; initHashSeedAsNeeded(capacity);&#125; hash方法：hash算法，减少hash碰撞，进行右移运算，为了让索引分散（添加查询速度） 1234567891011121314final int hash(Object k) &#123; int h = hashSeed; if (0 != h &amp;&amp; k instanceof String) &#123; return sun.misc.Hashing.stringHash32((String) k); &#125; h ^= k.hashCode(); // This function ensures that hashCodes that differ only by // constant multiples at each bit position have a bounded // number of collisions (approximately 8 at default load factor). h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12); return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);&#125; indexFor方法：根据hash值与数组长度计算出索引 1234static int indexFor(int h, int length) &#123; // assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2"; return h &amp; (length-1);&#125; addEntry方法：添加新的节点 扩容有可能会出现死锁的情况：http://www.importnew.com/22011.html 1234567891011void addEntry(int hash, K key, V value, int bucketIndex) &#123; // 扩容条件，当hashmap大小大于阈值，而且新增值所在数组的链表不为空，才会进行扩容。（也就是说，不是当hashmap大小大于阈值，就会进行扩容！） if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123; // 扩容，长度 * 2，重新计算hash值 resize(2 * table.length); hash = (null != key) ? hash(key) : 0; bucketIndex = indexFor(hash, table.length); &#125; createEntry(hash, key, value, bucketIndex);&#125; resize方法： 1234567891011121314void resize(int newCapacity) &#123; Entry[] oldTable = table; int oldCapacity = oldTable.length; if (oldCapacity == MAXIMUM_CAPACITY) &#123; threshold = Integer.MAX_VALUE; return; &#125; // 初始化新的数组 Entry[] newTable = new Entry[newCapacity]; transfer(newTable, initHashSeedAsNeeded(newCapacity)); table = newTable; threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);&#125; transfer方法： 12345678910111213141516171819void transfer(Entry[] newTable, boolean rehash) &#123; int newCapacity = newTable.length; for (Entry&lt;K,V&gt; e : table) &#123; while(null != e) &#123; Entry&lt;K,V&gt; next = e.next; if (rehash) &#123; // 重新hash e.hash = null == e.key ? 0 : hash(e.key); &#125; // 计算新数组的索引 int i = indexFor(e.hash, newCapacity); // 该元素的下一个指向原链表第一个元素（第一个元素进来时，该值为null） e.next = newTable[i]; // 该元素成为链表的第一个元素 newTable[i] = e; e = next; &#125; &#125;&#125; 二、JDK1.8中的HashMapjdk1.8中，hashmap的数据结构为：数组与链表与红黑树的组合 新增的元素会添加到链表的尾节点（由于每次添加需要遍历链表以获取链表长度，所以直接遍历完链表后把新节点放在链表尾部） jdk1.8中添加了以下两个属性，根据这两个属性进行链表与红黑树的转化 1234// 数组中某一索引链表长度大于8时，将该链表转为红黑树static final int TREEIFY_THRESHOLD = 8;// 数组中某一索引红黑树长度小于6时，将红黑树转为链表static final int UNTREEIFY_THRESHOLD = 6; jdk1.8中的put方法： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) &#123; Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; if ((tab = table) == null || (n = tab.length) == 0) // 数组为0时，则初始化数组 n = (tab = resize()).length; if ((p = tab[i = (n - 1) &amp; hash]) == null) // 当key的hash值对应的索引数组位置为null时，直接把新节点放在数组中 tab[i] = newNode(hash, key, value, null); else &#123; Node&lt;K,V&gt; e; K k; if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) // 新增元素的key与链表的第一个元素的key完全相同 e = p; else if (p instanceof TreeNode) // p为红黑树节点，说明该数组对应索引的数据结构为红黑树结构 e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value); else &#123; // p不为红黑树节点，说明该数组对应索引的数据结构为链表结构 // 遍历链表（为了计算binCount，也就是链表长度），把新节点放在尾部 for (int binCount = 0; ; ++binCount) &#123; if ((e = p.next) == null) &#123; p.next = newNode(hash, key, value, null); // 当链表长度超过8时，转为红黑树 if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; &#125; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) break; p = e; &#125; &#125; if (e != null) &#123; // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; afterNodeAccess(e); return oldValue; &#125; &#125; ++modCount; // 当hashmap长度大于阈值，则进行扩容（跟jdk1.8前有点不同） if (++size &gt; threshold) resize(); afterNodeInsertion(evict); return null;&#125; resize方法： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104final Node&lt;K,V&gt;[] resize() &#123; Node&lt;K,V&gt;[] oldTab = table; int oldCap = (oldTab == null) ? 0 : oldTab.length; int oldThr = threshold; int newCap, newThr = 0; if (oldCap &gt; 0) &#123; if (oldCap &gt;= MAXIMUM_CAPACITY) &#123; threshold = Integer.MAX_VALUE; return oldTab; &#125; else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY) newThr = oldThr &lt;&lt; 1; // double threshold &#125; else if (oldThr &gt; 0) // initial capacity was placed in threshold newCap = oldThr; else &#123; // zero initial threshold signifies using defaults newCap = DEFAULT_INITIAL_CAPACITY; newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); &#125; if (newThr == 0) &#123; float ft = (float)newCap * loadFactor; newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE); &#125; threshold = newThr; @SuppressWarnings(&#123;"rawtypes","unchecked"&#125;) Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap]; table = newTab; if (oldTab != null) &#123; for (int j = 0; j &lt; oldCap; ++j) &#123; Node&lt;K,V&gt; e; if ((e = oldTab[j]) != null) &#123; oldTab[j] = null; if (e.next == null) newTab[e.hash &amp; (newCap - 1)] = e; else if (e instanceof TreeNode) ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap); else &#123; // preserve order // 链表，并没有重新计算数组中的位置 Node&lt;K,V&gt; loHead = null, loTail = null; Node&lt;K,V&gt; hiHead = null, hiTail = null; Node&lt;K,V&gt; next; do &#123; next = e.next; // 示例1：若原长度为16，扩容后为32，e.hash为108 // e.hash &amp; oldCap // e.hash = 108 0110 1100 // oldCap = 16 0001 0000 // &amp; = 0 0000 0000 // e.hash &amp; (oldCap - 1) // e.hash = 108 0110 1100 // oldCap - 1 = 15 0000 1111 // &amp; = 12 0000 1100 // e.hash &amp; (newCap - 1) // e.hash = 108 0110 1100 // newCap - 1 = 31 0001 1111 // &amp; = 12 0000 1100 // e.hash &amp; oldCap 为 0 说明扩容后位置没有改变，还是12 // 示例2：若原长度为16，扩容后为32，e.hash为25 // e.hash &amp; oldCap // e.hash = 25 0001 1001 // oldCap = 16 0001 0000 // &amp; = 25 0001 1001 // e.hash &amp; (oldCap - 1) // e.hash = 25 0001 1001 // oldCap - 1 = 15 0000 1111 // &amp; = 9 0000 1001 // e.hash &amp; (newCap - 1) // e.hash = 25 0001 1001 // newCap - 1 = 31 0001 1111 // &amp; = 25 0001 1001 // e.hash &amp; oldCap 不为 0 说明扩容后位置发生改变，位置 = 原来位置 + 原长度 if ((e.hash &amp; oldCap) == 0) &#123; if (loTail == null) loHead = e; else loTail.next = e; loTail = e; &#125; else &#123; if (hiTail == null) hiHead = e; else hiTail.next = e; hiTail = e; &#125; &#125; while ((e = next) != null); if (loTail != null) &#123; loTail.next = null; newTab[j] = loHead; &#125; if (hiTail != null) &#123; hiTail.next = null; newTab[j + oldCap] = hiHead; &#125; &#125; &#125; &#125; &#125; return newTab;&#125; 三、JDK1.8之前与JDK1.8的区别1、jdk8前是使用数组+链表来实现的，jdk8中使使用数组+链表+红黑树来实现的。 2、新节点在插入到链表时插入顺序不同（jdk8前在头节点，jdk8中在尾节点） 3、hash算法有所简化 4、扩容机制有优化（解决死锁问题） 5、JDK1.8中旧链表迁移新链表，链表元素相对位置没有变化，实际是对对象的内存地址进行操作，JDK1.8之前，如果在新表的数组索引位置相同，则链表元素会倒置（A -&gt; B -&gt; C 会变为 C -&gt; B -&gt; A） 四、面试题1、为什么hashmap大小要2的n次方幂？由于key值对应的数组索引，使用（hashmap长度-1）进行与运算来确保数组不越界 2的n次方幂，其2进制特点是1开头，后面全是0，以16为例，16的2进制为：00010000，参与h &amp; (length-1)运算时，16-1=15，其二进制为：00001111，参与&amp;运算，前面全为0，确保了最大值也是15。 1234static int indexFor(int h, int length) &#123; // assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2"; return h &amp; (length-1);&#125; 2、jdk8中HashMap有哪些改动，请说出三点以上主要看第三点区别 3、JDK8中为什么要使用红黑树？链表的特别：插入快，查找慢 完全平衡二叉树：插入慢，查找快 红黑树：基于链表与完全平衡二叉树间 4、HashMap扩容机制是怎样的，JDK8之前与JDK8有什么不同？jdk1.8前是重新计算hash值，再重新计算在数组的位置，1.8中，key要么在原来的位置（index）上，要么在原来的位置 + 原来的长度上（index + oldCap） 5、为什么重写对象的Equals方法时，要重写HashCode方法，跟HashMap有关系吗？为什么？计算数组下标的时候需要用到key的hashcode，如果不重写对象的hashcode，在当该对象为key时，则可能会导致存放在hashmap中的数据get出来后为null 123456789public static void main(String[] args) &#123; HashMap&lt;Person, String&gt; hashMap = new HashMap&lt;&gt;(); Person p1 = new Person("MrXieXie", 1); Person p2 = new Person("MrXieXie", 1); hashMap.put(p1, "MrXieXie"); // 若person未重写了equal和hashcode，则返回null System.out.println(hashMap.get(p2));&#125; 6、HashMap是线程安全的吗？遇到过ConcurrentModificationException异常吗？为什么会出现？如何解决？HashMap不是线程安全的，在使用keyset遍历的时候，移除hashmap的元素就会出现该异常。 12345678910// ConcurrentModificationException异常for (Person person : hashMap.keySet()) &#123; hashMap.remove(person);&#125;// ConcurrentModificationException异常Iterator&lt;Person&gt; iterator = hashMap.keySet().iterator();while (iterator.hasNext()) &#123; Person next = iterator.next(); hashMap.remove(next);&#125; 1234567891011121314151617final Entry&lt;K,V&gt; nextEntry() &#123; // 由于 modCount 与 expectedModCount不等而抛出异常 // fail-fast策略 if (modCount != expectedModCount) throw new ConcurrentModificationException(); Entry&lt;K,V&gt; e = next; if (e == null) throw new NoSuchElementException(); if ((next = e.next) == null) &#123; Entry[] t = table; while (index &lt; t.length &amp;&amp; (next = t[index++]) == null) ; &#125; current = e; return e;&#125; 应该使用迭代器的remove方法： 12345Iterator&lt;Person&gt; iterator = hashMap.keySet().iterator();while (iterator.hasNext()) &#123; Person next = iterator.next(); iterator.remove();&#125; 123456789101112public void remove() &#123; if (current == null) throw new IllegalStateException(); if (modCount != expectedModCount) throw new ConcurrentModificationException(); Object k = current.key; current = null; HashMap.this.removeEntryForKey(k); // 移除的时候会把 expectedModCount 重新赋值为最新的 modcount // 如果直接调用hashmap中的remove方法，是不会把 expectedModCount 重新赋值的 expectedModCount = modCount;&#125; 7、在使用HashMap的过程中，我们应该注意些什么？若知道hashmap的长度，应当在初始化的时候指出，不然当hashmap长度大于阈值的时候会resize，此过程需要重新构建数组，重新hash，重新计算索引，比较耗资源。 12// 默认长度为16HashMap&lt;String, String&gt; hashmap = new HashMap&lt;&gt;(16);]]></content>
      <categories>
        <category>HashMap</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[峰凯小程序二次开发]]></title>
    <url>%2F%E5%B3%B0%E5%87%AF%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91.html</url>
    <content type="text"><![CDATA[请输入密码 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>微容</category>
      </categories>
      <tags>
        <tag>微容</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot整合swagger2]]></title>
    <url>%2Fspringboot%E6%95%B4%E5%90%88swagger2.html</url>
    <content type="text"><![CDATA[前言 Api接口文档，一开始我是使用Markdown来编写的，后来发现了swagger，自动生成文档并且可以在线测试api（举个例子：机智云openApi），以下，简单记录springboot整合swagger2 一、引入依赖以gradle为例，现在最新版本为2.9.2但由于汉化受限，所以这里我们引入2.7.0版本， 1234dependencies &#123; compile 'io.springfox:springfox-swagger-ui:2.7.0' compile "io.springfox:springfox-swagger2:2.7.0"&#125; 二、添加配置添加配置类，更多配置请参照官方文档，传送门。 12345678910111213141516171819202122232425@Configuration@EnableSwagger2public class SwaggerConfig &#123; @Bean public Docket petApi() &#123; return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() //指定api所在包 .apis(RequestHandlerSelectors.basePackage("pers.mrxiexie.usermanager.controller")) .paths(PathSelectors.any()) .build() .pathMapping("/"); &#125; public ApiInfo apiInfo() &#123; return new ApiInfoBuilder() .title("标题") .description("描述信息") .contact("MrXieXie") .version("1.2") .build(); &#125;&#125; 三、编写接口文档swagger自动生成的文档，都是基于注解的，以下列举了常用注解，更多注解请参照官方wiki，传送门。 @Api：将类标记为Swagger资源 @ApiImplicitParam：表示API操作中的单个参数 @ApiModel：提供有关Swagger模型（实体类）的其他信息 @ApiModelProperty：添加和操作模型属性的数据。 @ApiImplicitParams：一个包装器，允许列出多个ApiImplicitParam对象 @ApiOperation：描述针对特定路径的操作 @ApiParam：为操作参数添加其他元数据 Controller： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566@Api(value = "用户管理", description = "用户管理", tags = "用户管理", consumes = "application/json")@Slf4j@Controller@RequestMapping("/user")public class UserController &#123; @Autowired private UserService userService; @ApiIgnore @GetMapping("/login") public String login(HttpServletRequest request, HttpServletResponse response) &#123; String email = request.getParameter("email"); String password = request.getParameter("password"); log.info("email : " + email); log.info("password : " + password); return "main"; &#125; @ApiOperation(value = "获取所有用户", notes = "获取所有用户！！") @ApiImplicitParams(&#123; @ApiImplicitParam(name = "size", value = "大小", required = true, dataType = "String", paramType = "query"), @ApiImplicitParam(name = "page", value = "页码", required = true, dataType = "String", paramType = "query") &#125;) @GetMapping(value = "/all", produces = &#123;MediaType.APPLICATION_JSON_VALUE&#125;) @ResponseBody public IPage&lt;User&gt; getAllUser(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; String size = request.getParameter("size"); String page = request.getParameter("page"); log.info("size : " + size); log.info("page : " + page); return userService.getAllUser(Integer.valueOf(size), Integer.valueOf(page)); &#125; @ApiOperation(value = "删除用户", notes = "删除用户！！") @ApiImplicitParam(name = "id", value = "用户ID", required = true, dataType = "Long", paramType = "path") @ResponseBody @DeleteMapping(value = "/&#123;id&#125;", produces = &#123;MediaType.APPLICATION_JSON_VALUE&#125;) public Response deleteUser(@PathVariable(value = "id") Long id) &#123; boolean b = userService.deleteUser(id); return new Response().setCode(b ? 0 : -1); &#125; @ApiOperation(value = "保存用户", notes = "保存用户！！") @ResponseBody @PostMapping(value = "/", produces = &#123;MediaType.APPLICATION_JSON_VALUE&#125;) public Response saveUser(@RequestBody User user) &#123; boolean b = userService.saveUser(user); return new Response().setCode(b ? 0 : -1); &#125; @ApiOperation(value = "更新用户", notes = "更新用户！！") @ResponseBody @PutMapping(value = "/", produces = &#123;MediaType.APPLICATION_JSON_VALUE&#125;) public Response updateUser(@RequestBody User user) &#123; boolean b = userService.updateUser(user); return new Response().setCode(b ? 0 : -1); &#125; @ApiOperation(value = "获取用户", notes = "获取用户！！") @ApiImplicitParam(name = "id", value = "用户ID", required = true, dataType = "Long", paramType = "path") @GetMapping(value = "/&#123;id&#125;", produces = &#123;MediaType.APPLICATION_JSON_VALUE&#125;) public User user(@PathVariable(value = "id") Long id) &#123; return userService.getUser(id); &#125;&#125; User：@Data和@Accessors(chain = true)是lombok的注解 123456789101112131415@ApiModel(value = "用户实体类", description = "用户实体类")@Data@Accessors(chain = true)public class User implements Serializable &#123; @ApiModelProperty(value = "用户id") private Long id; @ApiModelProperty(value = "用户名") private String name; @ApiModelProperty(value = "手机") private String phone; @ApiModelProperty(value = "地址") private String address; @ApiModelProperty(value = "年龄") private Integer age;&#125; 四、访问在线文档浏览器访问http://localhost:8081/swagger-ui.html，端口号为你项目的端口号，我这里使用的是8081端口。 duang~，除了我们原本注释上的中文，其余都是英文，下面我们来进行汉化。 五、汉化文档双击shift搜索swagger-ui.html springfox-swagger-ui-2.7.0.jar下有对应的汉化包 复制swagger-ui.html文件到META-INF.resources下，并把以下代码复制到如图位置 123&lt;!--国际化操作：选择中文版 --&gt;&lt;script src='webjars/springfox-swagger-ui/lang/translator.js' type='text/javascript'&gt;&lt;/script&gt;&lt;script src='webjars/springfox-swagger-ui/lang/zh-cn.js' type='text/javascript'&gt;&lt;/script&gt; 重新启动项目即可~，此时就能通过swagger在线测试api了，不再需要打开postman了 六、生成离线文档传送门，先把swagger2markup-maven-project-template项目拉到本地 把示例文件删除，目录结构如下： 浏览器上输入http://127.0.0.1:8081/v2/api-docs，把内容替换至swagger.json 修改build.gradle，添加输出文件为中文配置 1234567891011convertSwagger2markup &#123; swaggerInput file("src/docs/swagger/swagger.json").getAbsolutePath() outputDir asciiDocOutputDir config = ['swagger2markup.markupLanguage' : 'ASCIIDOC', 'swagger2markup.pathsGroupedBy' : 'TAGS', 'swagger2markup.extensions.dynamicDefinitions.contentPath': file('src/docs/asciidoc/extensions/definitions').absolutePath, 'swagger2markup.extensions.dynamicOverview.contentPath' : file('src/docs/asciidoc/extensions/overview').absolutePath, 'swagger2markup.extensions.dynamicPaths.contentPath' : file('src/docs/asciidoc/extensions/paths').absolutePath, 'swagger2markup.extensions.dynamicSecurity.contentPath' : file('src/docs/asciidoc/extensions/security').absolutePath, 'swagger2markup.outputLanguage' : 'ZH']&#125; 最后，执行asciidoctor即可在build/asciidoc目录下生成离线文档（默认会生成html和pdf）。 离线文档效果如下：]]></content>
      <categories>
        <category>swagger</category>
      </categories>
      <tags>
        <tag>swagger</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux目录结构]]></title>
    <url>%2FLinux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.html</url>
    <content type="text"><![CDATA[/bin /usr/bin、 /usr/local/bin 是Binary的缩写, 这个目录存放着最经常使用的命令 /home 存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。 /root 该目录为系统管理员，也称作超级权限者的用户主目录。 /sbin /usr/sbin 、 /usr/local/sbin s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。 /lib 系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。 /lost+found 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。 /etc 所有的系统管理所需要的配置文件和子目录 my.conf /usr 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。 /proc 这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息。 /boot 存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件 /srv service缩写，该目录存放一些服务启动之后需要提取的数据。 /sys 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs /tmp 这个目录是用来存放一些临时文件的 。 /dev 类似于windows的设备管理器，把所有的硬件用文件的形式存储。 /media linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。 /mnt 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里的内容了。 d:/myshare /selinux [security-enhanced linux] 360 SELinux是一种安全子系统,它能控制程序只能访问特定文件 。 /var 这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件。 /opt 这是给主机额外安装软件所摆放的目录。如安装ORACLE数据库就可放到该目录下。默认为空。 /usr/local 这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis入门]]></title>
    <url>%2FRedis%E5%85%A5%E9%97%A8.html</url>
    <content type="text"><![CDATA[一、什么是RedisRedis：Remote Dictory Server（远程字典服务器） 是完全开源免费的，用C语言编写的，遵守BSD协议，是一个高性能的(key/value)分布式内存数据库，基于内存运行并支持持久化的NoSQL数据库，是当前最热门的NoSql数据库之一，也被人们称为数据结构服务器 Redis 与其他 key - value 缓存产品有以下三个特点 Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用 Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储 Redis支持数据的备份，即master-slave模式的数据备份 二、下载安装 英文官网传送门 中文官网传送门 下载最新的Redis版本。 解压tar.gz 1$ tar -zxvf redis-5.0.0.tar.gz 下载C程序编译工具gcc 1$ yum install gcc 编译 若出现jemalloc/jemalloc.h：没有那个文件或目录，则先运行make distclean之后再make，即可完成安装 12$ cd redis-5.0.0/$ make 三、redis指令 默认安装目录为：/usr/local/bin redis-benchmark：性能测试工具，可以测试性能（需要先启动redis） redis-check-aof：修复有问题的AOF文件 redis-check-dump：修复有问题的dump.rdb文件 redis-cli：客户端，操作入口 redis-sentinel：redis集群使用 redis-server：redis服务器启动命令 --port：指定端口，默认6379端口 默认以前台形式启动，要以后台启动，需要修改redis-5.0.0目录中的redis.conf文件的daemonize属性为yes 指定启动配置文件：redis-server /myredis/redis.conf 四、redis数据类型redis五大数据类型： String：字符串（二进制安全，可以保存图片，最大512M） Hash：哈希，类似java里的Map（HashMap&lt;String, Object&gt;） List：列表，链表（左右都可以插入添加，对中间元素进行操作比较慢） Set：集合，无序集合 Zset：有序集合（sorted set） 常见数据类型操作命令，传送门 0、其他命令dbsize：数据库key数量 select index：切换数据库（index为数据库下标，0~15） flushdb：清除当前数据库 flushall：清除所有数据库 1、keykeys *：查询所有的key exits key：判断某个key是否存在 move key db：移动某个key到其他db expire key seconds：为某个key设置过期时间 ttl key：查看还有多少秒过期，-1表示永不过期，-2表示已过期 type key：查看你的key是什么类型 del key：删除某个key 2、stringappend key value：拼接value字符串到key中 strlen key：获取某个key对应值的长度 incr key：数字自增1 decr key：数字自减1 incrby key value：数字增加value descby key value：数字减去value getrange key start end：获取指定区间范围内的值（0到-1表示全部） setrange key offset value：设置指定区间范围内的值 setex key seconds value：设置带过期时间的key setnx key value：只有key不存在时设置key的值 mset key value [key value ...]：同时设置一个或多个key-value对 mget key [key ...]：获取所有（一个或多个）给定key的值 msetnx key value [key value ...]：同时设置一个或多个key-value对，当且仅当所有给定的key都不存在 getset key value：设置新值，把旧值返回 3、listlpush key value [value ...]：左push rpush key value [value ...]：右push lrange key start stop：从左边开始获取指定区间的值（0到-1表示全部） lpop key：左边出栈 rpop key：右边出栈 lindex key value：按照索引下标获取元素（从上到下） llen key：获取列表长度 lrem key count value：删除N个值 ltrim key start stop：截取指定区间的值，重新赋值给key rpoplpush source destination：从源列表的右边出栈一个元素，该元素左边入栈目的列表，并返回 lset key index value：设置列表某个index的值 linsert key before/after pivot value：在list某个已有值的前后再添加具体值 4、setsadd key member [member ...]：往集合添加元素 smembers key：查看集合有什么元素 sismember key member：查看member是否为集合的元素 scard key：获取集合元素个数 srem key member [member ...]：移除集合中的元素 srandmember key [count]：随机获取集合中count个元素 spop key [count]：随机从集合中出栈count个元素 smove source destination member：从source中的某个值移动倒destination中 sdiff key [key ...]：差集（集合中的哪些元素不在其他集合中） sinter key [key ...]：交集（集合中的哪些元素存在于其他集合中） sunion key [key ...]：并集（几个集合的并集，去重复） 5、hashhset key field value：设置键为key，值为 field - value 的键值对 hget key field：获取键为key，field的值 hmset key field value [field key ...]：设置多个键值对 hgetall key：获取所有键值对 hdel key field [field ...]：删除某个键值对 hlen key：获取键值对对数 hexists key field：key中是否存在该键值对的键 hkeys/hvals key：获取key的所有键或所有值 hincrby/hincrbyfloat key field increment：数字增加整数或浮点 hsetnx key field value：不存在赋值，存在无效 6、Zsetzadd key score member [score member ...]：设置键为key，score与member对 zrange key start stop [withscores]：获取区间的值（0到-1表示全部），加上withscores，显示所有score zrangebyscore key min max [withscores] [limit offset count]：获取区间的值根据score，(表示不包含，limit类似mysql的limit。举个例子：ZRANGEBYSCORE zset 20 (50 limit 1 2 zrem key member [member ...]：移除score下对应的member值，删除元素 zcard key：获取键为key，member的数量 zcount key min max：根据score区间获取member数量 zrank key member：获取member在key中的下标位置 zscore key member：按照member获取score zrevrank/zrevrange/zrevrangebyscore：反转 五、配置文件1、redis.conf存放位置 配置文件redis.conf，在安装redis的安装路径下，一般吧redis.conf复制到其他地方，在启动redis-server /myredis/redis.conf指定配置文件的位置。 2、units单位redis只支持bytes，不支持bit，大小写不敏感。 3、includes可以通过include包含其他配置文件 12# include /path/to/local.conf# include /path/to/other.conf 4、modules可以让用户编写代码来实现和扩展redis不具备的功能 12# loadmodule /path/to/my_module.so# loadmodule /path/to/other_module.so 5、network网络设置 1234567891011121314# 只响应本地ip的请求，不设置则响应可用网卡的所有连接请求bind 127.0.0.1# 禁用公网访问redis，如果需要外网访问redis则设置为no，并把上面的bind 127.0.0.1注释掉protected-mode yes# 默认启动端口为6379port 6379# 并发时，需要提高tcp的backlog的值来避免TCP的慢连接问题# backlog队列总和=未完成三次握手队列 + 已经完成三次握手队列# 注意Linux内核会将这个值减小到/proc/sys/net/core/somaxconn的值，所以需要确认增大somaxconn和tcp_max_syn_backlog两个值tcp-backlog 511# 客户端空闲N秒后关闭连接（0为禁用）timeout 0# TCP连接保活策略，每隔300秒server端会向连接空闲的客户端发送一次ACK请求，检查客户端是否挂掉，对于无响应的客户端则关闭连接（0为禁用）tcp-keepalive 300 6、generalredis的一般设置 12345678910111213141516171819202122232425262728# 设置为`yes`已守护进程的形式启动redisdaemonize no# 使用什么管理redis守护进程# no 不启用# upstart 使用upstart# systemd 使用systemd # auto 基于环境变量选择使用upstart还是systemdsupervised no# 配置pid文件路径pidfile /var/run/redis_6379.pid# 日志级别# debug 记录大量日志，适用于开发、测试阶段）# verbose 较多日志信息# notice 适量日志，使用于生产# warning 部分重要，关键信息才会被记录loglevel notice# 日志文件的位置，当指定为空字符串时，为标准输出，如果redis守护进程模式运行，那么日志会输出到/dev/nulllogfile ""# 是否把日志记录到系统日志（默认被注释）syslog-enabled# 指定日志的标志（默认被注释）syslog-ident# 指定日志设备，必须是user或local0到local7（默认被注释）syslog-facility local0# 设置redis数据库数量，默认16个数据库databases 16# 是否启用logoalways-show-logo yes 7、snapshotting设置快照（rdb配置） 12345678910111213141516171819# rdb是整个内存压缩过的快照，rdb的数据结构，可以配置快捷触发条件# 默认# 1分钟改1万次# 5分钟改10次# 15分钟改1次# 如果需要禁用rdb，只需要不设置任何save指令，或者save传入一个空字符串参数（save ""）save 900 1save 300 10save 60 10000# 后台存储错误停止写stop-writes-on-bgsave-error yes# 对于存储在磁盘的快照(rdb)，是否进行压缩（可以关掉）rdbcompression yes# 存储快照后，是否要进行数据校验（可能会损耗10%的性能，如果要获取最大性能可以关闭此功能）rdbchecksum yes# 持久化rdb存储文件名dbfilename dump.rdb# 数据库镜像备份的文件放置路径（可以通过config get dir获取）dir ./ 8、replication主从复制配置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# 从机设置主机的ip和端口replicaof &lt;masterip&gt; &lt;masterport&gt;# 设置主机的密码，没有密码则忽略masterauth &lt;master-password&gt;# 当一个 slave 与 master 失去联系，或者复制正在进行的时候，slave 可能会有两种表现：# 1) 如果为 yes ，slave 仍然会应答客户端请求，但返回的数据可能是过时，或者数据可能是空的在第一次同步的时候 # 2) 如果为 no ，在你执行除了 info he salveof 之外的其他命令时，slave 都将返回一个 "SYNC with master in progress" 的错误replica-serve-stale-data yes# 设置从机是否接收写操作，默认为只读，不能写replica-read-only yes# 主从复制是否使用无硬盘复制功能，默认为no。对于慢磁盘和快速(大带宽)网络，无磁盘复制工作得更好。# 1）Disk-backed：主机创建一个新的进程写RDB文件在磁盘，然后由父进程递增地传递到从机# 2）Diskless：主机创建一个新的进程直接写RDB文件在从机的socket上，根本不触及磁盘repl-diskless-sync no# 当启用无硬盘复制功能，服务器等待一段时间才会通过套接字向从机写RDB文件，这个时间可以配置。# 这一点很重要，因为一旦传送开始，就不可能再为新到达的从机服务。从机要排队等待下一次的RDB传送。# 因此主机等待一段时间让更多的从机到达。# 延时单位为秒，设置0为立即传送repl-diskless-sync-delay 5# 从机以预定义的间隔向服务器发送ping信号。默认为10秒repl-ping-replica-period 10# 以下选项设置复制超时# 1）从复制的角度来看，同步过程中批量传输I/O# 2）从从机（数据、ping）的角度# 3）从主机的角度来看副本超时（REPLCONF ACK pings）# 还要确保该值要大于repl-ping-replica-period，否则每次主机和从简的流量较低时，就会监测到超时repl-timeout 60# 同步后在复制套接字上是否禁用 TCP_NODELAY？# yes：Redis会使用更少的TCP包和发送数据到从机的带宽更少。但这会增加数据出现在复制端上的延迟，使用默认配置的Linux内核最多延迟40毫秒# no：数据出现在从机的延迟将会减少，但复制将使用更多的带宽。# 默认情况下，我们优化低延迟，但是在非常高的流量条件下，或者当主机和从机多次跳转时，将其改为“yes”可能是个好主意repl-disable-tcp-nodelay no# 设置复制backlog的大小。# backlog是一个缓冲区，当从机断开连接一段时间后，它会积累从机数据，因此当副本希望再次连接时，通常不需要完全的重新同步，但是部分的重新同步就足够了，只需要传递在断开连接时从机遗留的部分数据即可。# 复制backlog越大，副本断开连接的时间越长，稍后就能够执行部分重新同步。# 只有在至少连接一个副本时，才分配backlogrepl-backlog-size 1mb# 在主机一段时间内不再连接从机之后，backlog将会被释放。# 下面的选项配置从最后一个副本断开连接的时间需要多长时间来释放backlog缓冲区repl-backlog-ttl 3600# 如果主机不再正常工作，具有低优先级的从机被认为更适合升级。# 如10、100、25，则10将成为主机，如果优先级为0则不能成为主机。replica-priority 100# 当从机少于N个与主机之间的延迟小于M秒，主机将不再提供工作。默认N=0，M=10min-replicas-to-write Nmin-replicas-max-lag M 9、security安全配置 123456# 设置密码（默认被注释）# config get requirepass：获取密码# config set requirepass pass：设置密码为pass# 设置完密码后需要验证密码# auth passrequirepass foobared 10、clients客户端配置 12# 设置最大客户端数量maxclients 10000 11、memory management内存管理配置 12345678910111213141516171819202122232425# 设置redis可用的最大内存量# 一旦达到内存上限，redis会试图移除内部数据，移除规则通过（maxmemory-policy）指定# 如果redis无法根据移除规则来移除内存数据，或者设置了不允许移除# 那么redis则会针对那些需要申请内存的指令返回错误信息（set、lpush等）# 但是无内存申请的指令会正常响应（get等）maxmemory &lt;bytes&gt;# 达到最大内存策略（5种策略）# 1、lru（Least Recently Used：最近最少使用）# volatile-lru -&gt; 使用lru移除key，只针对设置了过期时间的key# allkeys-lru -&gt; 使用lru移除key# 2、lfu（Least Frequently Used：最近最不常用）# volatile-lfu -&gt; 使用lfu移除key，只针对设置了过期时间的key# allkeys-lfu -&gt; 使用lfu移除key# 3、random（随机）# volatile-random -&gt; 随机移除key，只针对设置了过期时间的key# allkeys-random -&gt; 随机移除key# 4、ttl（Time To Live，生存时间值）# volatile-ttl -&gt; 删除最近过期时间的key# 5、noeviction（不移除）maxmemory-policy noeviction# LRU、LFU和最小TTL算法都不是精确的算法，而是近似的算法# 所以需要设置需要的样本值，从样本中进行算法（默认5可以产生足够好的结果，10非常真正的LRU，但是需要更多CPU）maxmemory-samples 5# 副本忽略最大内存限制replica-ignore-maxmemory yes 12、lazy freeinglazy free可译为惰性删除或延迟释放；当删除键的时候,redis提供异步延时释放key内存的功能，把key释放操作放在bio(Background I/O)单独的子线程处理中，减少删除big key对redis主线程的阻塞。有效地避免删除big key带来的性能和可用性问题。 123456789# 默认全部都没开启# redis内存大于maxmemory，并设置淘汰策略时，在被动删除key时，是否采用lazy freelazyfree-lazy-eviction no# 针对设置有ttl的key，达到过期后，被redis清理删除时是否采用lazy freelazyfree-lazy-expire no# 针对有些指令在处理已存在的key时，会带有隐式的DEL键，如rename，是否采用lazy freelazyfree-lazy-server-del no# 针对slave进行全量数据同步，slave在加载master的RDB文件前，会运行flushall来清理自己的数据场景，是否采用lazy freereplica-lazy-flush no 参考链接：https://www.jianshu.com/p/e927e99e650d 13、append only modeaof配置 12345678910111213141516171819202122232425# 是否启用aof，默认为noappendonly no# 生成的aof文件名appendfilename "appendonly.aof"# 更新aof文件条件，三个可选值：# 1、always：同步持久化，每次发生数据变更都会被立即记录到磁盘，性能较差但数据完整性比较好# 2、everysec：默认推荐，异步操作，每秒记录，如果一秒内宕机，该秒会数据丢失# 3、no：只要让操作系统在需要时刷新数据。速度快appendfsync no# 重写时是否可以运用Appendfsync，用默认no即可，保证数据安全性。# 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync（记录）会造成阻塞过长时间。# 对于延迟要求很高的应用，可以设置为yes，测试哦rewrite期间对于新写的操作不会进行fsync，暂时存在内存中，等rewrite结束后再进行写入。Linux的默认fsync策略是30秒。可能丢失30秒数据。no-appendfsync-on-rewrite no# 设置重写的基准值# aof自动重写配置，当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写# 即当aof文件增长到一定大小的时候，redis就能调用bgrewriteaof对日志文件进行重写。# 默认为100，即两倍，自动启动新的日志重写过程auto-aof-rewrite-percentage 100# 指定允许重写的最小aof文件大小，避免达到了约定百分比，但文件仍然很小的情况还要重写auto-aof-rewrite-min-size 64mb# aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项，出现这种现象，redis宕机或者异常终止不会造成尾部不完整现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。默认值为 yes。aof-load-truncated yes# 在重写AOF文件时，Redis可以在AOF文件中使用RDB序言来加快重写和恢复。当打开此选项时，重写后的AOF文件由两个不同的小节组成:[RDB文件][AOF tail]。加载Redis时，发现AOF文件以“Redis”字符串开头，加载带前缀的RDB文件，并继续加载AOF tail。# 开启RDB与AOF混合持久化，需要appendonly yesaof-use-rdb-preamble yes 14、lua scriptinglua脚本配置 12# Lua脚本的最大执行时间(毫秒)lua-time-limit 5000 15、redis clusterredis集群配置 123456789# 启动redis集群cluster-enabled yes# 每一个redis集群节点都有自己的配置文件，确保每个节点只有一份配置文件# 指定配置文件的名字cluster-config-file nodes-6379.conf# 集群节点超时时间cluster-node-timeout 15000# cluster-replica-validity-factor 10 ==以下配置待续== 16、cluster docker/nat support17、slow log18、latency monitor19、event notifacation20、advance config21、actice defpagmentation六、持久化（1）RDBRDB：Redis DataBase 1、是什么？ Redis默认备份方式，备份文件名默认为dump.rdb 在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。 Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。 2、Fork fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程 3、触发RDB快照 配置文件中默认的快照配置，满足以下三条其中一个将会触发RDB快照 1分钟10000次写 5分钟10次写 30分钟1次写 命令save和bgsave save：save时只管保存，其它不管，全部阻塞 BGSAVE：Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求。可以通过lastsave命令获取最后一次成功执行快照的时间 执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义 4、恢复备份 将备份文件（dump.rdb）移动到redis安装目录并启动服务即可 config get dir：通过该命令获取备份文件目录 5、优劣势 优势： 适合大规模的数据恢复 对数据完整性和一致性要求不高 劣势： 在一定间隔时间做一次备份，所以如果redis意外down掉的话，就会丢失最后一次快照后的所有修改 fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑 6、如何停止 动态所有停止RDB保存规则的方法：redis-cli config set save “” （2）AOFAOF：appendonly file 1、是什么？ AOF默认不开启，需要再redis.conf中开启AOF（具体查看配置文件），备份文件名默认为appendonly.aof 以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作 2、AOF启动、修复、恢复 正常恢复 启动：修改配置文件appendonly yes 将有数据的aof文件复制一份保存到对应目录（config get dir） 恢复：重启redis然后重新加载 异常恢复 启动：修改配置文件appendonly yes 备份被写坏的AOF文件 修复：使用redis-check-aof --fix进行修复 恢复：重启redis然后重新加载 3、重写机制 是什么？AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制，当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof 重写原理：AOF文件持续增长而过大时，会fork出一条新进程来将文件重写（也是先写临时文件最后再rename），遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似 触发机制：Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大小64M（可以配置文件修改）时触发 4、优劣势 优势： 每修改同步：appendfsync always 同步持久化 每次发生数据变更会被立即记录到磁盘 性能较差但数据完整性比较好 每秒同步：appendfsync everysec 异步操作，每秒记录 如果一秒内宕机，有数据丢失 不同步：appendfsync no 从不同步 劣势： 相同数据集的数据而言aof文件要远大于rdb文件，恢复速度慢于rdb aof运行效率要慢于rdb,每秒同步策略效率较好，不同步效率和rdb相同 （3）RDB-AOF混合持久化 配置文件中，修改aof-use-rdb-preamble为 true（默认就为true，启动了aof就会起作用） 在重写AOF文件时，Redis可以在AOF文件中使用RDB序言来加快重写和恢复。当打开此选项时，重写后的AOF文件由两个不同的小节组成：[RDB文件][AOF tail]。 旧的数据存储在RDB中，rewrite（重写）后的写入将用aof保存。 七、事务1、是什么 可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其它命令插入，不许加塞 一个队列中，一次性、顺序性、排他性的执行一系列命令 2、常用命令 MULTI：开启事务 DISCARD：放弃事务 WATCH：类似乐观锁，开启事务前，监控一个或多个key，当在事务执行中，有一个key的值发生改变，则会回滚整个事务 UNWATCH：取消监控一个或多个key EXEC：触发事务，执行成功或失败都会取消所有key的监控 3、事务三阶段 开启：以MULTI开始一个事务 入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面 执行：由EXEC命令触发事务 4、事务三特性 单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 没有隔离级别的概念：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题 不保证原子性：redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚 八、Redis的发布订阅 进程间的一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。 1、常用命令 subscribe c1 c2 c2：一次性订阅一个或多个，可以使用通配符，如`subscribe new` publish c1 msg：消息发布 九、Redis的Master/Slave1、是什么？ 行话：也就是我们所说的主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主。 2、能干什么？ 读写分离 容灾恢复 3、常用命令 slaveof 主机ip 主机端口：跟随一个主机 slaveof no one：反客为主 info replication：查看主从关系信息 4、怎么玩？ 配从不配主 从库配置：slaveof 主机ip 主机端口，如果不配置需要手动配置 常用三招： 一主二仆：一个主机两个从机，主机挂掉，从机会等待主机重新上线 薪火相传：从机也可以是另外一个从机的主机，当最上级主机发生写操作，所有从机（包括下级从机）都会同步 反客为主：SLAVEOF no one，使当前数据库停止与其他数据库的同步，转成主数据库 5、复制原理 slave启动成功连接到master后会发送一个sync命令 Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，以完成一次完全同步 全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中 增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步 但是只要是重新连接master，一次完全同步（全量复制）将被自动执行 6、哨兵模式(sentinel) 反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库 新建sentinel.conf文件，编辑内容为如下： 1sentinel monitor 被监控数据库名字(自己起名字) 127.0.0.1 6379 1 上面最后一个数字1，表示主机挂掉后salve投票看让谁接替成为主机，得票数多少后成为主机 启动哨兵：redis-sentinel sentinel.conf 当主机挂掉后，从机投票得出新的主机，旧的主机回来后会成为新主机的从机。哨兵模式启动后，对应挂掉的主机或从机，重新启动后会被哨兵重写对应的配置文件，把新的主机地址和端口放在slaveof 主机ip 主机端口中。]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从U盘安装ArchLinux]]></title>
    <url>%2F%E4%BB%8EU%E7%9B%98%E5%AE%89%E8%A3%85ArchLinux.html</url>
    <content type="text"><![CDATA[前言 都说ArchLinux比较难安装，本文简单记录通过U盘去安装ArchLinux。当然还是主要参照官方文档wiki。传送门 一、把镜像写入U盘 首先要准备好u盘。要备份好u盘中的数据，稍后会格式化u盘。 参照官方wiki提供的多种写入镜像的方法，传送门)，这里使用USBWriter（百度云盘地址）。 Source file：选择ArchLinux的iso镜像 Target device：选择需要写入的u盘 最后点击Write等待完成即可 二、开始安装ArchLinux1、wifi-menu 2、nano /etc/pacman.d/mirrorlist 3、fdisk /dev/sda 123456789# 500M /boot/EFI $ mkfs.fat -F32 /dev/sda1# 500M /boot $ mkfs.ext4 /dev/sda2# 12G swap$ mkswap/dev/sda3$ swapon/dev/sda3# 100G /$ mkfs.ext4 /dev/sda4 4、挂载 12345$ mount /dev/sda4 /mnt$ mkdir /mnt/boot$ mount /dev/sda2 /mnt/boot$ mkdir /mnt/boot/EFI$ mount /dev/sda1 /mnt/boot/EFI 5、 pacstrap -i /mnt base base-devel 6、 进入到新系统 12$ genfstab -U /mnt &gt;&gt; /mnt/etc/fstab$ arch-chroot /mnt 7、本地化 1234567$ nano /etc/locale.gen# 反注释（删掉前面的#） # en_US.UTF-8 UTF-8 # zh_CN.UTF-8 UTF-8 # 这两个，退出保存 $ locale-gen$ echo LANG=en_US.UTF-8 &gt; /etc/locale.conf 8、设置时区 9、引导系统 123$ pacman -S dosfstools grub efibootmgr$ grub-install --target=x86_64-efi --efi-directory=/boot/EFI --recheck$ grub-mkconfig -o /boot/grub/grub.cfg 10、用户管理 1234567# 设置root密码$ passwd$ useradd mrxiexie$ passwd mrxiexie$ nano /etc/sudoers#在 root ALL=(ALL) ALL 下面添加 #用户名 ALL=(ALL) ALL 11、下载wifi-menu必要包 12# 重启前先调用该命令pacman -S iw wpa_supplicant dialog 三、配置i312345678910# 下载i3$ pacman -S i3# 下载xorg$ pacman -S xorg xorg-xinit# 复制配置文件到家目录$ cp /etc/X11/xinit/xinitrc ~/.xinitrc# 修改.xinitrc最后一行为$ exec i3# 启动$ startX 四、配置ArchLinux1、安装aur，执行以下shell脚本 123456789#!/bin/bashgit clone https://aur.archlinux.org/package-query.gitcd package-querymakepkg -sicd ..git clone https://aur.archlinux.org/yaourt.gitcd yaourtmakepkg -sicd .. 2、安装openssh远程登录 123$ pacman -S openssh# 修改/etc/ssh/sshd_config，将PermitRootLogin yes前的#号去掉允许root远程登录$ vim /etc/ssh/sshd_config 3、本地化 添加以下三行到~/.xinitrc中，放在exec前 123export LANG=zh_CN.UTF-8export LANGUAGE=zh_CN:en_USexport LC_CTYPE=en_US.UTF-8 4、设置时间 123$ ln -S /usr/share/zoneinfo/Asia/Shanghai /etc/localtime$ hwclock --systohc --utf# 修改/etc/locatime CST-8为CST-0 5、安装搜狗输入法 传送门 6、安装i3lock锁屏 1234$ pacman -S i3lock$ yaourt -S i3lock-wrapper# 自动锁屏$ pacman -S xautolock 7、安装chrome浏览器 12 8、安装polybar状态栏 1$ yaourt -S polybar 9、安装rofi搜索 配置文件在~/.Xresources 1$ pacman -S rofi 10、安装i3-gaps桌面 配置文件在~/.config/i3/config 1yaourt -S i3-gaps 11、安装flux 12、安装lantern-bin 13、安装终端 1$ pacman -S xfce4-terminal ==待续==]]></content>
      <categories>
        <category>ArchLinux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA整合Docker详细教程]]></title>
    <url>%2FIDEA%E6%95%B4%E5%90%88Docker%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B.html</url>
    <content type="text"><![CDATA[一、简单介绍Docker守护进程（Daemon）Docker守护进程可以监听三种不同类型的Socket请求：unix，tcp，和fd。 默认情况下，创建unixSocket，/var/run/docker.sock，需要root权限或docker组成员身份。 如果需要远程访问Docker守护进程，则需要启用tcpSocket。注意，默认设置提供对Docker守护进程的未加密和为经过身份验证的直接访问。 未加密（所有人都可以访问，不安全）： dockerd -H tcp:0.0.0.0:2375：使ip地址监听2375所有网络接口上的端口 dockerd -H tcp:192.168.59.103:2375：使ip地址监听特定网络接口 加密（只有证书的才能访问，安全）： 通常使用2376与守护进程进行加密通信 以下将分不加密与加密介绍IDEA与Docker的整合。 二、不加密（1）开放Docker远程连接访问方法一： 使用dockerd启动Docker 1$ dockerd -H tcp:0.0.0.0:2375 方法二： 修改/usr/lib/systemd/system/docker.service的ExecStart属性，不需要每次启动都带上参数 1$ vim /usr/lib/systemd/system/docker.service 修改ExecStart属性为如下 /usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock （2）重启Docker12$ systemctl daemon-reload $ systemctl restart docker （3）开放2375端口以centos7为例 12345$ firewall-cmd --zone=public --add-port=2375/tcp --permanentsuccess$ systemctl restart firewalld.service$ firewall-cmd --zone=public --query-port=2375/tcpyes #yes说明已开放2375端口 （4）把项目打为jar包备用 （5）配置IDEA中的Docker插件Engine API URL填写对应的地址与端口 显示Connection successful则说明配置成功 此时左下角多了docker标签，显示了该docker中所拥有的所有容器和镜像 （6）编写Dockerfile创建Dockerfile文件 内容如下： 1234FROM openjdk:8EXPOSE 8080COPY docker-0.0.1-SNAPSHOT.jar docker.jarCMD ["java", "-jar", "/docker.jar"] （7）创建镜像并运行容器 Edit Configuration新增Dockerfile配置，填写对应信息，点击ok即可~ 点击运行 稍等片刻，等容器运行 （8）在浏览器访问容器 三、加密为什么要加密？第二步的配置所有人都可以访问，意味着黑客可以随时黑你的服务器。所以根据官网的说明，可以通过加密通信来保证安全。 加密可参照官网文档一步步操作，传送门 （1）创建保存证书的文件夹此处我把文件夹创建在root文件夹下 1$ mkdir -p /root/ac （2）创建CA证书切换到ac文件夹下，生成CA私钥和公钥 创建私钥，需要输入两次密码 1234567[root@mrxiexie ac]# openssl genrsa -aes256 -out ca-key.pem 4096Generating RSA private key, 4096 bit long modulus.....................++.............................................++e is 65537 (0x10001)Enter pass phrase for ca-key.pem:Verifying - Enter pass phrase for ca-key.pem: 首先输入私钥密码，然后依次输入国家，省，区，组织，邮箱等 12345678910111213141516[root@mrxiexie ac]# openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pemEnter pass phrase for ca-key.pem:You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter '.', the field will be left blank.-----Country Name (2 letter code) [XX]:CNState or Province Name (full name) []:GuangdongLocality Name (eg, city) [Default City]:ShundeOrganization Name (eg, company) [Default Company Ltd]:MrXieXieOrganizational Unit Name (eg, section) []:MrXieXieCommon Name (eg, your name or your server's hostname) []:MrXieXieEmail Address []:MrXieXie@qq.com （3）创建服务器密钥和证书签名请求（CSR）12345[root@mrxiexie ac]# openssl genrsa -out server-key.pem 4096Generating RSA private key, 4096 bit long modulus................................++..........................................................................................................................................++e is 65537 (0x10001) $Host换成你自己服务器外网的IP或者域名，由于我使用的是虚拟机，这里填写了虚拟机的ip地址192.168.252.128 1[root@mrxiexie ac]# openssl req -subj "/CN=$HOST" -sha256 -new -key server-key.pem -out server.csr （4）签署公钥由于可以通过IP地址和DNS名称建立TLS连接，因此在创建证书时需要指定它们。 建议使用0.0.0.0，即允许所有的ip都访问，但只有拥有证书的人才能够连接成功。此处需要输入一次ca证书密码。 若使用IP则命令如下，多个可用逗号分隔 echo subjectAltName = IP:x.x.x.x,IP:y.y.y.y &gt; extfile.cnf 若使用域名则命令如下 echo subjectAltName = DNS:www.mrxiexie.cn,IP:y.y.y.y &gt; extfile.cnf 123456[root@mrxiexie ac]# echo subjectAltName = IP:0.0.0.0,IP:192.168.252.128 &gt; extfile.cnf[root@mrxiexie ac]# openssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem -extfile extfile.cnfSignature oksubject=/CN=192.168.252.128Getting CA Private KeyEnter pass phrase for ca-key.pem: （5）创建客户端密钥和证书签名请求 创建key.pem 123456[root@mrxiexie ac]# openssl genrsa -out key.pem 4096Generating RSA private key, 4096 bit long modulus....................................................++................................................................................................................................................................++e is 65537 (0x10001)[root@mrxiexie ac]# openssl req -subj '/CN=client' -new -key key.pem -out client.csr （6）签署私钥 要使密钥适合客户端身份验证，创建扩展配置文件： 1[root@mrxiexie ac]# echo extendedKeyUsage = clientAuth &gt; extfile.cnf 签署私钥，输入ca证书密码 生成cret.pem 12345[root@mrxiexie ac]# openssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -extfile extfile.cnfSignature oksubject=/CN=clientGetting CA Private KeyEnter pass phrase for ca-key.pem: （7）删除两个证书签名请求12345[root@mrxiexie ac]# rm -v client.csr server.csrrm：是否删除普通文件 "client.csr"？y已删除"client.csr"rm：是否删除普通文件 "server.csr"？y已删除"server.csr" （8）修改文件读写权限 为了保护您的密钥免受意外损坏，您需要删除其写入权限。要使它们只能被您读取 1234[root@mrxiexie ac]# chmod -v 0400 ca-key.pem key.pem server-key.pemmode of "ca-key.pem" changed from 0644 (rw-r--r--) to 0400 (r--------)mode of "key.pem" changed from 0644 (rw-r--r--) to 0400 (r--------)mode of "server-key.pem" changed from 0644 (rw-r--r--) to 0400 (r--------) 证书可以是可读的，删除写权限以防止意外损坏 1234[root@mrxiexie ac]# chmod -v 0444 ca.pem server-cert.pem cert.pemmode of "ca.pem" changed from 0644 (rw-r--r--) to 0444 (r--r--r--)mode of "server-cert.pem" changed from 0644 (rw-r--r--) to 0444 (r--r--r--)mode of "cert.pem" changed from 0644 (rw-r--r--) to 0444 (r--r--r--) （9）启动Docker启动Docker守护程序仅接受来自提供CA信任的证书的客户端的连接，注意要开放2376端口，请参照不加密第三条 方式一：以前台方式启动 1[root@mrxiexie ac]# dockerd --tlsverify --tlscacert=ca.pem --tlscert=server-cert.pem --tlskey=server-key.pem -H=0.0.0.0:2376 方式二： 修改/usr/lib/systemd/system/docker.service的ExecStart属性，不需要每次启动都带上参数 1ExecStart=/usr/bin/dockerd --tlsverify --tlscacert=/root/ac/ca.pem --tlscert=/root/ac/server-cert.pem --tlskey=/root/ac/server-key.pem -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock 重启docker 12$ systemctl daemon-reload $ systemctl restart docker （10）把客户端pem证书保存到本地 把三个证书放在同一个目录中： （11）配置IDEA Certificates floder指定证书目录 显示Connection successful则配置成功 四、脚本生成证书嫌加密要输的命令太多了？shell脚本帮你搞掂。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#!/bin/bash# # Created by L.STONE &lt;web.developer.network@gmail.com&gt;# -------------------------------------------------------------# 自动创建 Docker TLS 证书# -------------------------------------------------------------# 以下是配置信息# --[BEGIN]------------------------------IP="192.168.252.128"PASSWORD="root"COUNTRY="CN"STATE="GD"CITY="SD"ORGANIZATION="MrXieXie"ORGANIZATIONAL_UNIT="MrXieXie"COMMON_NAME="192.168.252.128"EMAIL="MrXieXie@qq.com"# --[END]--# Generate CA keyopenssl genrsa -aes256 -passout "pass:$PASSWORD" -out "ca-key.pem" 4096# Generate CAopenssl req -new -x509 -days 365 -key "ca-key.pem" -sha256 -out "ca.pem" -passin "pass:$PASSWORD" -subj "/C=$COUNTRY/ST=$STATE/L=$CITY/O=$ORGANIZATION/OU=$ORGANIZATIONAL_UNIT/CN=$COMMON_NAME/emailAddress=$EMAIL"# Generate Server keyopenssl genrsa -out "server-key.pem" 4096# Generate Server Certs.openssl req -subj "/CN=$COMMON_NAME" -sha256 -new -key "server-key.pem" -out server.csrecho "subjectAltName = IP:$IP,IP:127.0.0.1" &gt;&gt; extfile.cnfecho "extendedKeyUsage = serverAuth" &gt;&gt; extfile.cnfopenssl x509 -req -days 365 -sha256 -in server.csr -passin "pass:$PASSWORD" -CA "ca.pem" -CAkey "ca-key.pem" -CAcreateserial -out "server-cert.pem" -extfile extfile.cnf# Generate Client Certs.rm -f extfile.cnfopenssl genrsa -out "key.pem" 4096openssl req -subj '/CN=client' -new -key "key.pem" -out client.csrecho extendedKeyUsage = clientAuth &gt;&gt; extfile.cnfopenssl x509 -req -days 365 -sha256 -in client.csr -passin "pass:$PASSWORD" -CA "ca.pem" -CAkey "ca-key.pem" -CAcreateserial -out "cert.pem" -extfile extfile.cnfrm -vf client.csr server.csrchmod -v 0400 "ca-key.pem" "key.pem" "server-key.pem"chmod -v 0444 "ca.pem" "server-cert.pem" "cert.pem"# 打包客户端证书mkdir -p "tls-client-certs"cp -f "ca.pem" "cert.pem" "key.pem" "tls-client-certs/"cd "tls-client-certs"tar zcf "tls-client-certs.tar.gz" *mv "tls-client-certs.tar.gz" ../cd ..rm -rf "tls-client-certs"# 拷贝服务端证书mkdir -p /etc/docker/certs.dcp "ca.pem" "server-cert.pem" "server-key.pem" /etc/docker/certs.d/# /etc/docker/daemon.json# &#123;# "tlsverify": true,# "tlscacert": "/etc/docker/certs.d/ca.pem",# "tlscert": "/etc/docker/certs.d/server-cert.pem",# "tlskey": "/etc/docker/certs.d/server-key.pem",# "hosts": ["tcp://0.0.0.0:2376", "unix:///var/run/docker.sock"]# &#125;echo " - 修改 /etc/docker/daemon.json 文件"cat &lt;&lt;EOFvi /etc/docker/daemon.json&#123; "tlsverify": true, "tlscacert": "/etc/docker/certs.d/ca.pem", "tlscert": "/etc/docker/certs.d/server-cert.pem", "tlskey": "/etc/docker/certs.d/server-key.pem", "hosts": ["tcp://0.0.0.0:2376", "unix:///var/run/docker.sock"]&#125;EOF# 拷贝客户端证书文件# cp -v &#123;ca,cert,key&#125;.pem ~/.docker# 客户端远程连接# docker -H 192.168.1.130:2376 --tlsverify --tlscacert ~/.docker/ca.pem --tlscert ~/.docker/cert.pem --tlskey ~/.docker/key.pem ps -aecho "docker -H $IP:2376 --tlsverify --tlscacert ~/.docker/ca.pem --tlscert ~/.docker/cert.pem --tlskey ~/.docker/key.pem ps -a"# 客户端使用 cURL 连接# curl --cacert ~/.docker/ca.pem --cert ~/.docker/cert.pem --key ~/.docker/key.pem https://192.168.1.130:2376/containers/jsonecho "curl --cacert ~/.docker/ca.pem --cert ~/.docker/cert.pem --key ~/.docker/key.pem https://$IP:2376/containers/json"echo -e "\e[1;32mAll be done.\e[0m" 执行完脚本后，修改/etc/docker/daemon.json 12345678$ vi /etc/docker/daemon.json&#123; "tlsverify": true, "tlscacert": "/etc/docker/certs.d/ca.pem", "tlscert": "/etc/docker/certs.d/server-cert.pem", "tlskey": "/etc/docker/certs.d/server-key.pem", "hosts": ["tcp://0.0.0.0:2376", "unix:///var/run/docker.sock"]&#125; 然后重启docker即可~，客户端证书都已经打包好在你执行脚本了。 修改/usr/lib/systemd/system/docker.service的ExecStart属性 1ExecStart=/usr/bin/dockerd 重新启动docker 12$ systemctl daemon-reload $ systemctl restart docker 把ca目录下的tls-client-certs.tar.gz复制到window下，里面有客户端的三个证书，idea指向对应的解压目录即可。 ps：如果直接把脚本在window下放到linux下执行可能会出错，由于window的换行跟linux的换行有所不同。只需在vim命令下:set ff=unix即可。还有别忘了，脚本需要给执行权限才能运行~]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SublimeText3配置Lua开发环境]]></title>
    <url>%2FSublimeText3%E9%85%8D%E7%BD%AELua%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html</url>
    <content type="text"><![CDATA[前言 关于SublimeText这款开发神器，以后会出文章记录安装流程及常用的插件安装。 最近在学lua这门轻量级的脚本语言，为了要在触动精灵上大显身手。一款灵活的开发工具就显得很重要了，官方自带的开发工具对中文支持不太好，而且代码补全不够完善。后来接触到了其他几款IDE，也尝试过在IDEA中安装EmmyLua插件进行开发，但IDEA太占内存了，感觉拿来开发几个lua小脚本有点小题大做。最终，选择用SublimeText这款神器进行lua脚本开发。 一、安装LuaForWindow首先要安装lua脚本的编译环境，点击后方链接，安装在你喜欢的地方即可：LuaForWindow传送门。 安装完成后打开cmd，输入lua -v，出现版本信息，即安装成功。 二、创建Hello.lua在sublime中创建Hello.lua，输入print(&#39;Hello World&#39;)，快捷键ctrl + B运行，可看到运行成功。 三、安装插件（1）Lua Dev 运行出错提示错误信息，传送门 （2）Lua Extended 添加while、repeat等代码片段，传送门。 安装插件后ctrl + shift + p，输入set Syntax: LuaExtended切换到该语法环境下开发。 （3）Lua Format lua代码格式化，传送门。 由于我们安装了Lua Extended插件，我们需要在LuaExtended语法下开发，而Lua Format只能在Lua语法下起作用，所以还需要以下配置。 SharePreference &gt; Package Settings &gt; Lua Format &gt; Key Bindings - User 在KeyMap的User下添加如下 安装PackageResourceViewer插件 ctrl + shift + p，输入open resource &gt; LuaFormat &gt; LuaFormat.py 修改内容如下： 12file_suffix = suffix_setting.split('/')[2]if not file_suffix.lower().startswith('lua'): return ctrl + s保存即可 （4）sublimelinter-lua 语法检测，传送门。 安装该插件前，首先要先安装sublimelinter 由于我们安装了Lua Extended插件，我们需要在LuaExtended语法下开发，而sublimelinter-lua只能在Lua语法下起作用，所以还需要以下配置。 根据Lua Extended文档的设置Linters的配置文件，可是不成功，具体原因还不清楚。只能通过以下偏方法来解决了。 在SublimeText安装目录中找到LuaExtended.sublime-package文件 右键使用解压文件打开，修改LuaExtended为Lua，保存即可（需要先关闭SublimeText才能修改） 最终效果如下： （5）SublimeLinter-luacheck 使用未定义变量提示，传送门。 安装该插件前，首先要先安装sublimelinter，还需要下载luacheck文件，传送门。 把下载完的luacheck.exe文件放在LuaForWindow的与Lua.exe的同级目录下（简单来说就是要将luacheck.exe，放在环境变量下） 最终效果如下：]]></content>
      <categories>
        <category>Lua</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>SublimeText</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git常用命令]]></title>
    <url>%2FGit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
    <content type="text"><![CDATA[一、创建本地仓库git init 初始化本地仓库 使用后文件夹会生成.git隐藏目录，这个目录是Git来跟踪管理版本库的。 git add . 把修改内容添加到暂存区 .：代表提交所有（没有被忽略的文件） git add readme.md：指定值提交readme.md文件 git commit 把暂存区的内容提交到分支（注意：修改的内容需要先add然后再commit） -m &quot;xxx&quot;：提交时需要带上描述信息，说明该次提交了什么，修改了什么。 --amend：弹出文本编辑器，修改最近一次提交的信息 二、时光机穿梭git status 查看仓库当前的状态 git diff 可以查看工作区和版本库里面最新版本的区别 git diff HEAD -- readme.md：查看readme.md文件在工作区与版本库间的区别 git diff --cached：看已经暂存起来的文件和上次提交时的快照之间的差异 git reset 版本回退，也可以把暂存区的修改回退到工作区（意思是把add命令撤销） git使用 HEAD 指定当前版本，HEAD^表示上一个版本，HEAD^^表示上两个版本，HEAD ~100表示上100个版本 （1）版本回退 git reset --hard &lt;commitId&gt;：回退到某个版本，丢弃跟踪文件的任何修改 git reset --soft &lt;commitId&gt;：回退到某个版本，修改的文件记录在暂存区 git reset --mixed &lt;commitId&gt;：回退到某个版本，修改的文件还在工作区，修改记录未add到暂存区 举个例子： 回退到某个版本，但是要保留回退间的所有提交 git reset --hard &lt;commitId&gt;：先回退到你要回退的版本 git reset --soft &lt;commitId&gt;：把修改的文件记录放在暂存区 git commit -m &lt;msg&gt;：提交即可 （2）把缓存区的修改退回工作区 git reset HEAD &lt;file&gt;：把某个文件的修改退回工作区 git checkout 用版本库里的版本替换工作区的版本（可以理解为撤销操作） 让这个文件回到最近一次git commit或git add时的状态 情况一：自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态 情况二：已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态 git rm 删除文件 该命令相当于使用rm删除一个文件，再git add .了一次 --cache：删除暂存区中的文件跟踪，保留文件 三、远程仓库ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 创建SSH Key 在用户根目录会有.ssh隐藏文件夹，包含id_rsa私钥（不能泄露出去）和id_rsa.pub公钥（可以放心地告诉任何人，把公钥放在github上，有私钥才能提交代码） git remote 查看远程库的信息 -v：显示更详细的信息 git remote add &lt;name&gt; git@github.com:account/repositoryname.git：关联本地仓库与远程仓库 name：指定字符串name对应仓库地址 account：为github账号名 repositoryname：为仓库名 git remote rename &lt;old&gt; &lt;new&gt;：修改远程仓库名字 git remote rm &lt;name&gt;：删除远程仓库 git push 提交代码到远程仓库 git push &lt;repertory&gt; &lt;local&gt;:&lt;remote&gt;：把本地local分支的最新修改推送至repertory的remote分支。 git push &lt;repertory&gt; :&lt;remote&gt;：删除远程分支 git pull 拉取远程仓库代码到本地仓库并合并 如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt; git fetch 拉取远程仓库代码到本地仓库，但不合并 git fetch &lt;repertory&gt; &lt;remotebranch&gt;:&lt;localbranch&gt;：拉取远程仓库repertory的remotebranch分支到本地仓库的localbranch分支 git clone 克隆远程仓库到本地 git支持https和ssh协议，使用ssh比较快 git clone https://github.com/Xieweicheng/TestGit.git git clone git@github.com:Xieweicheng/TestGit.git 四、分支管理 一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点 git branch 查看分支 git branch &lt;name&gt;：创建分支 git branch -d &lt;name&gt;：删除分支 git branch -D &lt;name&gt;：丢弃一个没有被合并过的分支，强制删除 git branch --set-upstream-to=origin/&lt;branch&gt; &lt;branch&gt;：设置&lt;branch&gt;和origin/&lt;branch&gt;的链接 git checkout 切换分支（实际就是改变HEAD的指向） git checkout &lt;name&gt;：切换分支 git checkout -b &lt;name&gt;：创建并切换分支 git checkout -b &lt;name&gt; origin/&lt;name&gt;：创建远程origin的&lt;name&gt;分支到本地 git merge 合并分支 git merge &lt;name&gt;：合并某分支到当前分支 --no-ff：禁用Fast forward（使用Fast forward，删除分支后，会丢掉分支信息。） -m：添加commit描述 git merge --no-ff -m &quot;commit msg&quot; &lt;name&gt;：禁用Fast forward并添加合并信息 --abort：撤销合并 git cherry-pick 合并特定提交 git cherry-pick &lt;name&gt;：合并某分支的最新提交到当前分支 git cherry-pick &lt;commitId1&gt;..&lt;commitId2&gt;：合并commitId1到commitId2之间的所有提交（不包括commitId1） git cherry-pick &lt;commitId1&gt;^..&lt;commitId2&gt;：合并commitId1到commitId2之间的所有提交 git stash 保存本地修改，隐藏工作现场，返回前一次commit状态 git stash apply：恢复本地修改，回到工作现场，但不会删除stash内容 git stash drop：删除stash内容 git stash pop：恢复本地修改，回到工作现场，并删除stash内容 git stash list：查看stash内容 git rebase 可以把本地未push的分叉提交历史整理成直线 --abort：撤销rebase 五、标签管理git tag 查看所有标签 git tag &lt;tagname&gt;：新建一个本地标签，默认指定HEAD，可以指定一个commitId git tag -a &lt;tagname&gt; -m &quot;标签信息&quot;：新建一个本地标签，带上标签信息 git tag -d &lt;tagname&gt;：删除一个本地标签 git show 查看标签信息 git show &lt;tagname&gt;：查看标签信息 git push 提交标签到远程仓库，或删除远程仓库的标签 git push origin &lt;tagname&gt;：提交标签到远程仓库，标签默认只保存在本地仓库 git push origin --tags：提交所有标签到远程仓库 git push origin :refs/tags/&lt;tagname&gt;：删除远程仓库的标签（先删除本地标签） 其他常用命令git log 查看git历史提交日志 --graph ：查看分支合并图 --pretty=oneline：一行显示，只显示哈希值和提交说明 --abbrev-commit：仅显示SHA-1的前几个字符，而非所有的40个字符 git reflog 查看git历史命令日志]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker入门]]></title>
    <url>%2FDocker%E5%85%A5%E9%97%A8.html</url>
    <content type="text"><![CDATA[一、Docker介绍1、什么是Docker Docket中文官网传送门 Docker是基于Go语言实现的云开源项目，是一个轻量级容器技术。 Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像。 运行中的这个镜像称为容器，容器启动是非常快速的。 Build,Ship and Run Any App,Anywhere：一次封装，导出运行。 2、为什么使用Docker 一次开发环境的安装和配置，即可在处处运行。（解决在开发机器上能正常运行，在运维机器上不能运行的情况） 启动快，占用少 轻松维护扩展 3、docker底层原理 Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上，然后通过Socket连接从客户端访问，守护进程从客户端接收命令并管理运行在主机上的容器。容器，是一个运行时环境。 4、虚拟机与Docker的对比 Docker有这比虚拟机更少的抽象层。由于Docker不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。 docker利用的是宿主机的内核，而不是Guest OS。因此，当新建一个容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。仍而避免引寻、加载操作系统内核返个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，返个新建过程是分钟级别。而docker由于直接利用宿主机的操作系统，则省略了返个过程，因此新建一个docker容器只需要几秒钟。 特性 Docker容器 虚拟机 操作系统 与宿主机共享OS 宿主机OS上运行虚拟机OS 启动 秒级 分钟级 硬盘使用 MB级 GB级 性能 接近原生 操作系统额外的CPU、内存消耗 系统支持量 单机支持上千个容器 一般几十个 二、Docker三要素 Docker三要素：镜像、容器、仓库 1、镜像（image），就是一个只读的模板，可以用于创建Docker容器 2、容器（container） 利用容器独立运行的一个或一组应用。容器是用镜像创建的运行实例。 容器可以被启动、开始、停止、删除。每个容器相互隔离。 可以把容器看做一个简易版的Linux系统，包含root用户权限、进程空间、用户空间和网络空间等，和运行在其中的应用程序。 容器的定义和镜像几乎一模一样，也就是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。 3、仓库（repository） 仓库是几种存放镜像文件的场所 仓库和仓库注册服务器（Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库又包含了多个镜像。每个镜像有不同的标签（tag） 仓库分为公开仓库（public）和私有仓库（private）两种形式 最大的公开仓库是Docker Hub 存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云、网易云等。 容器与镜像的关系类似于面向对象编程中的对象和类。 Docker 面向对象 容器 对象 镜像 类 4、概括 Docker本身是一个容器运行载体或称为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就似乎image镜像文件。只有通过这个镜像文件才能生成Docker容器。image文件可以看做是容器的模板。Docker根据image文件生成容器的实例。同一个image文件，可以生成多个同时运行的容器实例。 image文件生成的容器实例，本身也是一个文件，称为镜像文件。 一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器。 仓库，就是放了一堆镜像的地方，我们可以把镜像发布到仓库中 三、Docker安装（社区版，centos7为例） 中文官方文档安装教程 卸载旧版本 1234$ sudo yum remove docker \ docker-common \ docker-selinux \ docker-engine 使用镜像仓库进行安装 1234567# 安装所需的软件包。yum-utils 提供了 yum-config-manager 实用程序，并且 devicemapper 存储驱动需要 device-mapper-persistent-data 和 lvm2。$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2# 使用下列命令设置 stable 镜像仓库。您始终需要使用 stable 镜像仓库，即使您还需要通过 edge 或 testing 镜像仓库安装构建也是如此。# download.docker.com 可换为 mirrors.aliyun.com$ sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo 安装Docker-CE 123456# 更新 yum 软件包索引。$ sudo yum makecache fast# 安装最新版的docker-ce$ sudo yum install docker-ce# 若需要安装指定版本的docker-ce$ sudo yum install docker-ce-&lt;VERSION&gt; 启动Docker 1$ sudo systemctl start docker 四、使用阿里云镜像加速 为什么要使用阿里云镜像加速？是因为我国伟大的防火墙导致访问国外网站慢或者无法访问，这时我们就需要访问阿里云所同步的镜像 1、注册阿里云账号2、进入容器镜像服务 3、获取加速地址 4、配置镜像加速地址123456789101112# 安装docker后默认是没有`daemon.json`文件的，需要用root权限创建$ sudo vim /etc/docker/daemon.json# 修改文件内容如下，后面参数填上一步所复制的阿里云加速器地址&#123; "registry-mirrors": ["https://lolololo.mirror.aliyuncs.com"]&#125;# 重新加载daemon$ sudo systemctl daemon-reload# 重新启动docker$ sudo systemctl restart docker# 查看docker信息$ sudo docker info 使用docker info 查看docker信息，查看Registry Mirrors内容为阿里云加速器地址则说明设置成功。 5、执行HelloWorld12# 运行hello-world镜像，若本地没有，则会自动从云端pull，并执行，云端没有显示没有该镜像。$ sudo docker run hello-world 五、Docker命令（1）帮助命令1、docker version 查看docker版本信息 2、docker info 查看docker信息 3、docker --help 查看docker常用命令 （2）镜像命令1、docker images 列出本机上的镜像 docker images -a：列出所有镜像层 docker images -q：只显示镜像id docker images –digests：显示镜像摘要信息 docker images –no-trunc：不截取镜像id 2、docker search 查询镜像 docker search -s 30 tomcat：查询star数大于30K的tomcat 3、docker pull 下载镜像（默认下载lastest） 4、docker rmi 删除镜像（默认删除lastest） docker rmi -f hello-world：强制删除镜像 docker rmi -f $(docker images -qa)：强制删除所有镜像 5、docker commit 根据容器创建镜像 docker commit -a &quot;author&quot; -m &quot;Description information&quot; &lt;containerId&gt; &lt;schema&gt;/&lt;imageName&gt;:tag 举个例子： docker commit -a &quot;MrXieXie&quot; -m &quot;MyTomcat&quot; tomcat88 mrxiexie/tomcat:1.0 根据tomcat88容器创建一个名为mrxiexie/tomcat标签为1.0的镜像 （3）容器命令1、docker run image 新建并启动容器 –name=“容器新名字”：为容器指定一个名称 -d：后台 -i：以交互模式运行容器，通常与 -t 同时使用 -t：以容器重新分配一个伪输入终端，通常与 -i 同时使用 -P：随机端口映射 -p：指定端口映射，以下四种模式 ip:hostPort:containerPort ip::containerPort hostPort:containerPort containerPort 举个例子： docker run -it centos –name centos 以centos镜像为模板，创建一个名为centos的容器，并使用伪终端与容器交互。 docker run -d centos /bin/bash -c &quot;while true;do echo hello;sleep 2;done&quot; 以后台形式启动centos，并执行脚本。（若不执行脚本，该容器会启动后马上退出，由于该容器没有任务） 2、docker ps 列出所有正在运行的容器 -a：列出所有容器 -l：上一次运行的 -n 3：上三次运行的 -q：静默模式，只显示容器id 3、退出容器 exit：关闭容器后退出回宿主机 ctrl + p + q：退出容器到宿主机 4、docker start containerId(name) 启动容器 5、docker restart containerId(name) 重启容器 6、docker stop containerId(name) 停止容器 7、docker kill containerId(name) 强制关闭容器 8、docker rm containId(name) 删除已关闭容器 -f：强制删除 docker rm -f $(docker ps -aq)：删除所有容器 docker ps -aq | xargs docker rm：删除所有容器 9、docker logs 查看容器日志 -t：显示时间戳 -f：不断追加最新日志 –tail 3：显示尾部 3行 举个例子： docker logs -tf --tail 3 containerId(name) 查看该容器后三行的日志 10、docker top containerId(name) 查看容器进程 11、docker inspect containerId(name) 查看容器内部细节 12、docker attach containerId(name) 重新进入容器命令的终端，不会启动新的进程 13、docker exec 是在容器中打开新的终端，并且可以启动新的进程。 docker exec -it 容器id bashShell：不进入容器命令的终端，执行完bashShell返回结果给宿主终端。 14、docker cp containerId(name) 复制文件到宿主机 docker cp 容器ID:容器内路径 目的主机路径 六、镜像原理 镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。 （1）UnionFS（联合文件系统）Union文件系统是一种分层、轻量级并且好性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像，可以制作各种具体的应用镜像 特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。 （2）Docker镜像加载原理Docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFs。 1、bootfsbootfs（boot file system）主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们经典的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs 2、rootfsrootfs（root file system），在bootfs之上，包含的就是典型的Linux系统的/dev,/proc,/bin,/etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。 对于一个精简的OS，rootfs可以很小，只需要包含最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供rootfs就行。由此可见对于不同的linux发行版，bootfs基本一致，rootfs会有差别，因此不同的发现版可以公用bootfs 3、分层的镜像镜像是一层套一层，kernel&gt;centos&gt;java&gt;tomcat….. 4、为什么使用分层结构最大的好处是共享资源 比如：有多个镜像都从相同的base镜像构建而来，那么宿主机只需在磁盘上保存一份base镜像，同时内存中也只需加载一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。 七、Docker容器数据卷 将应用于运行的环境打包形成容器运行，我们希望对数据进行持久化，并且希望容器之间能够实现数据共享 Docker容器产生的数据，如果不通过docker commit生成新的镜像，使得数据作为镜像的一部分保存下来，那么当容器删除后，数据自然就没有了 为了保存数据，在docker中使用数据卷 （1）数据卷 容器的持久化 容器间继承和共享数据 数据卷的生命周期一直持续到没有容器使用它为止 （2）添加数据卷添加数据卷的两种方法，使用直接命令和使用DockerFile 1、直接命令docker run -it -v /宿主机目录:/容器内目录 &lt;imageId&gt; docker run -it -v /宿主机目录:/容器内目录:ro &lt;imageId&gt; 2、DockerFile由于可移植和分享的考虑：用-v主机目录：容器目录这种方法不能够直接在Dockerfile中实现 由于宿主机目录是依赖于特定宿主机的，并不能保证在所有的宿主机上都存在这样的特定目录。 创建DockerFile，并编写如下 1234FROM centosVOLUME ["/container1","/container2"]CMD echo "finished!!"CMD /bin/bash 使用docker build构建出新的镜像，注意：最后面有个. 1$ docker build -f /mydocker/Dockerfile -t mrxiexie/centos . 使用docker inspect &lt;containerId&gt;查看默认挂载的目录，类似如下目录 1/var/lib/docker/volumes/58ae629198c1b06d60d0a2a451a8eb76330c0171982f80f60897f745ec65e7c0/_data （3）数据卷容器命名的容器挂载数据卷，其他容器通过挂载这个（父容器）实现数据共享，挂载数据卷的容器，称之为数据卷容器。 1$ docker run -it --name &lt;name1&gt; --volumes-from &lt;name2&gt; &lt;image&gt; 容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止 八、DockerFile解析（1）DockerFile是什么DockerFile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。 构建三步骤 编写DockerFile文件 docker build docker run （2）DockerFile构建过程解析1、Docker内容基础知识 每条保留字指令都必须为大写字母且后面要跟随至少一个参数 指令按照从上到下，顺序执行 #表示注释 每条指令都会创建一个新的镜像层，并对镜像进行提交 2、Docker执行DockerFile的大致流程 Docker从基础镜像运行一个容器 执行一条指令并对容器作出修改 执行类似docker commit的操作提交一个新的镜像层 docker再基于刚提交的镜像运行一个新容器 执行dockerfile的下一条指令直到所有指令都执行完成 123456789101112131415$ docker build -f DockerFile -t mrxiexie/centos .Sending build context to Docker daemon 2.048kBStep 1/4 : FROM centos ---&gt; 75835a67d134Step 2/4 : VOLUME ["/container1","container2"] ---&gt; Using cache ---&gt; 572b4737c362Step 3/4 : CMD echo "finish!!" ---&gt; Using cache ---&gt; 800fe2b84793Step 4/4 : CMD /bin/bash ---&gt; Using cache ---&gt; f491cc1b1e35Successfully built f491cc1b1e35Successfully tagged mrxiexie/centos:latest 从应用软件的角度来看：Dockerfile、Docker镜像和Docker容器分别代表软件的三个不同阶段。 DockerFile是软件的原材料 Docker镜像是软件的交付品 Docker容器则可以认为是软件的运行态 Dockerfile面向开发，Docker镜像称为交付标准，Docker容器则涉及部署和运维，三者缺一不可，合力充当Docker体系的基石。 Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程（当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制）等等。 Docker镜像，在用Dockerfile定义一个文件后，docker build时会产生一个Docker镜像，当运行Docker镜像时，会直接开始提供服务。 Docker容器，容器是直接提供服务的。 （3）DockerFile保留字指令1、FROM基础镜像，当前新镜像是基于哪个镜像的 2、MAINTAINER镜像维护者的姓名和邮箱地址 3、RUN容器构建时需要运行的命令 4、EXPOSE当前容器对外暴露出的端口 5、WORKDIR指定在创建容器后，终端默认登录的进来工作目录，一个落脚点 6、ENV用来构建镜像过程中设置环境变量 环境变量可以在后续的任何RUN指令中使用，这就如同在命令前面指定了环境变量前缀一样，也可以在其他指令中直接使用这些环境变量。 12ENV MY_PATH /usr/mytestWORKDIR $MY_PATH 7、ADD将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包 8、COPY类似ADD，拷贝文件和目录到镜像中 将从构建上下文目录中&lt;源路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置 12COPY src destCOPY ["src","dest"] 9、VOLUME容器数据卷，用于数据保存和持久化工作 10、CMD指定一个容器启动时要运行的命令 Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换 11、ENTRYPOINT指定一个容器启动时要运行的命令 ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及参数 12、ONBUILD当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发 （4）案例 Base镜像（scratch）：DockerHub中百分之99的镜像都是通过base镜像中安装和配置需要的软件构建出来的 1、自定义Centos镜像需求： 环境变量MYPATH为/tmp 落脚点在：/tmp 自带vim及ifconfig命令 在mydocker/centos/下编写DockerFile 1234567FROM centosENV MYPATH /tmpWORKDIR $MYPATHRUN yum install -y vimRUN yum install -y net-toolsEXPOSE 80CMD /bin/bash 构建镜像 1$ docker build -f /mydocker/centos/DockerFile -t mrxiexie/mycentos:1.0 . 2、编写查看ip的镜像需求： 运行镜像可以看到当前ip地址 可以带参数 在mydocker/ip/下编写DockerFile 12345FROM centosRUN yum install -y curl# 不能使用CMD，因为运行时追加参数会替代上一个CMD命令。# 使用ENTRYPOINT，会把追加参数放在命令中。ENTRYPOINT ["curl", "-s", "https://ip.cn"] 构建镜像 1$ docker build -f /mydocker/ip/DockerFile -t mrxiexie/ip:1.0 . 运行镜像带请求头 1$ docker run mrxiexie/ip:1.0 -i 3、编写一个让子镜像执行后会触发命令的父镜像父镜像DockerFile： 123FROM centosCMD echo "parent"ONBUILD RUN echo "我有一个子镜像创建了" 创建父镜像 1$ docker build -f /mydocker/onbuild/ParentDockerFile -t mrxiexie/parent . 子镜像DockerFile： 12FROM mrxiexie/parentCMD echo "child" 创建子镜像 12345678910111213141516171819$ docker build -f /mydocker/onbuild/ChildDockerFile -t mrxiexie/child .# 创建日志如下：Step 1/3 : FROM mrxiexie/parent# Executing 1 build trigger ---&gt; Running in b23f935ff9eb我有一个子镜像创建了Removing intermediate container b23f935ff9eb ---&gt; 539080c42b1eStep 2/3 : RUN echo "Child" ---&gt; Running in 16e027c94730ChildRemoving intermediate container 16e027c94730 ---&gt; 835ec69c4d0bStep 3/3 : CMD echo "Child" ---&gt; Running in ea1b7dbfc27dRemoving intermediate container ea1b7dbfc27d ---&gt; 83fe9d29db55Successfully built 83fe9d29db55Successfully tagged mrxiexie/child:latest 4、部署web应用 官网下载tomcat与java 配置环境变量 123456789101112131415161718192021222324FROM centos# 邮箱姓名MAINTAINER mrxiexie@qq.com# 设置工作路径为环境变量ENV WORK_DIR /usr/local# 设置落脚点WORKDIR $WORK_DIR# 复制test.txt到容器，并修改名字为container.txtCOPY test.txt /usr/local/container.txt# 解压并复制ADD jdk-8u191-linux-x64.tar.gz $WORK_DIRADD apache-tomcat-9.0.13.tar.gz $WORK_DIR# 安装vimRUN yum install -y vim# 设置java和tomcat环境ENV JAVA_HOME $WORK_DIR/jdk1.8.0_191ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarENV CATALINA_HOME $WORK_DIR/apache-tomcat-9.0.13ENV CATALINA_BASE $WORK_DIR/apache-tomcat-9.0.13ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin# 暴露8080端口EXPOSE 8080# 启动tomcatCMD ["/usr/local/apache-tomcat-9.0.13/bin/catalina.sh", "run"] 创建镜像 1$ docker build -f /mydocker/tomcat/Dockerfile -t mrxiexie/tomcat . 启动镜像，并设置挂载点 1234$ docker run -d -p 8080:8080 --name tomcat \-v /mydocker/tomcat/test:/usr/local/apache-tomcat-9.0.13/webapps/test \-v /mydocker/tomcat/logs:/usr/local/apache-tomcat-9.0.13/logs \--privileged=true mrxiexie/tomcat 创建/mydocker/tomcat/test/a.jsp，内容如下： 12345678910&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;$Title$&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;%="Hello Docker!"%&gt; &lt;% System.out.println("Hello Docker");%&gt; &lt;/body&gt;&lt;/html&gt; 创建/mydocker/tomcat/MET_INF/web.xml 123456&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1"&gt;&lt;/web-app&gt; 在浏览器中，输入http://localhost:8080/test/a.jsp正常访问，说明配置成功 九、将镜像推送到阿里云（1）登录到阿里云镜像管理登录阿里云，传送门，点击创建我的容器镜像 （2）创建镜像仓库 创建命名空间，然后填写对应镜像信息，点击下一步。 选择本地仓库，创建镜像仓库 （3）上传镜像到阿里云仓库镜像仓库中，选择对应的仓库，点击管理 根据第三步，推送对应的镜像到仓库 （4）下拉镜像到本地根据第二步，下拉对应的镜像到本地]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Logback中文文档]]></title>
    <url>%2FLogback%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3.html</url>
    <content type="text"><![CDATA[一、Logback中文文档下载logback.pdf 二、常用配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?xml version="1.0"?&gt;&lt;configuration&gt; &lt;appender name="console" class="ch.qos.logback.core.ConsoleAppender"&gt; &lt;encoder&gt; &lt;pattern&gt;[%level] %d&#123;YYYY-MM-dd HH:mm:ss.SSS&#125; [%thread] %logger&#123;36&#125; : %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt; &lt;Encoding&gt;UTF-8&lt;/Encoding&gt; &lt;file&gt;/sdcard/log/log.log&lt;/file&gt; &lt;!--&lt;rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy"&gt;--&gt; &lt;!--&lt;fileNamePattern&gt;log.%i.log&lt;/fileNamePattern&gt;--&gt; &lt;!--&lt;minIndex&gt;1&lt;/minIndex&gt;--&gt; &lt;!--&lt;maxIndex&gt;3&lt;/maxIndex&gt;--&gt; &lt;!--&lt;/rollingPolicy&gt;--&gt; &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt; &lt;FileNamePattern&gt;/sdcard/log/log.%d&#123;yyyy-MM-dd&#125;.log&lt;/FileNamePattern&gt; &lt;MaxHistory&gt;30&lt;/MaxHistory&gt; &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"&gt; &lt;!-- or whenever the file size reaches 1MB --&gt; &lt;maxFileSize&gt;1M&lt;/maxFileSize&gt; &lt;/timeBasedFileNamingAndTriggeringPolicy&gt; &lt;/rollingPolicy&gt; &lt;layout class="ch.qos.logback.classic.PatternLayout"&gt; &lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n &lt;/pattern&gt; &lt;/layout&gt; &lt;!--日志文件最大的大小--&gt; &lt;triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"&gt; &lt;MaxFileSize&gt;2MB&lt;/MaxFileSize&gt; &lt;/triggeringPolicy&gt; &lt;/appender&gt; &lt;!-- 日志级别 --&gt; &lt;root&gt; &lt;level value="error" /&gt; &lt;level value="warn"/&gt; &lt;level value="info" /&gt; &lt;level value="debug" /&gt; &lt;level value="trace" /&gt; &lt;appender-ref ref="console" /&gt; &lt;appender-ref ref="FILE" /&gt; &lt;/root&gt;&lt;/configuration&gt;]]></content>
      <categories>
        <category>Logback</category>
      </categories>
      <tags>
        <tag>Logback</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android中配置Lombok和Logback]]></title>
    <url>%2FAndroid%E4%B8%AD%E4%BD%BF%E7%94%A8Lombok%E5%92%8CLogback.html</url>
    <content type="text"><![CDATA[一、安装Lombok插件之前有写过安装插件的教程，虽然是基于IDEA的，但是AS就是IDEA的儿子，照搬就行~传送门在此 二、Gradle修改如下1234567891011121314android &#123; defaultConfig &#123; //... javaCompileOptions &#123; annotationProcessorOptions &#123; includeCompileClasspath = true &#125; &#125; &#125; //...&#125;dependencies &#123; //... compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.16.18' implementation 'org.glassfish:javax.annotation:10.0-b28' implementation 'ch.qos.logback:logback-classic:1.2.3'&#125; 三、项目根目录添加lombok.config文件 修改文件内容如下 1lombok.anyConstructor.suppressConstructorProperties=true 四、创建logback配置文件在raw目录下 文件名想怎么起就怎么起~ 五、启动时识别logback配置文件 要想直接通过注解@Slf4j打印日志是已经ok了~ 但要logback还是默认的配置，只需要在Application中调用下面方法，就能用到R.raw.app_log_config里面的配置了~ 1234567891011private void setLogger() &#123; LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory(); JoranConfigurator joranConfigurator = new JoranConfigurator(); joranConfigurator.setContext(loggerContext); loggerContext.reset(); try &#123; joranConfigurator.doConfigure(getResources().openRawResource(R.raw.app_log_config)); &#125; catch (JoranException e) &#123; e.printStackTrace(); &#125;&#125; 参考链接]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Lombok</tag>
        <tag>Logback</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android简单实现抽奖转盘]]></title>
    <url>%2FAndroid%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%8A%BD%E5%A5%96%E8%BD%AC%E7%9B%98.html</url>
    <content type="text"><![CDATA[前言 本来说过不再搞安卓的，可是公司突然要把原本用H5开发的界面全部转为Android，迫不得已又要去开发Android，在抽奖转盘上花了点时间，自定义View这块都忘得差不多了。 一、如何绘制 可以查看鸿洋大神的博客或者直接看慕课网的视频 我是直接看着慕课网的视频码出来的。只是做了一个简单的封装。 二、Demo演示 三、使用gradle依赖到项目中step1：将其添加到存储库末尾的根build.gradle（app模块）中： 123456allprojects &#123; repositories &#123; ... maven &#123; url &apos;https://jitpack.io&apos; &#125; &#125;&#125; step2：添加依赖项 123dependencies &#123; implementation &apos;com.github.Xieweicheng:luckypan:Tag&apos; &#125; 最新Tag请查阅Release 四、使用教程 在布局文件，加入如下布局即可 1234&lt;pers.mrxiexie.luckypan.LuckyPanSerfaceView android:id="@+id/luckypanview" android:layout_width="match_parent" android:layout_height="match_parent"/&gt; 设置转盘参数方法 方法名 参数类型 说明 setBackground int 设置背景（背景最好是正方形！！） setCenterBtn int 设置中间点击按钮 setColors List&lt;Integer&gt; 设置盘块颜色列表 setIcons List&lt;Integer&gt; 设置奖项icon setPadding int 设置绘制转盘的内边距 setPrizes List&lt;String&gt; 设置奖品文字 setRealistic boolean 设置是否真实（真实则随机在需要中奖的盘块的任意位置，而非盘块正中间） setTextColor int 设置字体颜色 setTextSize int 设置字体大小，单位为px 获取转盘状态方法 方法名 返回值 说明 isShouldEnd boolean 转盘是否应该停止 isStart boolean 转盘是否在旋转 设置转盘状态 方法名 参数类型 说明 luckyStart int 开始旋转，传入需要中奖的奖项索引，索引为setPrizes所传入列表的索引 luckyStop null 结束旋转，该方法不是立即停止转盘，需要一段时间才会停止 设置监听 方法名 说明 setOnLuckyCenterClickListener 设置转盘中间按钮点击事件监听 setOnLuckyStopListener 设置转盘完全停止监听 五、举个例子12345678luckyPanSerfaceView.setColors(colors) .setIcons(icons) .setPrizes(prizes) .setPadding(140) .setBackground(R.drawable.center) .setCenterBtn(R.drawable.pointer) .setOnLuckyStopListener(this) .setOnLuckyCenterClickListener(this); 六、即将更新 自定义中心按钮大小 添加主题（文字与icon的位置更多选择）]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell编程]]></title>
    <url>%2FShell%E7%BC%96%E7%A8%8B.html</url>
    <content type="text"><![CDATA[一、Shell是什么 Shell是一个命令行解析器，它为用户提供一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell启动、挂起、停止甚至是编写一些程序。 二、HelloWorld 脚本以 #!/bin/bash 开头 创建一个Shell脚本，输出HelloWorld！ 新建helloworld.sh，编写内容如下 12#!/bin/bashecho "HelloWorld!" 给用户添加执行权限 chmod u+x helloworld.sh 使用 ./helloworld.sh 执行脚本 （如果不添加权限，可以使用 su ./helloworld.sh 执行脚本） 三、Shell变量 变量分为系统变量和用户自定义变量 （1）系统变量 使用 echo $PATH 输出系统变量 （2）用户自定义变量 变量名=值：MYNUM=1 unset 变量名：撤销变量 readonly 变量名=值：声明静态变量 echo $变量名：输出变量 注意事项 变量不能以数字开头 等号左右不能用空格 变量名一般建议大写 （3）将命令返回值赋值给变量 变量名=`cal`：使用反引号，将cal的结果赋值给变量 变量$(ls -la)：等价于反引号 四、设置环境变量 export 变量名=变量值：将shell变量输出为环境变量 source 配置文件：让修改后的配置信息立即生效 echo $变量名：查询环境变量 栗子：为tomcat添加环境变量 123456789# 修改/etc/profilevim /etc/profile# 输入 G 跳转到底部# 添加如下语句TOMCAT_HOME=/opt/tomcatexport TOMCAT_HOME# 修改后wq保存即可# 让修改后的配置文件生效source /ect/profile 五、注释 #：单行注释（ #echo &quot;helloworld&quot;） :&lt;&lt;! 内容 !：多行注释（:&lt;&lt;! echo &quot;helloworld !&quot;） 六、位置参数变量 $n：n为数字，$0为命令本身，$1-$9代表第一到第九个参数，十以上的参数，使用${10} $*：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体 $@：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待 $#：这个变量代表命令行中所有参数的个数 七、预定义变量 shell设计者事先已经定义好的变量，可以在shell脚本中直接使用 $$：当前进程号的PID $!：后台运行的最后一个进程的进程号PID $?：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行。 八、运算符 $((运算符)) $[运算符] expr m + n expr m - n expr \*,/,% 注意事项：使用expr运算符间要有空格 九、条件判断 [ condition ]：condition前后要有空格，可以使用 $? 校验（0为true） 栗子：命令行输入两个数字判断前一个数字是否大于后一个数字，若大于输出0 123#!/bin/bash[ $1 -gt $2 ]echo "$?" （1）常用的判断条件1、两个整数的比较 =：字符串比较 -lt：小于 -le：小于等于 -eq：等于 -gt：大于 -ge：大于等于 -ne：不等于 2、按照文件权限进行判断 -r 有读的权限 [ -r 文件 ] -w：有写的权限 -x：有执行的权限 3、按照文件类型进行判断 -f：文件存在并且是一个常规的文件 -e：文件存在 -d：文件存在并是一个目录 栗子： 123[ "ok" == "ok" ] #判断是否相等[ 23 -gt 22 ] #23是否大于22[ -e /root/shell/aaa.txt ] #判断目录中的文件是否存在 十、流程控制（1）if语句基本语法： 1234567891011121314# 第一种写法if [ condition ];then 程序fi# 第二种写法（推荐使用）if [ condition ]then 程序elif [ condition ]then 程序else 程序fi 栗子：如果输入参数大于等于60，则输出”及格“，否则输出”不及格“ 1234567#!/bin/bashif [ $1 -ge 60 ]then echo "及格了"else echo "不及格"fi （2）case语句基本语法： 1234567891011case $变量名 in"值1") 如果为值1执行程序 ;;"值2") 如果为值2执行程序 ;;*) 如果都不是则执行程序 ;;esac 栗子：当命令行参数是1时，输出“周一”，是2时，输出“周二”，其他情况输出“other” 123456789101112#!/bin/bash case $1 in "1") echo "周一" ;; "2") echo "周二" ;; *) echo "other" ;; esac （3）for循环基本语法： 1234for 变量 in 值1 值2 值3...do 程序done 栗子：打印命令行输入的参数 12345#!/bin/bash for i in $* do echo "$i" done （4）while循环基本语法： 1234while [ condition ]do 程序done 栗子：从命令行输入一个数n，统计从1 + .. + n 的值是多少？ 123456789#!/bin/bashi=0SUM=0while [ $i -le $1 ]do SUM=$[$SUM+$i] i=$[$i+1]doneecho "sum=$SUM" （5）read控制控制台输入基本语法： read (选项) (参数) -p：指定读取值时的提示符 -t：指定读取值等待的时间（秒），如果没有在指定的时间输入，就不再等待。 栗子：读取控制台的一个值，10s内输入 123#!/bin/bashread -p "请在10s内输入一个数字" -t 10 NUMecho “输入的数字为$NUM” 十一、函数（1）系统函数 basename [pathname][suffix]：返回完整路径最后 / 的部分，常用语获取文件名，若指定了suffix 会把后缀一起删除 dirname [pathname]：返回完整路径最后 / 的前面的部分，常用于返回路径的部分 （2）自定义函数基本语法： 1234[ function ] functionname[()]&#123; Action; [return int;]&#125; 调用时直接写函数名：functionname [值] 栗子：计算输入两个参数的和（read） 12345678#!/bin/bashfunction getSum()&#123; SUM=$[$n1+$n2] echo "和是=$SUM"&#125;read -p "请输入第一个数n1" n1read -p "请输入第二个数n2" n2getSum n1 n2 十二、Shell编程综合案例需求： 每天凌晨2：10备份数据库 mytest 到 /data/backup/db 备份开始和备份结束能够给出响应的提示信息 备份后的文件要求以备份时间为文件名，并打包为 .tar.gz 的形式，比如 2018-10-10.tar.gz 在备份的同时，检查是否有10天前的备份的数据库文件，如果有就将其删除。 1234567891011121314151617181920212223242526BACKUP="/data/backup/db"DATETIME=$(data +%Y-%m-%d)echo "开始备份！"echo "备份路径为 $BACKUP/$&#123;DATETIME&#125;.tar.gz"#主机HOST=localhost#用户名USER=root#密码PWD=root#数据库名DATABASE=mytest#创建备份的路径#如果备份的路径文件夹存在，就使用，否则就创建[ ! -d "$BACKUP/$DATETIME" ] &amp;&amp; mkdir -p "$BACKUP/$DATETIME"#执行mysql的备份数据库的指令mysqldump -u$USER -p$PWD --host=$HOST $DATABASE | gzip &gt; $BACKUP/$DATETIME/$&#123;DATETIME&#125;.sql.gz#打包备份文件cd $BACKUPtar -zcvf $DATETIME.tar.gz $DATETIME#删除临时目录rm -rf $BACKUP/$DATETIME#删除10天前的备份文件find $BACKUP -mtime +10 -name "*.tar.gz" -exec rm -rf &#123;&#125; \;echo "备份文件成功" 最后使用任务调度 110 2 * * * /usr/sbin/mysql_db_backup.sh]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux包管理]]></title>
    <url>%2FLinux%E5%8C%85%E7%AE%A1%E7%90%86.html</url>
    <content type="text"><![CDATA[一、RPM（1）介绍 一种用于互联网下载包的打包和安装工具，它包含了某些Linux分发版中。它生成具有 .RPM 扩展名的文件。RPM是 RedHat Package Manager（RedHat软件包管理工具），类似Window的 setup.exe。 （2）常用指令 rpm -qa | grep xx：简单查询 rpm -q 软件包名：查询软件包是否安装 rpm -qi 软件包名 ：查询软件包信息 rpm -ql 软件包名：查询软件包中的文件 rpm -qf 文件全路径 ：查询文件所属的软件包 rpm -e RPM 包的名称 ：卸载rpm包 rpm -e --nodeps RPM 包的名称：强制删除 rpm -ivh RPM 包全路径名称：安装rpm包（i=install 安装，v=verbose 提示，h=hash 进度条） 二、YUM（1）介绍 YUM是一个Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有的依赖包。使用YUM的前提是可以联网。 （2）常用指令 yum list | grep xx：查询软件包列表 yum install xxx：下载安装 yum remove xxx：删除 三、APT（1）介绍apt是Advanced Packaging Tool简称，是一款安装包管理工具。在Ubuntu下，可以使用apt命令用于软件包的安装、删除、清理等。 （2）常用指令 apt-get update 更新源 apt-get install package 安装包 apt-get remove package 删除包 apt-cache search package 搜索软件包 apt-cache show package 获取包的相关信息，如说明、大小、版本等 apt-get install package –reinstall 重新安装包 apt-get -f install 修复安装 apt-get remove package –purge 删除包，包括配置文件等 apt-get build-dep package 安装相关的编译环境 apt-get upgrade 更新已安装的包 apt-get dist-upgrade 升级系统 apt-cache depends package 了解使用该包依赖那些包 apt-cache rdepends package 查看该包被哪些包依赖 apt-get source package 下载该包的源代码 （3）更新源地址 清华大学开源软件镜像站 寻找ubuntu镜像 选择对应的ubuntu版本，并复制下面所有内容 备份原文件 1cp /etc/apt/sources.list /etc/apt/sources.list.backup 把刚复制的内容覆盖sources.list 更新源 apt-get update即可]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux进程管理]]></title>
    <url>%2FLinux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86.html</url>
    <content type="text"><![CDATA[一、进程的基本介绍 Linux中，每个执行的程序都会称为一个进程。都会分配一个ID号。 每个进程，都会对应一个父进程，而父进程可以有多个子进程。 每个进程都有前后台之分。前台可以理解为界面可见，后台为不可见。 一般系统的服务都是以后台进程的方式存在，而且常驻在系统中。直到关机结束。 二、常用指令（1）显示系统执行的进程 ps -a：显示当前终端的所有进程信息 -u：以用户的格式显示进程信息 -x：显示后台进程运行的参数 -e：显示所有进程 -f：全格式 常用指令：ps -aux | grep xxx 12USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMANDroot 1 0.0 0.1 19340 1548 ? Ss 09:18 0:00 /sbin/init 指令说明： USER：用户名 PID：进程号 %CPU：进程占用CPU的百分比 %MEM：进程占用物理内存的百分比 VSZ：进程占用的虚拟内存大小（KB） RSS：进程占用的物理内存大小（KB） TT：终端名称 STAT：进程状态，其中S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在进行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等。 STARTED：进程的启动时间 TIME：CPU时间，即进程使用CPU的总时间 COMMAND：启动进程所用的命令和参数，如果过长会被截断显示 常用指令：ps -ef | more 12UID PID PPID C STIME TTY TIME CMDroot 1 0 0 09:18 ? 00:00:00 /sbin/init 指令说明： UID：用户ID PID：进程ID PPID：父进程ID C：CPU用于计算执行优先级的因子。数值越大，表明进程是CPU密集型运算，执行优先级会降低；数值越小，表明进程是I/O密集型运算，执行优先级会提高 STIME：进程启动的时间 TTY：完整的终端名称 TIME：CPU时间 CMD：启动进程所用的命令和参数 （2）终止进程 kill killall kill PID ：按照pid杀死进程 killall 进程名称：按照名称杀死进程 -9：表示强制停止进程 （3）查看进程树 pstree -p：显示进程的PID -u：显示进程的所属用户 （4）设置服务各个运行级别设置启动或关闭 查看服务：chkconfig --list | grep xxx chkconfig 服务名 --list chkconfig --level 5 服务名 on/off：将某服务在运行级别为5下启动或者不启动 （5）动态监控进程 top [选项] 选项说明： -d 秒数：指定top指令每个几秒更新。默认是3秒在top指令的交互模式中可以执行的指令 -i：是top不显示任何闲置或者僵死进程 -p：通过指定监控进程ID来仅仅监控某个进程的状态 交互操作说明 P：以CPU使用率排序，默认就是此项 M：以内存的使用率排序 N：以PID排序 q：退出 （6）查看系统网络情况 netstat -anp -an：按一定顺序排列输出 -p：显示哪个进程在调用 三、服务管理 service 服务名 [start | stop | restart | reload | status] centos7.0后，不再使用 service，而是使用 systemctl （1）防火墙 查看防火墙状态：service iptables status 关闭防火墙：service iptables stop 启动防火墙：service iptables start window下可以使用 talnet 命令测试某个端口是否外放 12# 查看ip为192.168.164.130的22端口是否外放telnet 192.168.164.130 22 （2）查看服务名 使用setup -&gt; 系统服务 ls -l /etc/init.d/ ：列出系统有哪些服务 （3）Linux开机流程 开机 &gt; BIOS &gt; /boot &gt; init 进程1 &gt; 运行界别 &gt; 运行级别对应的服务]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux网络配置]]></title>
    <url>%2FLinux%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.html</url>
    <content type="text"><![CDATA[一、常用指令1、ping 测试当前系统是否能够连接到某ip 栗子：ping www.baidu.com 2、ifconfig 查看网卡信息 3、service network start：启动网络 stop：停止网络 restart：重启网络 二、开机自动联网、自定义IP 自定义ip地址，需要编辑 /ect/sysconfig/network-scripts/ifcfg-eth0 文件 1234567891011vim `/ect/sysconfig/network-scripts/ifcfg-eth0`# 开机启动网络ONBOOT=yes # 静态方式获取ipBOOTPROTO=static# 指定ipIPADDR=192.168.184.130# 指定网关GATEWAY=192.168.184.2# 指定NDS服务器（与网关一致即可）DNS1=192.168.184.2]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux磁盘分区和挂载]]></title>
    <url>%2FLinux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E5%92%8C%E6%8C%82%E8%BD%BD.html</url>
    <content type="text"><![CDATA[一、分区的方式（1）mbr分区 最多支持四个主分区 系统只能安装在主分区 扩展分区需要占一个主分区 MBR最大只支持2TB，但拥有最好的兼容性 （2）gtp分区 支持无限多个主分区（但操作系统可能限制，比如window下最多128个分区） 最大支持18EB的大容量（1EB = 1024PB，1PB = 1024TB） window7 64位以后支持gtp 二、Linux分区（1）分区原理 Linux来说无论有多少个分区，分给哪一个目录，它归根结底就只有一个根目录，一个独立且唯一的文件结构，Linux的每个分区都是用来组成整个文件系统的一部分。 Linux采用了一种 “载入” 的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。 （2）硬盘说明 Linux硬盘分为IDE硬盘和SCSI硬盘，目前基本都是SCSI硬盘 对于IDE硬盘，驱动器标识符为 hdx~，其中 hd 表明分区所在设备的类型，指的是IDE硬盘。x 表示盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘），~ 代表分区，前四个分区用数字 1 到 4 表示，它们是主分区或扩展分区，从 5 开始就是逻辑分区。 对于SCSI硬盘则标识为 sdx~，跟IDE标识方法一致。 三、分区常用指令1、lsblk 查看当前系统的分区情况 lsblk -f ： 查看系统的分区和挂载的情况 2、fdisk 分区 栗子：fdisk /dev/sdb m：显示命令列表 p：显示磁盘分区 n：新增分区 d：删除分区 w：写入并保存 3、mkfs 格式化 栗子：mkfs -t ext4 /dev/sdb1 4、mount 挂载 栗子：mount /dev/sdb1 /home/newdisk 5、umount 卸载 栗子：umount /dev/sdb1 或 umount /home/newdisk 6、df 查询系统整体磁盘使用情况 df -lh 7、du 查询指定目录的磁盘占用情况 du -h /目录 -s：指定目录占用大小汇总 -h：带计量单位 -a：含文件 –max-depth=1：子目录深度 四、分区步骤 分区 fdisk /dev/sda 格式化 mkfs -t ext4 /dev/sda1 挂载 先创建需要挂载的目录，例如 /home/asd，挂载 mount /dev/sda1 /home/asd 设置可以自动挂载（永久挂载） 12vim /etc/fstab/dev/sda1 /home/asd ext4 defaults 0 0]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux任务调度之crond]]></title>
    <url>%2FLinux%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E4%B9%8Bcrond.html</url>
    <content type="text"><![CDATA[一、简单介绍任务调度 任务调度：是指在某个时间执行的特定的命令或程序。 任务调度分类： 1、系统工作，有些重要的工作必须周而复始地执行。如病毒扫描等。 2、个别用户工作，个别用户可能希望执行某些程序，比如对mysql数据库的备份。 二、基本语法 crontab [选项] 常用选项： 选项 说明 -e 编辑crontab定时任务 -l 查询crontab任务 -r 删除当前用户所有crontab任务 三、简单例子 以下例子是将命令 cal 的输出结果每隔一分钟输出到 /home/1.txt 文件中 12345678# 编辑定时任务crontab -e# 输入 i 进入插入模式i# 输入如下命令*/1 * * * * cal &gt;&gt; /home/1.txt# 按 esc 键，然后 :wq 保存退出:wq 当然也可以把命令放在 sh 文件中 如下为/home/1.sh文件内容： 1cal &gt;&gt; /home/1.txt 此时 crontab 内容为： 1*/1 * * * * /home/1.sh 四、参数细节说明 5个占位符说明 项目 含义 范围 第一个“*” 一小时中的第几分钟 0-59 第二个“*” 一天当中的第几个小时 0-23 第三个“*” 一个月当中的第几天 1-31 第四个“*” 一年当中的第几月 1-12 第五个“*” 一周当中的星期几 0-7（0和7都是星期日） 特殊符号说明 特殊符号 含义 * 代表任何时间。比如第一个“*”就代表一小时中每分钟都执行一次的意思 , 代表不连续的时间，比如“0 8,12,16 * 命令”，就代表在每天的8点0分，12点0分，16点0分都执行一次命令 - 代表连续的时间范围。比如”0 5 * 1-6命令“，就代表在周一到周六的凌晨5点0分执行命令 */n 代表每隔多久执行一次。比如“/10 * 命令”，代表每10分钟就执行一遍命令]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令]]></title>
    <url>%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
    <content type="text"><![CDATA[一、Vi &amp; Vim（1）vi 和 vim 的基本介绍 所有Linux系统都会内建 vi文本编辑器 Vim具有程序编程能力，可以看做 vi增强版 （2）vi 和 vim 的三种模式1、正常模式 使用命令后的模式就处于正常模式 该模式下可以使用快捷键。 2、插入模式/编辑模式 该模式，可以输入内容 按下 i、I、o、O、a、A、R等任何一个字母后切入该模式，一般来说按 i 即可 3、命令行模式 在该模式，可以使用相关指令完成读取、存盘、替换、离开vim、显示行号等行为。 4、三种模式的相互转换图 （3）常用指令 拷贝当前行 yy，拷贝当前行向下5行，5yy，使用 p 粘贴 删除当前行 dd，删除当前行向下5行，5dd。 查找某个单词【命令行下： /关键字】，回车查找，n查找下一个。 设置行号，取消行号。【命令行下：:set nu 和 :set nonu】 快速跳转文件头gg和文件尾G 撤销 u 跳转到20行，先输入 20，然后快捷键 shift + g 二、开机、重启和用户登录注销1、shutdown shutdown -h now：立即关机 shutdown -h -l：1分钟后关机 shutdown -r now：立即重启 2、halt 关机 3、reboot 重启 4、syn 把内存数据同步到磁盘（建议关机前执行） 5、su 用户名 切换用户 6、logout 注销用户 三、用户管理（1）常用指令1、useradd [选项] 用户名 添加用户 useradd -g 用户组 用户名：添加用户到某个组 2、passwd 用户名 修改密码 3、userdel 用户名 删除用户 4、id 用户名 查询用户信息 5、groupadd 组名 添加用户组 6、groupdel 组名 删除用户组 7、usermod -g 用户组 用户名 修改用户组 （2）有关用户的配置文件1、/etc/passwd 文件 用户的配置文件，记录用户的各种信息 每行的含义：用户名:口令:用户标识符:组标识符:注释性描述:主目录:登录Shell 2、/etc/shadow 文件 口令配置文件 每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志 3、/etc/group 文件 组的配置文件，记录Linux包含的组的信息 每行的含义：组名:口令:组标志号:组内用户列表 四、实用指令（1）Linux运行级别 0：关机 1：单用户模式 （可在该模式下修改root密码） 2：多用户状态没有网络服务 3：多用户状态有网络服务 4：系统未使用保留给用户 5：图形界面 6：系统重启 常用为 3 和 5，要修改默认的运行级别可以修改 /etc/inittab 的 id:5:initdefault 这一行中的数字 （2）找回密码 开机 -&gt; 引导时输入 回车键 -&gt; 看到界面输入 e -&gt; 看到一个新的界面，选中编辑内核然后输入 e -&gt; 行尾输入 空格 1 回车 -&gt; 再次输入 b 进入单用户模式 -&gt; 使用passwd修改root密码 （3）常用指令1、man 指令或配置文件 帮助指令，获得帮助信息 2、help 指令 获得shell内置命令的帮助信息 3、pwd 查看当前目录 4、ls 查看当前目录文件 -a：显示隐藏文件 -l：列表方式显示信息 5、cd 切换目录 6、mkdir 创建目录 -p：创建多级目录 7、rmdir 删除空目录 8、rm 删除文件 -f：不询问删除 -r：递归删除 9、touch 创建空文件 10、cp 复制指令 -r：递归复制整个文件夹 /cp：不询问覆盖 11、mv 移动文件或目录重命名 12、cat 查看文件内容，只读 -n：显示行号 13、more 查看文件内容 空格：下一页 Enter：下一行 q：退出 Ctrl + F：下一页 Ctrl + B：上一页 =：输出行号 :f：输出文件名和当前行号 14、less 分屏查看文件内容（大文件时效率高） 空格：下一页 pagedown：下一页 pageup：上一页 /字串：向下搜索，n：向下，N：向上 ?字串：与 /字串 相反 q：退出 15、&gt; 输出重定向：会将文件内容覆盖 栗子：ls -l &gt; 文件 16、&gt;&gt; 追加：不会覆盖原来文件的内容 栗子：ls -l &gt;&gt; 文件 17、echo 输出内容到控制台 18、head 显示文件头部内容，默认10行 -n：指定显示多少行 19、tail 显示文件尾部内容，默认10行 -n：指令显示多少行 -f：追踪文档的所有更新（查看日志文件） 20、ln 创建软链接（类似window快捷方式） ln -s [原目录或文件][软链接名] 删除软链接：rm -rf 软链接名，不要带斜杠！ 21、history 查看历史指令 22、date 显示当前日期 23、cal 查看日历指令 24、find [范围][选项] -name：按文件查找 -user：按文件所有者查找 -size：按大小查找，+20M，-20M 或 20M 25、locate 快速定位文件路径 使用该指令前必须使用 updatedb 指令创建locate数据库 26、grep 过滤查找，使用管道符号，|，表示将前一个命令的处理结果输出传递给后面的指令处理。 -n：显示行号 -i：忽略大小写 栗子：cat hello.txt | grep -ni yes 27、gzip/gunzip gzip：压缩文件 gunzip：解压文件（gz后缀） 28、zip/unzip zip：压缩文件 unzip：解压文件（zip后缀） 29、tar -c：产生tar文件 -v：显示详细信息 -f：指定压缩后的文件名 -z：打包同时压缩 -x：解包tar文件 -zcvf：压缩 -zxvf：解压（tar.gz后缀） 30、netstat 监控TCP/IP网络的工具，可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息 -a：显示所有连线中的Socket -n：不显示域名服务器，直接使用ip地址 -l：显示监控中的服务器的Socket -t：显示TCP传输协议的连线状况 -u：显示UDP传输协议的连线状况 -p：显示正在使用Socket的程序识别码和程序名称 31、lsof List Open Files，系统级监控诊断工具，可以列出各种进程打开的文件信息 五、组管理和权限管理（1）文件详细信息 通过 ls -l 查看文件的详细信息 123drwxr-xr-x. 5 root root 4096 9月 28 09:44 yum-rw-r--r--. 1 root root 969 5月 12 2016 yum.conf12345678910 11 12 13 14 15 16 1：表示文件类型，文件为 -，目录为 d 2-4：表示所有者权限，rwx分别表示，读、写和执行 5-7：表示所在组权限 8-10：表示其他组权限 11：如果是文件，表示硬链接数；如果是目录表示该目录的子目录数（包括隐藏目录） 12：文件所有者 13：文件所在组 14：文件大小，目录大小默认为4096 15：最后修改时间 16：文件名 （2）rwx权限1、文件 r：表示可读 w：表示可写，不一定可以删除，要有删除权限前提是当前文件目录有可写权限 x：表示可执行 2、目录 r：表示可读，ls可查看 w：表示可以修改，目录内创建、删除、重命名 x：表示可执行，可以进入该目录 （3）修改权限 chmod 1、方式一 +、-、=变更 u：所有者 g：所有组 o：其他组 a：所有人 栗子：chmod u=rwx,g=rx,o=x 文件目录名 2、方式二 r=4、w=2、x=1，rwx=4+2+1=7 栗子：chmod u=rwxg=rx,o=x 文件目录名 等价于 chmod 751 文件目录名 （4）修改文件所有者 chown chown newowner file 改变文件的所有者 chown newowner:newgroup file 改变用户的所有者和所有组 -R：如果是目录，则使其下所有子文件和目录递归生效 （5）修改文件所在组 chgrp chgrp newgroup file 修改文件的所在组]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Docker部署SpringBoot项目]]></title>
    <url>%2F%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Web%E6%9C%8D%E5%8A%A1%E5%99%A8.html</url>
    <content type="text"><![CDATA[一、Docker在Linux环境下的下载安装参照Docker安装及简单使用这篇文章进行下载安装~ 二、使用Docker安装配置Mysql 从docker hub拉取最新的Mysql镜像 123456789101112131415161718[root@192 /]# docker pull mysqlUsing default tag: latestTrying to pull repository docker.io/library/mysql ...latest: Pulling from docker.io/library/mysql802b00ed6f79: Pull complete30f19a05b898: Pull complete3e43303be5e9: Pull complete94b281824ae2: Pull complete51eb397095b1: Pull complete54567da6fdf0: Pull completebc57ddb85cce: Pull completed6cd3c7302aa: Pull completed8263dad8dbb: Pull complete780f2f86056d: Pull complete8e0761cb58cd: Pull complete7588cfc269e5: Pull completeDigest: sha256:038f5f6ea8c8f63cfce1bce9c057ab3691cad867e18da8ad4ba6c90874d0537aStatus: Downloaded newer image for docker.io/mysql:latest 查看已有镜像 123[root@192 /]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEdocker.io/mysql latest 6a834f03bd02 3 weeks ago 484 MB 启动Mysql容器 12[root@192 /]# docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql1e70b88a06383a6e288d09685439fe193fe95fca85bd606042e4da233a6e4033 查看已启动容器 123[root@192 /]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES1e70b88a0638 mysql "docker-entrypoint..." 16 seconds ago Up 15 seconds 0.0.0.0:3306-&gt;3306/tcp, 33060/tcp mysql 在window下使用navicat连接数据库，并导入对应数据库即可 三、SpringBoot导出jar包 四、使用Dockerfile构建openjdk镜像 使用scp命令将jar包从window导入linux（注：该操作要在window命令行执行） 123scp /d/project/IdeaProjects/wx/card/build/libs/card-0.0.1-SNAPSHOT.jar root@192.168.5.67:/openjdk/root@192.168.5.67's password: #输入你的linux系统密码card-0.0.1-SNAPSHOT.jar 100% 27MB 43.4MB/s 00:00 在openjdk目录下创建Dockerfile文件，内容如下： 1234567891011# 基于哪个镜像FROM openjdk:8# 将本地⽂件夹挂载到当前容器VOLUME /tmp# 开放8080端口EXPOSE 8080# 拷⻉⽂件到容器ADD card-0.0.1-SNAPSHOT.jar app.jarRUN bash -c &apos;touch /card-0.0.1-SNAPSHOT.jar&apos;# 配置容器启动后执⾏的命令CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;/card-0.0.1-SNAPSHOT.jar&quot;] 当前openjdk目录如下 12[root@192 openjdk]# lscard-0.0.1-SNAPSHOT.jar Dockerfile 构建docker镜像 1234567891011121314151617181920212223242526272829303132333435363738[root@192 openjdk]# docker build -t wx/card .Sending build context to Docker daemon 28.17 MBStep 1/6 : FROM openjdk:8Trying to pull repository docker.io/library/openjdk ...8: Pulling from docker.io/library/openjdk05d1a5232b46: Pull complete5cee356eda6b: Pull complete89d3385f0fd3: Pull complete80ae6b477848: Pull complete40624ba8b77e: Pull complete8081dc39373d: Pull complete8a4b3841871b: Pull completeb919b8fd1620: Pull complete2760538fe600: Pull completeDigest: sha256:28c751d7461b624a0fedfaf5295fda83242c612c5e1ad2fe34c9c78cc5ee8755Status: Downloaded newer image for docker.io/openjdk:8 ---&gt; 81f83aac57d6Step 2/6 : VOLUME /tmp ---&gt; Running in 9c2aee938c46 ---&gt; ce5056b8f1e8Removing intermediate container 9c2aee938c46Step 3/6 : EXPOSE 8080 ---&gt; Running in e6f2966baff8 ---&gt; b023c77db552Removing intermediate container e6f2966baff8Step 4/6 : ADD card-0.0.1-SNAPSHOT.jar app.jar ---&gt; bf17297d2dd8Removing intermediate container 554aa0f3d90eStep 5/6 : RUN bash -c 'touch /card-0.0.1-SNAPSHOT.jar' ---&gt; Running in 240209263a87 ---&gt; ee62463069bfRemoving intermediate container 240209263a87Step 6/6 : CMD java -jar /card-0.0.1-SNAPSHOT.jar ---&gt; Running in 93a4c14e812d ---&gt; 44ce7c9e2ec5Removing intermediate container 93a4c14e812dSuccessfully built d2e4c843e0f4 查看已有镜像 12345[root@192 openjdk]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEwx/card latest d2e4c843e0f4 53 minutes ago 652 MBdocker.io/openjdk 8 81f83aac57d6 3 weeks ago 624 MBdocker.io/mysql latest 6a834f03bd02 3 weeks ago 484 MB 启动刚新建的容器 12[root@192 openjdk]# docker run -p 8080:8080 --name card -d wx/card77f963935f9aaf1996431db90777da55962fda9bef95340b797136a2931f3d36 查看已启动的容器 1234[root@192 openjdk]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES77f963935f9a wx/card "java -jar /app.jar" 6 seconds ago Up 5 seconds 0.0.0.0:8080-&gt;8080/tcp card1e70b88a0638 mysql "docker-entrypoint..." 14 minutes ago Up 14 minutes 0.0.0.0:3306-&gt;3306/tcp, 33060/tcp mysql 可以看到项目已经正常启动了，打开浏览器输入ip地址加8080就可以访问了（注：项目的端口要与容器的端口一致才能正常访问） 五、配置Nginx服务器，使用二级域名访问服务器 上诉操作我是在本地Linux虚拟机上操作的，剩下的操作将转移到腾讯云的Linux服务器上 首先在腾讯云后台操作，把二级域名解析到云服务器ip地址上 稍等片刻，即可在浏览器上通过域名+端口访问项目（解析需要一段时间，期间可以使用 ping 域名 命令来判断是否正确指向ip） 从docker hub拉取最新的Nginx镜像 123456789[root@VM_0_7_centos /]# docker pull nginxUsing default tag: latestTrying to pull repository docker.io/library/nginx ...latest: Pulling from docker.io/library/nginx802b00ed6f79: Already existsc16436dbc224: Pull complete683eac851b28: Pull completeDigest: sha256:e8ab8d42e0c34c104ac60b43ba60b19af08e19a0e6d50396bdfd4cef0347ba83Status: Downloaded newer image for docker.io/nginx:latest 查看已有镜像 123456[root@VM_0_7_centos ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEdocker.io/nginx latest bc26f1ed35cf 39 hours ago 109 MBwx/card latest d2e4c843e0f4 53 minutes ago 652 MBdocker.io/openjdk 8 81f83aac57d6 3 weeks ago 624 MBdocker.io/mysql latest 6a834f03bd02 3 weeks ago 484 MB 编写nginx.conf配置文件，放在服务器 nginx/conf 目录下 12345678910111213141516171819202122232425262728293031323334353637#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log /var/log/nginx/access.log main; sendfile on; keepalive_timeout 65; upstream wx &#123; server 172.16.0.7:8080 weight=1; &#125; server &#123; listen 80; server_name wx.mrxiexie.cn; access_log /var/log/nginx/access.log main; location / &#123; proxy_pass http://wx; &#125; &#125;&#125; nginx目录如下 12[root@VM_0_7_centos nginx]# lsconf 启动Nginx容器（注：需要在nginx目录下使用如下命令） 12[root@VM_0_7_centos nginx]# docker run -p 80:80 --name nginx -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -d bc26f1ed35cf8d2e61da4374b47e982ad15814986b2f6c3f8d16cd3d4936fda609096f142262 查看已启动的容器 12345[root@VM_0_7_centos nginx]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES6c3e47090f0d bc26f1ed35cf "nginx -g 'daemon ..." 27 hours ago Up 3 minutes 0.0.0.0:80-&gt;80/tcp nginx77f963935f9a wx/card "java -jar /app.jar" 6 seconds ago Up 5 seconds 0.0.0.0:8080-&gt;8080/tcp card1e70b88a0638 mysql "docker-entrypoint..." 14 minutes ago Up 14 minutes 0.0.0.0:3306-&gt;3306/tcp, 33060/tcp mysql 最后还需要防火墙开放对应的程序端口，我这里需要开放8080端口 12345$ firewall-cmd --zone=public --add-port=8080/tcp --permanent$ firewall-cmd --reload# 查看端口是否开放，yes为开放$ firewall-cmd --zone=public --query-port=8080/tcpyes 浏览器输入二级域名即可访问~ 以上所有配置仅供参考，详细配置请参照对应官方文档~]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>java</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安卓dp、dpi、px的关系]]></title>
    <url>%2F%E5%AE%89%E5%8D%93dp%E3%80%81dpi%E3%80%81px%E7%9A%84%E5%85%B3%E7%B3%BB.html</url>
    <content type="text"><![CDATA[一、屏幕宽对应dpi 宽 DPI等级 DPI数值 240 LDPI 120 320 MDPI 160 480 HDPI 240 720 XHDPI 320 1080 XXHDPI 480 1440 XXXHDPI 640 二、计算公式（1）dpi计算公式dpi：(dot per inch)每英寸像素多少 dpi = 对角线的像素 / 屏幕尺寸 （2）dp与px换算px = dp * (dpi/160)]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx学习笔记]]></title>
    <url>%2FNginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[一、Nginx初探（1）Nginx是什么 Nginx是一款免费开源的HTTP服务器及反向代理服务器，官网链接 （2）Nginx的功能 Nginx提供基本HTTP服务，可以作为HTTP代理服务器和反向代理服务器，支持通过缓存加速访问，可以完成简单的负载均衡和容错，支持包过滤功能，支持SSL等。 Nginx提供高级HTTP服务，可以进行自定义配置，支持虚拟主机，支持URL重定向，支持网络监控，支持流媒体传输等。 Nginx作为邮件代理服务器是最早开发这个产品的目的之一，它支持IMAP/POP3代理服务功能，支持内部SMTP代理服务功能。 二、Nginx的安装和部署下载地址 （1）Window下安装 window版下载下来为一个压缩文件，解压即可使用，文件目录如下： conf 目录中存放的是Nginx服务器的配置文件，包含Nginx服务器的基本配置文件和对部分特性的配置文件 docs 目录中存放了Nginx服务器的文档资料，包含Nginx服务器的LICENSE，OpenSSL的LICENSE，PCRE的LICENSE以及zlib的LICENSE，还包括本版本Nginx服务器升级的版本变更说明，以及README文档 html 目录中存放了两个后缀名为.html的静态网页文件。这两个文件与Nginx服务器的运行相关。 logs目录中存放了Nginx服务器运行的日志文件 nginx.exe 即为启动Nginx服务器的运行程序 （2）Linux下安装1、把下载的安装包放在一个文件夹中，解压~ 123456789101112131415161718192021[root@localhost nginx]# lsnginx-1.15.3.tar.gz[root@localhost nginx]# tar xf nginx-1.15.3.tar.gz [root@localhost nginx]# lsnginx-1.15.3 nginx-1.15.3.tar.gz[root@localhost nginx]# cd nginx-1.15.3[root@localhost nginx-1.15.3]# lsauto CHANGES CHANGES.ru conf configure contrib html LICENSE man README src [root@localhost nginx-1.15.3]# ls -l 总用量 740 drwxr-xr-x. 6 1001 1001 4096 9月 20 23:07 auto -rw-r--r--. 1 1001 1001 290941 8月 28 23:36 CHANGES -rw-r--r--. 1 1001 1001 443800 8月 28 23:36 CHANGES.ru drwxr-xr-x. 2 1001 1001 168 9月 20 23:07 conf -rwxr-xr-x. 1 1001 1001 2502 8月 28 23:36 configure drwxr-xr-x. 4 1001 1001 72 9月 20 23:07 contrib drwxr-xr-x. 2 1001 1001 40 9月 20 23:07 html -rw-r--r--. 1 1001 1001 1397 8月 28 23:36 LICENSE drwxr-xr-x. 2 1001 1001 21 9月 20 23:07 man -rw-r--r--. 1 1001 1001 49 8月 28 23:36 README drwxr-xr-x. 9 1001 1001 91 9月 20 23:07 src src 目录中存放了Nginx软件的所有源代码 man 目录中存放了Nginx软件的帮助文档 man nginx html 目录和 conf 目录中存放的内容和windows版本的同名目录相同 auto 目录中存放了大量的脚本文件，和configuration脚本程序有关 configura 文件是Nginx软件的自动脚本程序 2、下载Nginx需要依赖的第三方库 1yum -y install gcc gcc-c++ automake pcre pcre-devel zlib zlib-deve l open openssl-devel 3、配置并生产Makefile文件 1./configure --prefix=/Nginx 4、编译与安装，最后nginx安装在了 /Nginx 目录下 12makemake install 5、查看安装目录 12[root@localhost Nginx]# lsconf html logs sbin conf 目录中存放了Nginx的所有配置文件。其中，ngfix.conf文件是Nginx服务器的主配置文件，其他配置文件是用来配置Nginx的相关功能，比如，配置 fastcgi 使用的 fastcgi.conf 和 fastcgi_params 两个文件。所有的配置文件都提供了以 .default 结尾的默认配置文件，方便我们将配置过的 .conf 文件恢复到初始状态 html 目录中存放了 Nginx服务器在运行过程中调用的一些html网页文件。 logs 目录，用来存放Nginx服务器的日志 sbin目录，目前其中只有一个nginx文件，这就是Nginx服务器的主程序 （3）Nginx服务的启停控制 Nginx服务器的启动停止，有一类是通过信号机制来实现的。 Nginx在运行时，会保持一个主进程和一个或多个worker process 工作进程。 通过给Nginx的主进程发送信号就可以控制服务的启动停止了。 1、启动Nginx1[root@desktop-ksot40m Nginx]# ./sbin/nginx 2、查看Nginx的主进程PID，当前主进程为1143 通过ps命令获取 1234[root@desktop-ksot40m Nginx]# ps -ef | grep nginxroot 1143 1 0 11:05 ? 00:00:00 nginx: master process ./sbin/nginxnobody 1144 1143 0 11:05 ? 00:00:00 nginx: worker processroot 1169 1123 0 11:37 pts/0 00:00:00 grep --color=auto nginx 查看nginx.conf文件 12345[root@desktop-ksot40m Nginx]# cd logs/[root@desktop-ksot40m logs]# lsaccess.log error.log nginx.pid[root@desktop-ksot40m logs]# cat nginx.pid1143 3、停止Nginx12kill SIGNAL PIDkill SIGNAL 'filepath' //指定nginx.pid动态获取pid号 信号 作用 TERM 或 INT 快速停止Nginx服务 QUIT 平缓停止Nginx服务 HUP 使用新的配置文件启动进程，之后平缓停止原有进程，也就是所谓的平滑重启 USR1 重新打开日志文件，常用于日志切割，在相关章节中会对此进一步说明 USR2 使用新版本的Nginx文件启动服务，之后平缓停止原有Nginx进程，也就是所谓的”平滑升级“ WINCH 平缓停止worker process，用于Nginx服务器平滑升级 4、重启Nginx12kill -HUP PIDkill -HUP 'filepath' //指定nginx.pid动态获取pid号 5、升级Nginx Nginx服务器提供平滑升级功能 Nginx服务接收到 USR2 信号后，首先将旧的 nginx.pid 文件添加后缀 .oldbin ，变为 nginx.pid.oldbin 文件；然后执行新版本Nginx服务器的二进制文件启动服务。如果新的服务启动成功，系统中将有新旧两个Nginx服务共同提供Web服务。之后，需要向旧的Nginx服务进程发出 WINCH 信号，使旧的Nginx服务平滑停止，并删除 nginx.pid.oldbin 文件。在发送 WINCH 信号之前，可以随时停止新的Nginx服务。 实现Nginx服务器平滑升级，应该保持安装路径一致。如果由于某种原因无法保持一致。则可以先将旧服务器的安装路径改为新服务器的安装路径。 1./Nginx/nginx -p newInstallPath 备份好旧服务器，安装新的服务器，使用以下两种其中之一，命令实现Nginx服务的平滑升级 12./sbin/Nginx -g USR2kill -USR2 PID 通过 ps -ef | grep nginx 查看新的Nginx服务启动正常，再使用 WINCH 信号用于发送平滑停止旧服务信号 12./sbin/Nginx -g WINCHkill WINCH PID （4）Nginx服务器基本配置指令1、打开nginx.conf123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#user nobody;#全局生效worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; #在events中部分生效 worker_connections 1024;&#125;http &#123; #以下指令在http部分中生效 include mime.types; default_type application/octet-stream; #log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; #以下指令在http的server部分中生效 server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; #以下指令在http/server的location中生效 location / &#123; root html; index index.html index.htm; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125; 2、nginx.conf文件的结构 nginx.conf 由三部分组成，全局块、events块和http块 http块中包含http全局块，多个server块 server块中包含server全局块，多个location块 12345678910111213141516171819202122232425#全局块#event块events &#123; &#125;#http块http &#123;#http全局块 #server块 server &#123; #server全局块 #location块 location [PATTERN] &#123; &#125; #location块 location [PATTERN] &#123; &#125; &#125; #server块 server &#123; &#125;&#125; 3、各个块作用 全局块：全局块是默认配置文件从开始到events块之间的一部分内容，主要设置一些影响Nginx服务器整体运行的配置指令，因此指令的作用于是Nginx服务器全局。通常包括配置运行Nginx服务器的用户（组），允许生成的worker process数、Nginx进程PID存放路径，日志的存放路径和类型以及配置文件引入等。 event块：events块涉及的指令主要影响Nginx服务器与用户的网络连接。常用到的设置包括是否开启对多worker process下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型处理连接请求，每个worker process 可以同时支持的最大连接数等。 http块：http块是Nginx服务器配置中的重要部分，代理、缓存和日志定义等绝大多数的功能和第三方模块的配置都可以放在这个模块中。可以在http全局块中配置的指令包括文件引入、MIME-TYPE定义、日志自定义、是否使用sendfile传输文件、连接超时时间、单链接请求数上限等。 server块：server块和“虚拟主机”的概念有密切联系。一台实体主机可以有多个虚拟主机。一个Nginx服务器提供Web服务时，同一个Nginx进程可以运行多个网站，就是通过server块来完成这个功能。每一个server块就相当于一台虚拟主机，它内部可有多台主机联合提供服务，一起对外提供逻辑上关系密切的一组服务。server全局块指令的作用域为本server块，其不会影响其他server块。在server全局块中，最常见的两个配置项就是本虚拟主机的监听配置和本虚拟主机的名称或IP配置。 location块：基于Nginx服务器接收到的请求字符创（例如，server_name/uri_string），对除虚拟主机名称（也可以IP别名）之外的字符串进行匹配（/uri_string）。地址定向、数据缓存和应答控制等功能都是在这部分实现。许多第三方模块的配置也是在location块中提供功能。 4、配置运行Nginx服务器的用户（组）只有设置的用户或用户组成员才能运行Nginx服务器 1user user [group]; user：指定可以运行Nginx服务器的用户 group：指定可以运行Nginx服务器的用户组 如果希望所有用户都可以启动Nginx进程，可以将该指令注释，或者使用如下指令 12# user [user] [group];user nobody nobody; #这也是user指令的默认设置 5、配置运行生成的worker process 数workr process 是Nginx服务器实现并发处理服务器的关键所在。理论上，数值越大可支持并发越大。但也会受软件本身、操作系统本身资源、硬件设备等约束。 1worker_processes number | auto; number：指定Nginx进程最多可以产生的worker process 数 auto：Nginx进程会自动监测 6、配置Nginx进程PID存放路径Nginx进程作为系统的守护进程运行，我们需要再某文件中保存当前运行程序的主进程号。 1pid file; file：指定文件路径和文件名称 7、配置错误日志的存放路径在全局块，http块和server块都可以对Nginx服务器的日志进行相关配置。 1error_log file | stderr [debug | info | notice | warb | error | crit | alert | emerg]; file：指定文件路径和文件名称 stderr：日志级别 8、配置文件的引入有时候，我们需要将其他的Nginx配置或者第三方模块配置引用到当前的主配置文件中。Nginx提供了include指令来完成配置文件的引入 1include file; file：要引入的配置文件 9、设置网络连接的序列化 惊群：当某一时刻只有一个网络连接到来时，多个睡眠线程会被同时叫醒，但是只有一个进程可以获得连接。如果每次唤醒进程数太多，会影响性能。 使用 accept_mutex 指令可以解决这个问题。当该设置开启时，将会对多个Nginx进程接收连接进行序列化，防止多个进程对连接争抢 1accept_mutex on | off; 只能在events块中进行配置 10、配置是否允许同时接收多个网络连接 每个Nginx服务器的worker process 都有能力同时接收多个新的到达的网络连接。 1multi_accept on | off; 当为off时，worker process一次只能接收到一个新到达的网络连接。 11、事件驱动模型的选择 Nginx提供了多种事件驱动模型来处理网络消息。配置文件中为我们提供了相关的指令来强制Nginx服务器选择哪种事件驱动模型进行消息处理，指令为use 1use method; method：select、poll、kqueue、epoll、rtsig、/dev/poll 以及 eventport 只能在events块中进行配置 12、配置最大连接数 指令 worker_connections 主要用来设置允许每一个 worker process 同时开启的最大连接数。 1worker_connections number; 默认为512 只能在events块中进行配置 13、定义MIME-TYPE 浏览器中可现实的内容有HTML、XML、GIF及Flash等种类繁多的文本、媒体等资源，浏览器可以区分这些资源，需要使用MIME Type。 Nginx默认配置中，http全局块中有一下两行配置 12include mime.types;default_type application/octet-stream 第一行从外部引入了 mime_types 文件 第二行使用指令 default_type 配置了用于处理前段请求的MIME类型 1default_type mine-type; 默认值为 text/plain 可以在http块，server块或者location块中进行设置 14、自定义服务日志 记录Nginx服务器提供服务过程应答前端请求的日志。 Nginx服务器支持对服务日志的格式、大小、输出等进行配置，需要使用两个指令，分别是access_log 和 log_format指令 access_log指令的语法结构为： 1access_log path [format [buffer=size]]; path：配置服务日志的文件存放的路径和名称。 format：可选项，自定义服务日志的格式字符串，也可以通过“格式串的名称” 使用 log_format 指令定义好的格式。“格式串的名称” 在 log_format 指令中定义 size：配置临时存放日志的内存缓存区大小 可以在http块、server块或者location块中进行配置。默认配置为： 1access_log logs/access.log combined; 其中，combined为 log_format 指令默认定义的日志格式字符串的名称。 如果要取消服务日志的功能，则使用： 1access_log off; 和access_log联合使用的另一个指令是log_format，它专门用于定义服务日志的格式，并且可以为格式字符串定义一个名字，以便access_log指令可以直接调用，其语法格式为： 1log_format name string ...; name：格式字符串的名字，默认的名字为combined。 string：服务日志的格式字符串。在定义过程中，可以使用Nginx配置预设的一些变量获取相关内容，变量的名称使用双引号括起来，string整体使用单引号括起来。 示例： 1log_format exampleLog &apos;$remote_addr&apos; - [$time_local] $request &apos; &apos;$status $body_bytes_sent $http_referer &apos; &apos;$http_user_agent&apos;; 上面示例定义了服务日志文件的名称为 exampleLog 结果： 1192.168.1.102 - [31/Oct/2011:20:41:39 +0800] &quot;GET/HTTP/1.1&quot; 200 151 &quot;-&quot; &quot;Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)&quot; $remote_addr：获取到用户机的ip地址为 192.168.1.102 $time_local：获取到本地时间为 31/Oct/2011:20:41:39 +0800 $request：获取到请求为GET/favicon.ico HTTP/1.1 $status：获取到请求状态为404（未找到） $body_bytes_sent：获取到请求体的大小为 570B $http_referer：未获取到任何内容 $http_user_agent：获取到用户是用Mozilla浏览器 只能在http块中进行配置 15、配置允许sendfile方式传输文件 sendfile传输方式的相关指令 sendfile 和 sendfile_max_chunk 以及它们的语法结构： 1sendfile on | off; 用于开启或者关闭 sendfile() 传输文件，默认值为off，可以在http块、server块或者location块中进行配置。 1sendfile_max_chunk size; 其中，size值如果大于0，Nginx进程的每个worker process 每次调用sendfile() 传输的数据最大不能超过这个值；如果设置为0，则无限制。默认值为0。可以在http块、server块或者location块中进行配置。 1sendfile_max_chunk 128k; 16、配置连接超时时间 与用户建立会话连接后，Nginx服务器可以保持这些连接打开一段时间 1keepalive_timeout timeout [header_timeout]; timeout：服务器端对连接的保持时间。默认值为75s。 header_timeout：可选项。在应答报文头部的Keep_Alive域设置超时时间：“Keep_Alive:timeout=header_timeout”。 1keepalive_timeout 120s 100s; 可以在http块，server块或者location块中进行设置 17、单连接请求数上限 Nginx服务器端和用户端建立会话后，用户端通过此连接发送请求。指令 keepalive_requests 用于限制用户通过某一连接向Nginx服务器发送请求的次数。 1keepalive_requests numbers; 可以在http块，server块或者location块中进行设置，默认100。 18、配置网络监听 使用 listen，其配置方法主要有三种，我们先分别介绍三种配置的语法结构，然后统一介绍涉及的相关变量和标识符。 第一种：配置监听的ip地址 1listen addr[:port] [default_server] [setfib=number] [backlog=number] [rcvbuf=size] [sndbuf=size] [deferred] [accept_filter=filter] [bind] [ssl]; 第二种：配置监听端口 1listen port [default_server] [setfib=number] [backlog=number] [rcvbuf=size] [sndbuf=size] [accept_filter=filter] [deferred] [bind] [ipv6only=on|off] [ssl]; 第三种：配置UNIX Domain Socket（一种在原有Socket框架发展起来的IPC机制，用于在单个主机上执行客户、服务器通信） 1listen unix:path [default_server] [backlog=number] [rcvbuf=size] [sndbuf=size] [accept_filter=filter] [deferred] [bind] [ssl]; address：IP地址，如果是IPv6的地址，需要使用中括号“[]”括起来，比如[fe80::1]等。 port，端口号，如果只定义了IP地址没有定义端口号，就使用80端口。 path：socket文件路径，如var/run/nginx.sock等。 default_server：标识符，将此虚拟主机设置为address:port的默认主机。 setfib=number：Nginx-0.8.44中使用这个变量为监听socket关联路由表，目前支队FreeBSD起作用，不常用。 backlog=number：设置监听函数listen()最多允许多少网络连接同时处于挂起状态，在FreeBSD中默认为-1，其他平台默认为511。 rcvbuf=size：设置监听socket接收缓存区大小。 sndbuf=size：设置监听socket发送缓存区大小。 deferred：标识符，将accept()设置为Deferred模式。 accept_filter=filter：设置监听端口对请求的过滤，被过滤的内容不能接收和处理。可以设置dataready和httpready。 bind：标识符，使用独立的bind()处理此address:port；一般情况下，对于端口相同而ip地址不同的多个连接，Nginx服务器将只使用一个监听命令，并使用bind()处理端口相同的所有连接。 ssl：标识符，设置会话连接使用SSL 模式，此标识符和Nginx服务器提供的HTTPS服务有关。 默认设置： 1listen *:80 | *:8000; 即监听所有80端口和8000端口。示例： 1234listen 192.168.1.10:8000; #监听具体的IP和具体的端口上的连接listen 192.168.1.10; #监听具体IP的所有端口上的连接listen 8000; #监听具体端口上的所有IP连接，等同于listen *:8000;listen 192.168.1.10 default_server backlog=1024; #设置192.168.1.10 的连接请求默认由此虚拟主机处理，并且允许最多1024网络连接同时处于挂起状态。 19、基于名称的虚拟主机配置 主机，指的是server块对外提供的虚拟主机。设置了主机的名称并配置好DNS，用户就可以使用这个名称对此虚拟主机发送请求了。 1server_name name ...; name：可以只有一个名称，也可以由多个名称并列，之间使用空格隔开。每个名字就是一个域名，由两段或三段组成，之间由点号 “.” 隔开。 1server_name myserver.com www.myserver.com; 示例中，此虚拟主机的名称设置为 myserver.com 或 www.myserver.com。Nginx服务器规定，第一个名称作为此虚拟主机的主要名称。 20、配置location块 在Nginx的官方文档中定义的location的语法结构为： 1location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125; uri：是待匹配的请求字符串，可以是不含正则表达的字符串，如/myserver.php等；也可以是包含有正则表达的字符串，如 .php$（表示以.php结尾的URL）等。 Nginx服务器首先在server块的多个location中搜索是否有标准的uri和请求字符串匹配，如果有多个可以匹配，就记录匹配度最高的一个。然后服务器再用location块中的正则uri和请求字符串匹配，当第一个正则uri匹配成功，结束搜索，并使用这个location块处理此请求；如果正则匹配全部失败，就使用刚才记录的匹配度最高的location块处理此请求。 “=”：用于标准uri前，要求请求字符串与uri严格匹配。如果匹配成功，就停止继续向下搜索并立即处理此请求。 “~”：用于表示uri包含正则表达式，并且区分大小写。 “~*”：用于表示uri包含正则表达式，并且不区分大小写。 “^~”：用于标准uri前，要求Nginx服务器找到标识uri和请求字符串匹配度最高的location后，立即使用此location处理请求，而不再使用location块中的正则uri和请求字符串做匹配。 如果uri包含正则表达式，就必须使用 “~” 或者 “~*” 标识。 21、配置请求的根目录 Web服务器收到网络请求之后，首先要在服务器端指定目录中寻找请求资源。在Nginx服务器中，指令root就是用来配置这个根目录。 1root path; path：Nginx服务器接收到请求以后查找资源的根目录路径。path变量中可以包含Nginx服务器预设的大多数变量。 123location /data/&#123; root /locationtest1;&#125; 当location块收到 “data/index.html” 的请求时，将在 /locationtest1/data 目录下找到 index.html 响应请求。 可以在http块，server块或者location块中进行设置。 22、更改location的URI 在location块中，除了使用root指令指明请求处理根目录，还可以使用alias指令改变location接收到的URI的请求路径 1alias path; path：修改后的根路径。 示例： 123location = ^/data/(.+\.(html|htm))$ &#123; alias /locationtest1/other/$1&#125; 当次location块接收到 “/data/index.htm” 的请求时，匹配成功，之后根据alias指令的配置，Nginx服务器将到/locationtest1/other目录下找到index.htm并响应请求。 23、设置网站的默认首页 指令index用于设置网站的默认首页，它一般可以有两个作用： 用户在发出请求访问网站时，请求地址可以不写首页的名称； 可以对一个请求，根据其请求内容而设置不同的首页。 1index file ...; file：可以包括多个文件名，期间使用空格分隔，也可以包含其他变量。默认为 “index.html” 123location = ^/data/(.+)/web/ $ &#123; index index.$1.html index.myl.html index.html;&#125; 当location块接收到“/data/locationtest/web”时，匹配成功，它首先将预设变量$1置为locationtest。然后在/data/locationtest/web/ 路径下按照 index 的配置次序依次寻找 index.locationtest.html 页、index.my1.html 页和 index.html 页，首先找到哪个页面，就使用哪个页面响应请求。 24、设置网站的错误页面 HTTP 2xx：请求正常完成 HTTP 3xx：网站重定向 HTTP 4xx：客户端出现错误 HTTP 5xx：服务器端出现错误 1error_page code ... [=[response]] uri； code：要处理的HTTP错误代码 response：将code指定的错误代码转化为新的错误代码response。 uri：错误页面的路径或者网站地址。如果设置为路径，则是以Nginx服务器安装路径下的html目录为根路径的相对路径；如果设置为网址，则Nginx服务器会直接访问该网址获取错误页面，并返回给用户端。 1error_page 404 /404.html; 设置Nginx服务器使用 “Nginx安装路径/html/404.html” 页面响应404错误 1error_page 403 http://somewebsite/com/forbidden.html; 设置Nginx服务器使用 “http://somewebsite.com/forbidden.html” 页面响应403错误 1error_page 410 =301 /empty.gif 设置Nginx服务器产生410的HTTP消息时，使用 “Nginx安装路径/html/empty.gif” 返回给用户301消息。 使用一个location指令定向错误页面到新的路径下面。 1error_page 404 /404.html 添加一个location块 123location /404.html &#123; root /myserver/errorpages/&#125; 首先捕获 “/404.html” 请求，然后将请求定向到新的路径下面即可。 可以在http块，server块或者location块中进行设置。]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA安装插件]]></title>
    <url>%2FIDEA%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6.html</url>
    <content type="text"><![CDATA[一、IDEA中安装步骤 下面我们以安装Lombok为例 打开设置（使用快捷键Ctrl + Alt + S） 搜索Lombok 选择Lombok，点击install下载安装~ 安装后点击Restart重启即可 二、进入官网下载插件进行安装 进入官网，搜索插件回车。 选择Lombok Plugin 选择对应IDEA的版本号进行下载（这个很重要，版本不对应会出错！） 在IDEA，设置页面中，选择从磁盘上进行安装，然后选择刚下载的插件，Restart即可。]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内网穿透之ngrok]]></title>
    <url>%2F%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E4%B9%8Bngrok.html</url>
    <content type="text"><![CDATA[一、下载软件登录Ngrok官网，下载好软件。 二、内网穿透输入如下命令映射对应端口，以8080为例： 12345678910111213ngrok http 8080ngrok by @inconshreveable (Ctrl+C to quit)Session Status onlineSession Expires 7 hours, 58 minutesVersion 2.2.8Region United States (us)Web Interface http://127.0.0.1:4040Forwarding http://2f2b4cad.ngrok.io -&gt; localhost:8080Forwarding https://2f2b4cad.ngrok.io -&gt; localhost:8080Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00]]></content>
      <categories>
        <category>ngrok</category>
      </categories>
      <tags>
        <tag>ngrok</tag>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java中List的浅拷贝与深拷贝]]></title>
    <url>%2FJava%E4%B8%ADList%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D.html</url>
    <content type="text"><![CDATA[List浅拷贝众所周知，list本质上是数组，而数组的是以地址的形式进行存储。list A浅拷贝给list B，由于进行的是浅拷贝，所以直接将A的内容复制给了B，java中相同内容的数组指向同一地址，即进行浅拷贝后A与B指向同一地址。造成的后果就是，改变B的同时也会改变A，因为改变B就是改变B所指向地址的内容，由于A也指向同一地址，所以A与B一起改变。 几种浅拷贝1、遍历循环复制1234List&lt;Person&gt; destList = new ArrayList&lt;Person&gt;(srcList.size());for (Person p : srcList) &#123; destList.add(p);&#125; 2、使用List实现类的构造方法1List&lt;Person&gt; destList = new ArrayList&lt;Person&gt;(srcList); 3、使用list.addAll()方法12List&lt;Person&gt; destList = new ArrayList&lt;Person&gt;(); destList.addAll(srcList); 4、使用System.arraycopy()方法123Person[] srcPersons = srcList.toArray(new Person[0]); Person[] destPersons = new Person[srcPersons.length]; System.arraycopy(srcPersons, 0, destPersons, 0, srcPersons.length); 测试及结果1234567891011printList(destList); //打印未改变B之前的A srcList.get(0).setAge(100); //改变B printList(destList); //打印改变B后的A//打印结果123--&gt;20 ABC--&gt;21 abc--&gt;22 123--&gt;100 ABC--&gt;21 abc--&gt;22 List深拷贝深拷贝就是将A复制给B的同时，给B创建新的地址，再将地址A的内容传递到地址B。ListA与ListB内容一致，但是由于所指向的地址不同，所以改变相互不受影响。 深拷贝的方法1.使用序列化方法12345678910111213public static &lt;T&gt; List&lt;T&gt; deepCopy(List&lt;T&gt; src) throws IOException, ClassNotFoundException &#123; ByteArrayOutputStream byteOut = new ByteArrayOutputStream(); ObjectOutputStream out = new ObjectOutputStream(byteOut); out.writeObject(src); ByteArrayInputStream byteIn = new ByteArrayInputStream(byteOut.toByteArray()); ObjectInputStream in = new ObjectInputStream(byteIn); @SuppressWarnings("unchecked") List&lt;T&gt; dest = (List&lt;T&gt;) in.readObject(); return dest;&#125;List&lt;Person&gt; destList = deepCopy(srcList); //调用该方法 2.clone方法1234567891011121314151617181920public class A implements Cloneable &#123; public String name[]; public A() &#123; name = new String[2]; &#125; public Object clone() &#123; A o = null; try &#123; o = (A) super.clone(); &#125; catch (CloneNotSupportedException e) &#123; e.printStackTrace(); &#125; return o; &#125;&#125;for (int i = 0; i &lt; n; i +=) &#123; copy.add((A) src.get(i).clone());&#125; ​ Java对对象和基本的数据类型的处理是不一样的。在Java中用对象的作为入口参数的传递则缺省为”引用传递”，也就是说仅仅传递了对象的一个”引用”，这个”引用”的概念同C语言中的指针引用是一样的。当函数体内部对输入变量改变时，实质上就是在对这个对象的直接操作。 除了在函数传值的时候是”引用传递”，在任何用”＝”向对象变量赋值的时候都是”引用传递”。 测试及结果12345678910printList(destList); //打印未改变B之前的A srcList.get(0).setAge(100); //改变B printList(destList); //打印改变B后的A123--&gt;20 ABC--&gt;21 abc--&gt;22 123--&gt;20 ABC--&gt;21 abc--&gt;22 ​ 在浅复制的情况下，源数据被修改破坏之后，使用相同引用指向该数据的目标集合中的对应元素也就发生了相同的变化。因此，在需求要求必须深复制的情况下，要是使用上面提到的方法，请确保List中的T类对象是不易被外部修改和破坏的。 更多引用拷贝，对象拷贝，浅拷贝，深拷贝：传送门]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java线程池]]></title>
    <url>%2FJava%E7%BA%BF%E7%A8%8B%E6%B1%A0.html</url>
    <content type="text"><![CDATA[线程池原理 线程池的使用 线程池源码分析 一、线程池原理1.1 使用线程池的好处第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。第二：提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。第三：提高线程的可管理性。线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源,还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。 1.2 线程池的实现原理当向线程池提交任务后，线程池会按下图所示流程去处理这个任务： 线程池的主要处理流程 1）线程池判断核心线程池里的线程是否都在执行任务。如果不是，则创建一个新的工作线程来执行任务。如果核心线程池里的线程都在执行任务，则进入下个流程。2）线程池判断工作队列是否已经满。如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。3）线程池判断线程池的线程是否都处于工作状态。如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。 对应到代码层面就是ThreadPoolExecutor执行execute()方法。如下图所示： ThreadPoolExecutor执行示意图 1）如果当前运行的线程少于corePoolSize，则创建新线程来执行任务（注意，执行这一步骤需要获取全局锁）。 2）如果运行的线程等于或多于corePoolSize，则将任务加入BlockingQueue。 3）如果无法将任务加入BlockingQueue（队列已满），则创建新的线程来处理任务（注意，执行这一步骤需要获取全局锁）。 4）如果创建新线程将使当前运行的线程超出maximumPoolSize，任务将被拒绝，并调用RejectedExecutionHandler.rejectedExecution()方法。根据不同的拒绝策略去处理。 ThreadPoolExecutor采取上述步骤的总体设计思路，是为了在执行execute()方法时，尽可能地避免获取全局锁（那将会是一个严重的可伸缩瓶颈）。在ThreadPoolExecutor完成预热之后（当前运行的线程数大于等于corePoolSize），几乎所有的execute()方法调用都是执行步骤2，而步骤2不需要获取全局锁。 二、线程池的使用2.1创建线程池我们可以通过ThreadPoolExecutor构造方法来创建一个线程池。 12345678public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)&#123;&#125; 介绍一下这几个参数： 1）corePoolSize（线程池的基本大小）：当提交一个任务到线程池时，如果当前poolSize&lt;corePoolSize时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池基本大小时就不再创建。如果调用了线程池的prestartAllCoreThreads()方法，线程池会提前创建并启动所有基本线程。 2）maximumPoolSize（线程池最大数量）：线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。值得注意的是，如果使用了无界的任务队列这个参数就没什么效果。 3）keepAliveTime（线程活动保持时间）：线程池的工作线程空闲后，保持存活的时间。所以，如果任务很多，并且每个任务执行的时间比较短，可以调大时间，提高线程的利用率。 4）TimeUnit（线程活动保持时间的单位）：可选的单位有天（DAYS）、小时（HOURS）、分钟（MINUTES）、毫秒（MILLISECONDS）、微秒（MICROSECONDS，千分之一毫秒）和纳秒（NANOSECONDS，千分之一微秒）。 5）runnableTaskQueue（任务队列）：用于保存等待执行的任务的阻塞队列。可以选择以下几个阻塞队列。 ArrayBlockingQueue：是一个基于数组结构的有界阻塞队列，此队列按FIFO（先进先出）原则对元素进行排序。 LinkedBlockingQueue：一个基于链表结构的阻塞队列，此队列按FIFO排序元素，吞吐量通常要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool()使用了这个队列。 SynchronousQueue：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于Linked-BlockingQueue，静态工厂方法Executors.newCachedThreadPool使用了这个队列。 PriorityBlockingQueue：一个具有优先级的无限阻塞队列。 6）ThreadFactory：用于设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。使用开源框架guava提供的ThreadFactoryBuilder可以快速给线程池里的线 程设置有意义的名字，代码如下。 new ThreadFactoryBuilder().setNameFormat(&quot;XX-task-%d&quot;).build(); 7）RejectedExecutionHandler（饱和策略）：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。这个策略默认情况下是AbortPolicy，表示无法处理新任务时抛出异常。在JDK 1.5中Java线程池框架提供了以下4种策略。 AbortPolicy：直接抛出异常。 CallerRunsPolicy：只用调用者所在线程来运行任务。 DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。 DiscardPolicy：不处理，丢弃掉。 当然，也可以根据应用场景需要来实现RejectedExecutionHandler接口自定义策略。如记录日志或持久化存储不能处理的任务。 2.2向线程池提交任务可以使用两个方法向线程池提交任务，分别为`execute()`和`submit()`方法。这两个方法的区别就是，execute()用于提交不需要返回值的任务，submit()方法用于提交需要返回值的任务。 execute方法：​ execute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功。通过以下代码可知execute()方法输入的任务是一个Runnable类的实例。 123456threadsPool.execute(new Runnable() &#123; @Override public void run() &#123; // TODO Auto-generated method stub &#125;&#125;); submit方法：​ 线程池会返回一个future类型的对象，通过这个future对象可以判断任务是否执行成功，并且可以通过future的get()方法来获取返回值，get()方法会阻塞当前线程直到任务完成，而使用get（long timeout，TimeUnit unit）方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。 1234567891011Future&lt;Object&gt; future = executor.submit(haveReturnValuetask);try &#123; Object s = future.get();&#125; catch (InterruptedException e) &#123; // 处理中断异常&#125; catch (ExecutionException e) &#123; // 处理无法执行任务异常&#125; finally &#123; // 关闭线程池executor.shutdown();&#125; 2.3关闭线程池可以通过调用线程池的shutdown或shutdownNow方法来关闭线程池。它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。但是它们存在一定的区别，shutdownNow首先将线程池的状态设置成STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表，而shutdown只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。 只要调用了这两个关闭方法中的任意一个，isShutdown方法就会返回true。当所有的任务都已关闭后，才表示线程池关闭成功，这时调用isTerminaed方法会返回true。至于应该调用哪一种方法来关闭线程池，应该由提交到线程池的任务特性决定，通常调shutdown方法来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow方法。 2.4实例Demo（1）首先构造一个线程池，用ArrayBlockingQueue作为其等待队列，队列初始化容量为1。该线程池核心容量为 10，最大容量为20，线程存活时间为1分钟。 12static BlockingQueue blockingQueue=new ArrayBlockingQueue&lt;&gt;(1);static ThreadPoolExecutor threadPoolExecutor=new ThreadPoolExecutor(10, 20, 1, TimeUnit.MINUTES, blockingQueue); （2）另外构造了一个实现Runable接口的类TaskBusyWithoutResult类，其模拟一个繁忙的任务： 12345678910111213static class TaskBusyWithoutResult implements Runnable &#123; public TaskBusyWithoutResult() &#123; &#125; @Override public void run() &#123; System.out.println("线程"+Thread.currentThread()+"开始运行"); int i=10000*10000; while(i&gt;0) &#123; i--; &#125; System.out.println("线程"+Thread.currentThread()+"运行结束"); &#125;&#125; （3）向线程池提交20个任务，执行任务 123456public static void main(String[] args) &#123; for (int i = 0; i &lt; 20; i++) &#123; Runnable runnable = new TaskBusyWithoutResult(); threadPoolExecutor.submit(runnable); &#125;&#125; 三、线程池源码分析基于jdk1.8 3.1 认识几个变量123456789101112131415private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));private static final int COUNT_BITS = Integer.SIZE - 3;private static final int CAPACITY = (1 &lt;&lt; COUNT_BITS) - 1;// runState is stored in the high-order bitsprivate static final int RUNNING = -1 &lt;&lt; COUNT_BITS;private static final int SHUTDOWN = 0 &lt;&lt; COUNT_BITS;private static final int STOP = 1 &lt;&lt; COUNT_BITS;private static final int TIDYING = 2 &lt;&lt; COUNT_BITS;private static final int TERMINATED = 3 &lt;&lt; COUNT_BITS;// Packing and unpacking ctlprivate static int runStateOf(int c) &#123; return c &amp; ~CAPACITY; &#125;private static int workerCountOf(int c) &#123; return c &amp; CAPACITY; &#125;private static int ctlOf(int rs, int wc) &#123; return rs | wc; &#125; 后面execute方法会用到ctl，这个变量是为了把工作线程数量和线程池状态放在一个int型变量存储而设置的一个原子类型的变量。 在ctl中，低位的29位表示工作线程的数量，高位用来表示RUNNING、SHUTDOWN、STOP等状态。上面定义的三个方法只是为了计算得到线程池的状态和工作线程的数量，以及得到ctl。 3.2 execute()方法1234567891011121314151617181920212223242526public void execute(Runnable command) &#123; //如果提交了空的任务 抛出异常 if (command == null) throw new NullPointerException(); int c = ctl.get();//获取当前线程池的状态 //检查当前工作线程数量是否小于核心线程数量 if (workerCountOf(c) &lt; corePoolSize) &#123; //通过addWorker方法提交任务 if (addWorker(command, true)) return; c = ctl.get();//如果提交失败 需要二次检查状态 &#125; //向工作线程提交任务 if (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123; // 再次检查状态 int recheck = ctl.get(); if (! isRunning(recheck) &amp;&amp; remove(command)) reject(command); else if (workerCountOf(recheck) == 0) addWorker(null, false); &#125; //扩容失败 则拒绝任务 else if (!addWorker(command, false)) reject(command);&#125; 这里面有些细节： （1）if (! isRunning(recheck) &amp;&amp; remove(command))这句。由于&amp;&amp;是短路与，意思就是前面如果非真，后面不会执行。所以如果线程池不是Running状态时，才把现成移出工作队列，再使用饱和策略。 （2）addWorker(command, false)：我们看到有addWorker(command, true)和addWorker(command, false)。true和false分别代表在检查工作线程数量的时候是应该与corePoolSize对比还是应该maximumPoolSize对比。只有第一个if时，也就是当前线程数小于corePoolSize时才用addWorker(command, true)。 3.3 addWorker()方法这个方法是任务提交的一个核心方法。在里面完成了状态检查、新建任务、执行任务等一系列动作。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475private boolean addWorker(Runnable firstTask, boolean core) &#123; retry: //死循环更新状态 for (;;) &#123; int c = ctl.get(); int rs = runStateOf(c);//获取运行状态 //检查线程池是否处于关闭状态 if (rs &gt;= SHUTDOWN &amp;&amp; ! (rs == SHUTDOWN &amp;&amp; firstTask == null &amp;&amp; ! workQueue.isEmpty())) return false; for (;;) &#123; //获取当前工作线程数量 int wc = workerCountOf(c); //如果已经超过corePoolSize获取maximumPoolSize 返回false if (wc &gt;= CAPACITY || wc &gt;= (core ? corePoolSize : maximumPoolSize)) return false; //CAS增加一个工作线程 if (compareAndIncrementWorkerCount(c)) break retry; //再次获取状态 c = ctl.get(); // Re-read ctl //如果状态更新失败 则循环更新 if (runStateOf(c) != rs) continue retry; // else CAS failed due to workerCount change; retry inner loop &#125; &#125; boolean workerStarted = false; boolean workerAdded = false; Worker w = null; try &#123; w = new Worker(firstTask);//初始化一个工作线程 final Thread t = w.thread; if (t != null) &#123; //获得锁 final ReentrantLock mainLock = this.mainLock; mainLock.lock(); try &#123; // Recheck while holding lock. // Back out on ThreadFactory failure or if // shut down before lock acquired. int rs = runStateOf(ctl.get()); if (rs &lt; SHUTDOWN || (rs == SHUTDOWN &amp;&amp; firstTask == null)) &#123; if (t.isAlive()) // precheck that t is startable throw new IllegalThreadStateException(); //添加工作这到hashset中保存 workers.add(w); int s = workers.size(); if (s &gt; largestPoolSize) largestPoolSize = s; workerAdded = true; &#125; &#125; finally &#123; mainLock.unlock(); &#125; if (workerAdded) &#123; //工作线程启动 执行第一个任务 就是新提交的任务 t.start(); workerStarted = true; &#125; &#125; &#125; finally &#123; if (! workerStarted) addWorkerFailed(w); &#125; return workerStarted;&#125; 这个方法可以分为两个阶段来看，第一个阶段是判断是否有必要新增一个工作线程，如果有则利用CAS更新工作线程的数量；第二部分是将提交的任务封装成一个工作线程Worker然后加入到线程池的容器中，开始执行新提交的任务。这个Worker在执行完任务后，还会循环地获取工作队列里的任务来执行。 Worker的构造方法如下： 123456789 /** * Creates with given first task and thread from ThreadFactory. * @param firstTask the first task (null if none) */Worker(Runnable firstTask) &#123; setState(-1); // inhibit interrupts until runWorker this.firstTask = firstTask; this.thread = getThreadFactory().newThread(this);&#125; 3.4 runWorker()方法在addWorker方法快要结束的地方，调用了t.start()方法，我们知道它实际执行的就是Worker对象的run()方法，而worker的run()方法是这样定义的： 1234 /** Delegates main run loop to outer runWorker */public void run() &#123; runWorker(this);&#125; 它实际上是将自己委托给线程池的runWorker方法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647final void runWorker(Worker w) &#123; Thread wt = Thread.currentThread(); Runnable task = w.firstTask; w.firstTask = null; w.unlock(); // allow interrupts boolean completedAbruptly = true; try &#123; //不断地从blockingQueue获取任务 while (task != null || (task = getTask()) != null) &#123; w.lock(); // If pool is stopping, ensure thread is interrupted; // if not, ensure thread is not interrupted. This // requires a recheck in second case to deal with // shutdownNow race while clearing interrupt if ((runStateAtLeast(ctl.get(), STOP) || (Thread.interrupted() &amp;&amp; runStateAtLeast(ctl.get(), STOP))) &amp;&amp; !wt.isInterrupted()) wt.interrupt(); try &#123; //执行beforeExecute方法 beforeExecute(wt, task); Throwable thrown = null; try &#123; //调用Runable的run方法 task.run(); &#125; catch (RuntimeException x) &#123; thrown = x; throw x; &#125; catch (Error x) &#123; thrown = x; throw x; &#125; catch (Throwable x) &#123; thrown = x; throw new Error(x); &#125; finally &#123; // 执行aferExecute方法 afterExecute(task, thrown); &#125; &#125; finally &#123; task = null; w.completedTasks++; w.unlock(); &#125; &#125; completedAbruptly = false; &#125; finally &#123; processWorkerExit(w, completedAbruptly); &#125;&#125; 它在不断执行我们提交的任务的run方法。而这个任务可能是我们新提交的，也有可能是从等待队列中获取的。这样就实现了线程池的完成逻辑。 原文链接]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zxing开源库简单使用]]></title>
    <url>%2Fzxing%E5%88%9B%E5%BB%BA%E4%BA%8C%E7%BB%B4%E7%A0%81.html</url>
    <content type="text"><![CDATA[一、使用开源库ZxingZxing官网 二、导入Zxing-Core和Zxing-JavaSe1234// https://mvnrepository.com/artifact/com.google.zxing/javasecompile group: 'com.google.zxing', name: 'javase', version: '3.3.3'// https://mvnrepository.com/artifact/com.google.zxing/corecompile group: 'com.google.zxing', name: 'core', version: '3.3.3' 三、创建二维码1234567891011121314151617181920212223public class CreateQRCode &#123; public static void main(String[] args) &#123; int width=300;//定义二维码的长宽 int height=300; String formt="png";//图片格式 String contents="www.baidu.com"; //定义二维码的参数 HashMap&lt;EncodeHintType,Object&gt; hints=new HashMap&lt;EncodeHintType,Object&gt;(); hints.put(EncodeHintType.CHARACTER_SET,"utf-8");//指定二维码的编码格式 hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M);//指定二维码的纠错等级,纠错等级越高,则存储的信息越少,一般是指定M级 hints.put(EncodeHintType.MARGIN,2);//设置二维码周围的空白 //生成二维码 try &#123; BitMatrix bitMatrix=new MultiFormatWriter().encode(contents, BarcodeFormat.QR_CODE,width,height,hints); Path file=new File("d:/Img.png").toPath();//将指定的二维码图片生成在指定的地方 MatrixToImageWriter.writeToPath(bitMatrix,formt,file); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 四、解析二维码12345678910111213141516171819202122232425262728public static String decode(String imgPath) &#123; try &#123; Reader reader = new MultiFormatReader(); File file = new File(imgPath);//获取该图片文件 BufferedImage image; try &#123; image = ImageIO.read(file); if (null != image) &#123; LuminanceSource source = new BufferedImageLuminanceSource(image); BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source)); Result result; Hashtable hints = new Hashtable();//将图片反解码为二维矩阵 hints.put(DecodeHintType.CHARACTER_SET, "UTF-8"); result = new MultiFormatReader().decode(bitmap, hints);//将该二维矩阵解码成内容 String resultStr = result.getText(); return resultStr; &#125; else &#123; System.out.println("未找到图片,无法解析"); &#125; &#125; catch (IOException | ReaderException ioe) &#123; ioe.printStackTrace(); &#125; &#125; catch (Exception ex) &#123; ex.printStackTrace(); &#125; return "";&#125; QrCodeUtil.java 本文参考]]></content>
      <categories>
        <category>zxing</category>
      </categories>
      <tags>
        <tag>zxing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git添加忽略文件]]></title>
    <url>%2FGit%E6%B7%BB%E5%8A%A0%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6.html</url>
    <content type="text"><![CDATA[一、.gitignore文件每一个git项目都会有.gitignore忽略文件，记录着哪些文件不需要提交到仓库，下面是一个栗子： 1234567891011121314151617181920212223# Compiled class file*.class# Log file*.log# BlueJ files*.ctxt# Mobile Tools for Java (J2ME).mtj.tmp/# Package Files #*.jar*.war*.nar*.ear*.zip*.tar.gz*.rar# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xmlhs_err_pid* 二、使用规则 栗子 说明 *.a 忽略所有以 .a 结尾的文件 !lib.a 但是不忽略 lib.a 文件 /TODO 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO build/ 忽略 build/ 目录下的所有文件 doc/*.txt 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt 三、使用 git status 查看将要提交的文件12345678λ git statusOn branch masterYour branch is up to date with 'origin/master'.Changes to be committed: (use "git reset HEAD &lt;file&gt;..." to unstage) new file: src/main/java/pers/mrxiexie/card/ASD.java 四、使用 git rm 命令当文件已经提交了，再去修改 .gitignore 文件忽略已经提交的文件是无效的，现在就需要用到 git rm 这条命令 1git rm -r --cached node_modules（要删除的文件名） 然后重新 git add 和 git commit 就可以了]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[把项目托管到Github]]></title>
    <url>%2F%E6%8A%8A%E9%A1%B9%E7%9B%AE%E6%89%98%E7%AE%A1%E5%88%B0Github.html</url>
    <content type="text"><![CDATA[一、Github 登录Github官网，注册一个账号~，记录好你的用户名和邮箱，下面配置git要使用到 创建一个新项目 填写相关信息 复制仓库地址，在git配置的第五步会用到~ 二、下载Git 登录Git官网，下载，默认安装即可~ 当然你也可以像我一样使用Cmder，下载FULL版，里面内嵌了git~ 打开命令行窗口，输入如下指令，填写你github账号的名字和邮箱 12git config --global user.name "Your Name"git config --global user.email "email@example.com" 使用cd命令进入你保存项目的地方 使用git clone 命令，拉下你在github上创建的项目地址 查看当前目录，project已经 clone 下来了 进入project目录下，复制以下文件到上一级目录（我的上一级目录为card，也就是项目根路径） 删除project目录 打开命令行，进入项目根路径，依次输入以下指令即可把项目托管到Github上 123git add .git commit -m "此次提交描述" //commit到本地仓库git push origin master //上传到Github远程仓库 登录Github官网，发现我们的项目已经部署到Github上了~]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微容小程序在线生成BUG]]></title>
    <url>%2F%E5%BE%AE%E5%AE%B9%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9C%A8%E7%BA%BF%E7%94%9F%E6%88%90Bug.html</url>
    <content type="text"><![CDATA[一、自由布局 + 图片 图片无法显示 BUG演示 在微容后台能够正常预览，在微信开发者工具显示空白，如下图： 产生原因 应该是自由布局的宽高跟图片的宽高一致，微容自动代码如下 12345678910&lt;view class='free-control YWq5vM' style='height:4724rpx'&gt; &lt;view class='free-item' &gt; //这一行没有指定高度宽度导致，图片宽高为0*0 &lt;form bindsubmit='openEvent' report-submit&gt; &lt;view class="eventBox Img-pic hvFJmv"&gt; &lt;button class="eventBtn"&gt;&lt;/button&gt; &lt;image class="Img T55Qvq" src="https://www.wsmo.cn/attachment/images/3986/2018/08/Ic6aXl5aPzleAEyl6a6qeybql5q5W6.jpg" /&gt; &lt;/view&gt; &lt;/form&gt; &lt;/view&gt;&lt;/view&gt; 解决方案 添加 &lt;view class=&#39;free-item&#39;&gt; 行内样式，指定宽度高度，代码如下 12345678910&lt;view class='free-control HwNV0a' style='height:1702rpx'&gt; &lt;view class='free-item' style="left:0rpx;width:746rpx;top:0rpx;height:1702rpx" &gt; &lt;form bindsubmit='openEvent' report-submit&gt; &lt;view class="eventBox Img-pic Rj50vm"&gt; &lt;button class="eventBtn"&gt;&lt;/button&gt; &lt;image class="Img qnmJDb" src="https://www.wsmo.cn/attachment/images/3986/2018/08/WZJN9F8pPXf76x6986ma92CkfA18l6.jpg" /&gt; &lt;/view&gt; &lt;/form&gt; &lt;/view&gt;&lt;/view&gt; 二、购车计算器，贷款项出现NaN BUG演示 产生原因 在carCalculator.js中 12345678910111213141516171819202122232425CarCalculatorInit() &#123; let that = this let configuration_id = that.data.id app.request(&#123; url: 'car/getRatio', data: &#123; configuration_id &#125;, success(res) &#123; let price = parseInt(res.result.list.guide_price) //res.result.rate 应该返回是首付比例的数组，例[30, 50]，可是微容返回了false，导致出现NaN let annualInterestRate = parseFloat(res.result.rate[0]) let payment_ratio = parseInt(res.result.ratio[0]) that.setData(&#123; result: res.result, price: price, ratio: res.result.ratio, rate: res.result.rate, annualInterestRate, payment_ratio &#125;) that.countPrice() &#125; &#125;)&#125;, 解决方法 修改carCalculator.js代码如下 12345678910111213141516171819202122232425CarCalculatorInit() &#123; let that = this let configuration_id = that.data.id app.request(&#123; url: 'car/getRatio', data: &#123; configuration_id &#125;, success(res) &#123; let price = parseInt(res.result.list.guide_price) let annualInterestRate = parseFloat(res.result.rate[0]) let ratio = [30, 50] //修改首付比例即可~ let payment_ratio = parseInt(ratio[0]) that.setData(&#123; result: res.result, price: price, ratio, rate: res.result.rate, annualInterestRate, payment_ratio &#125;) that.countPrice() &#125; &#125;)&#125;]]></content>
      <categories>
        <category>微容</category>
      </categories>
      <tags>
        <tag>微容</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[魁北克小程序二次开发]]></title>
    <url>%2F%E9%AD%81%E5%8C%97%E5%85%8B%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91.html</url>
    <content type="text"><![CDATA[请输入密码 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>微容</category>
      </categories>
      <tags>
        <tag>微容</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring学习笔记]]></title>
    <url>%2FSpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[一、Spring简介Spring是什么 Spring是一个开源框架 Spring 为简化企业级应用开发而生. 使用 Spring 可以使简单的 JavaBean 实现以前只有 EJB 才能实现的功能. Spring 是一个 IOC(DI) 和 AOP 容器框架 具体描述 轻量级：Spring 是非侵入性的 - 基于 Spring 开发的应用中的对象可以不依赖于 Spring 的 API 依赖注入(DI — dependency injection、IOC) 面向切面编程(AOP — aspect oriented programming) 容器: Spring 是一个容器, 因为它包含并且管理应用对象的生命周期 框架: Spring 实现了使用简单的组件配置组合成一个复杂的应用. 在 Spring 中可以使用 XML 和 Java 注解组合这些对象 一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库 （实际上 Spring 自身也提供了展现层的 SpringMVC 和 持久层的 Spring JDBC） Spring模块 搭建Spring开发环境 把以下 jar 包加入到工程的 classpath 下: Spring 的配置文件: 一个典型的 Spring 项目需要创建一个或多个 Bean 配置文件, 这些配置文件用于在 Spring IOC 容器里配置 Bean. Bean 的配置文件可以放在 classpath 下, 也可以放在其它目录下. IOC 和 DI IOC IOC(Inversion of Control)：其思想是反转资源获取的方向. 传统的资源查找方式要求组件向容器发起请求查找资源. 作为回应, 容器适时的返回资源. 而应用了 IOC 之后, 则是容器主动地将资源推送给它所管理的组件, 组件所要做的仅是选择一种合适的方式来接受资源. 这种行为也被称为查找的被动形式 DI DI(Dependency Injection) — IOC 的另一种表述方式：即组件以一些预先定义好的方式(例如: setter 方法)接受来自如容器的资源注入. 相对于 IOC 而言，这种表述更直接 二、配置 bean 配置形式：基于 XML 文件的方式；基于注解的方式 Bean 的配置方式：通过全类名（反射）、通过工厂方法（静态工厂方法 &amp; 实例工厂方法）、FactoryBean IOC 容器 BeanFactory &amp; ApplicationContext 概述 依赖注入的方式：属性注入；构造器注入 注入属性值细节 自动转配 bean 之间的关系：继承；依赖 bean 的作用域：singleton；prototype；WEB 环境作用域 使用外部属性文件 spEL IOC 容器中 Bean 的生命周期 Spring 4.x 新特性：泛型依赖注入 三、在 Spring 的 IOC 容器里配置 Bean(XML)（1）通过全类名（反射）123&lt;bean class="pers.mrxiexie.spring.HelloWorld" id="helloWorld"&gt; &lt;property name="name" value="MrXieXie"/&gt;&lt;/bean&gt; id为bean的名称，必须全局唯一 若 id 没有指定，Spring 自动将权限定性类名作为 Bean 的名字 class为bena的全类名（2）通过调用静态工厂方法 调用静态工厂方法创建 Bean是将对象创建的过程封装到静态方法中. 当客户端需要对象时, 只需要简单地调用静态方法, 而不同关心创建对象的细节. 要声明通过静态方法创建的 Bean, 需要在 Bean 的 class 属性里指定拥有该工厂的方法的类, 同时在 factory-method 属性里指定工厂方法的名称. 最后, 使用 元素为该方法传递方法参数.12345678910111213public class CarStaticFactory &#123; private static Map&lt;String, Car&gt; cars = new HashMap&lt;&gt;(); static &#123; cars.put("AAA", new Car("AAA", "奥迪")); cars.put("BBB", new Car("BBB", "奔驰")); &#125; public static Car getInstance(String name)&#123; return cars.get(name); &#125;&#125; 12345678910&lt;!-- 使用静态工厂方法创建bean class 是对应静态工厂方法所在的类 factory-method 为对应的静态工厂方法 constructor 填写该工厂方法的参数--&gt;&lt;bean id="car" class="pers.mrxiexie.spring.factory.CarStaticFactory" factory-method="getInstance" &gt; &lt;constructor-arg name="name" value="AAA"/&gt;&lt;/bean&gt; （3）通过调用实例工厂方法 实例工厂方法: 将对象的创建过程封装到另外一个对象实例的方法里. 当客户端需要请求对象时, 只需要简单的调用该实例方法而不需要关心对象的创建细节. 要声明通过实例工厂方法创建的 Bean 在 bean 的 factory-bean 属性里指定拥有该工厂方法的 Bean 在 factory-method 属性里指定该工厂方法的名称 使用 construtor-arg 元素为工厂方法传递方法参数1234567891011121314public class CarInstanceFactory &#123; private Map&lt;String,Car&gt; cars; public CarInstanceFactory()&#123; cars = new HashMap&lt;&gt;(); cars.put("AAA", new Car("AAA", "奥迪")); cars.put("BBB", new Car("BBB", "奔驰")); &#125; public Car getInstance(String name)&#123; return cars.get(name); &#125;&#125; 123456789101112131415&lt;beans&gt; &lt;!-- 使用实例工厂方法创建bean 1、先创建实例工厂方法所在类的bean 2、在 bean 的 factory-bean 属性里指定拥有该工厂方法的 Bean 3、在 factory-method 属性里指定该工厂方法的名称 4、使用 construtor-arg 元素为工厂方法传递方法参数 --&gt; &lt;bean class="pers.mrxiexie.spring.factory.CarInstanceFactory" id="instanceFactory"/&gt; &lt;bean id="car1" factory-bean="instanceFactory" factory-method="getInstance"&gt; &lt;constructor-arg name="name" value="BBB"/&gt; &lt;/bean&gt;&lt;/beans&gt; （4）FactoryBean 接口 Spring 中有两种类型的 Bean, 一种是普通Bean, 另一种是工厂Bean, 即FactoryBean. 工厂 Bean 跟普通Bean不同, 其返回的对象不是指定类的一个实例, 其返回的是该工厂 Bean 的 getObject 方法所返回的对象 12345678910111213141516171819202122public class CarFactoryBean implements FactoryBean&lt;Car&gt; &#123; //返回实例 @Override public Car getObject() throws Exception &#123; Car car2 = new Car("CCC","林肯"); return car2; &#125; //返回类型 @Override public Class&lt;?&gt; getObjectType() &#123; return Car.class; &#125; //是否单例 @Override public boolean isSingleton() &#123; return true; &#125;&#125; 1234&lt;!-- 通过 实现FactoryBean接口创建bean--&gt;&lt;bean id="car2" class="pers.mrxiexie.spring.factory.CarFactoryBean"/&gt; 四、Spring的IOC容器 Spring提供了两种IOC容器的实现分别为 BeanFactory 和 ApplicationContext BeanFactory是基础类型IOC容器，面向Spring本身 ApplicationContext是BeanFactory的子接口，面向Spring框架的开发者 注：几乎所有的应用场合都直接使用 ApplicationContext 而非底层的 BeanFactory （1）ApplicationContext ApplicationContext的主要实现类是 ClassPathXmlApplicationContext 和 FileSystemXmlApplicationContext ClassPathXmlApplicationContext：从类路径下加载配置文件 FileSystemXmlApplicationContext：从文件系统中加载配置文件 ConfigurableApplicationContext：扩展于 ApplicationContext，新增加两个主要方法：refresh() 和 close()， 让 ApplicationContext 具有启动、刷新和关闭上下文的能力 WebApplicationContext 是专门为 WEB 应用而准备的，它允许从相对于 WEB 根目录的路径中完成初始化工作 ApplicationContext 在初始化上下文时就实例化所有单例的 Bean （2）依赖注入的方式 Spring 支持 3 种依赖注入的方式：属性注入、构造器注入和工厂方法注入（很少使用，不推荐） 1、属性注入 属性注入使用 &lt;property&gt; 元素, 使用 name 属性指定 Bean 的属性名称，value 属性或 &lt;value&gt;子节点指定属性值 123&lt;bean class="pers.mrxiexie.spring.HelloWorld" id="helloWorld"&gt; &lt;property name="name" value="MrXieXie"/&gt;&lt;/bean&gt; 2、构造方法注入 构造器注入在 元素里声明属性, 中没有 name 属性，按 index 索引或 type 类型入参 12345&lt;bean class="pers.mrxiexie.spring.Car" id="car"&gt; &lt;constructor-arg value="company" index="0"/&gt; &lt;constructor-arg value="brand" index="1"/&gt; &lt;constructor-arg value="1" index="2"/&gt;&lt;/bean&gt; （3）注入属性细节1、字面量 字面值：可用字符串表示的值，可以通过&lt;value&gt;元素标签或 value 属性进行注入 基本数据类型及其封装类、String 等类型都可以采取字面值注入的方式 若字面值中包含特殊字符，可以使用 &lt;![CDATA[]]&gt; 把字面值包裹起来123456&lt;bean class="pers.mrxiexie.spring.Car" id="car3"&gt; ... &lt;constructor-arg&gt; &lt;value&gt;&lt;![CDATA[&lt;ATARZA&gt;]]&gt;&lt;/value&gt; &lt;/constructor-arg&gt;&lt;/bean&gt; 2、引用其它 Bean 组成应用程序的 Bean 经常需要相互协作以完成应用程序的功能. 要使 Bean 能够相互访问, 就必须在 Bean 配置文件中指定对 Bean 的引用 在 Bean 的配置文件中, 可以通过 &lt;ref&gt;元素或 ref 属性为 Bean 的属性或构造器参数指定对 Bean 的引用. 也可以在属性或构造器里包含 Bean 的声明, 这样的 Bean 称为内部 Bean12345678&lt;beans&gt; &lt;bean class="pers.mrxiexie.spring.Car" id="car"&gt; &lt;constructor-arg value="company"/&gt; &lt;/bean&gt; &lt;bean class="pers.mrxiexie.spring.Person" id="person"&gt; &lt;property name="car" ref="car"/&gt; &lt;/bean&gt;&lt;/beans&gt; 3、内部 Bean 当 Bean 实例仅仅给一个特定的属性使用时, 可以将其声明为内部 Bean. 内部 Bean 声明直接包含在 &lt;property&gt; 或 元素里, 不需要设置任何 id 或 name 属性 内部 Bean 不能使用在任何其他地方1234567&lt;bean class="pers.mrxiexie.spring.Person" id="person2"&gt; &lt;property name="car"&gt; &lt;bean class="pers.mrxiexie.spring.Car"&gt; &lt;constructor-arg value="1" type="float"/&gt; &lt;/bean&gt; &lt;/property&gt;&lt;/bean&gt; 4、注入参数详解：null 值和级联属性 可以使用专用的 &lt;null/&gt; 元素标签为 Bean 的字符串或其它对象类型的属性注入 null 值 和 Struts、Hiberante 等框架一样，Spring 支持级联属性的配置。 12345678&lt;bean class="pers.mrxiexie.spring.Person" id="person3"&gt; &lt;!-- null值 --&gt; &lt;property name="name"&gt;&lt;null/&gt;&lt;/property&gt; &lt;property name="age" value="10"/&gt; &lt;property name="car" ref="car"/&gt; &lt;!-- 级联睡醒 --&gt; &lt;property name="car.company" value="pppppppppp"/&gt;&lt;/bean&gt; 5、集合属性 在 Spring中可以通过一组内置的 xml 标签(例如: &lt;list&gt;, &lt;set&gt; 或 &lt;map&gt;) 来配置集合属性. 配置 java.util.List 类型的属性, 需要指定 &lt;list&gt; 标签, 在标签里包含一些元素. 这些标签可以通过&lt;value&gt; 指定简单的常量值, 通过 &lt;ref&gt; 指定对其他 Bean 的引用. 通过&lt;bean&gt; 指定内置 Bean 定义. 通过 &lt;null/&gt; 指定空元素. 甚至可以内嵌其他集合. 数组的定义和 List 一样, 都使用 &lt;list&gt; 配置 java.util.Set 需要使用 &lt;set&gt; 标签, 定义元素的方法与 List 一样. Java.util.Map 通过 &lt;map&gt; 标签定义, &lt;map&gt; 标签里可以使用多个 &lt;entry&gt; 作为子标签. 每个条目包含一个键和一个值. 必须在 &lt;key&gt; 标签里定义键 因为键和值的类型没有限制, 所以可以自由地为它们指定 &lt;value&gt;, &lt;ref&gt;, &lt;bean&gt; 或 &lt;null&gt; 元素. 可以将 Map 的键和值作为 &lt;entry&gt; 的属性定义: 简单常量使用 key 和 value 来定义; Bean 引用通过 key-ref 和 value-ref 属性定义 使用 &lt;props&gt; 定义 java.util.Properties, 该标签使用多个 &lt;prop&gt; 作为子标签. 每个 &lt;prop&gt; 标签必须定义 key 属性. 12345678910111213141516171819202122232425262728293031&lt;beans&gt; &lt;bean class="pers.mrxiexie.spring.Person" id="person4"&gt; ... &lt;property name="cars"&gt; &lt;list&gt; &lt;ref bean="car2"/&gt; &lt;ref bean="car3"/&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- bean 中使用 map --&gt; &lt;bean class="pers.mrxiexie.spring.Person" id="person5"&gt; &lt;property name="map"&gt; &lt;map&gt; &lt;entry key="AA" value-ref="car"/&gt; &lt;entry key="BB" value-ref="car2"/&gt; &lt;/map&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- bean中使用properties --&gt; &lt;bean class="pers.mrxiexie.spring.DataSource" id="dataSource"&gt; &lt;property name="properties"&gt; &lt;props&gt; &lt;prop key="user"&gt;user&lt;/prop&gt; &lt;prop key="age"&gt;1&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt; 5、使用 utility scheme 定义集合 使用基本的集合标签定义集合时, 不能将集合作为独立的 Bean 定义, 导致其他 Bean 无法引用该集合, 所以无法在不同 Bean 之间共享集合. 可以使用 util schema 里的集合标签定义独立的集合 Bean. 需要注意的是, 必须在 &lt;beans&gt; 根元素里添加 util schema 定义12345&lt;!-- bean 中使用集合 List --&gt;&lt;util:list id="cars"&gt; &lt;ref bean="car2"/&gt; &lt;ref bean="car3"/&gt;&lt;/util:list&gt; 6、使用 p 命名空间 为了简化 XML 文件的配置，越来越多的 XML 文件采用属性而非子元素配置信息。 Spring 从 2.5 版本开始引入了一个新的 p 命名空间，可以通过&lt;bean&gt; 元素属性的方式配置 Bean 的属性。 使用 p 命名空间后，基于 XML 的配置方式将进一步简化12&lt;bean class="pers.mrxiexie.spring.Car" id="car4" p:company="Mr" p:price="100" p:brand="brand" p:maxSpeed="100"/&gt; （4）自动装配1、XML 配置里的 Bean 自动装配 Spring IOC 容器可以自动装配 Bean. 需要做的仅仅是在 &lt;bean&gt; 的 autowire 属性里指定自动装配的模式 byType(根据类型自动装配): 若 IOC 容器中有多个与目标 Bean 类型一致的 Bean. 在这种情况下, Spring 将无法判定哪个 Bean 最合适该属性, 所以不能执行自动装配. byName(根据名称自动装配): 必须将目标 Bean 的名称和属性名设置的完全相同. constructor(通过构造器自动装配): 当 Bean 中存在多个构造器时, 此种自动装配方式将会很复杂. 不推荐使用123456&lt;beans&gt; &lt;!--使用 bean 的 autoWire 属性进行自动装载 byName 通过id装载--&gt; &lt;bean class="pers.mrxiexie.spring.auto.NewPerson" id="person" autowire="byName"/&gt; &lt;!--使用 bean 的 autoWire 属性进行自动装载 byType 通过type装载(若有多个相同类型则会报错)--&gt; &lt;bean class="pers.mrxiexie.spring.auto.NewPerson" id="person2" autowire="byType"/&gt;&lt;/beans&gt; （5）Bean之间的关系：继承和依赖1、继承Bean配置 Spring 允许继承 bean 的配置, 被继承的 bean 称为父 bean. 继承这个父 Bean 的 Bean 称为子 Bean 子 Bean 从父 Bean 中继承配置, 包括 Bean 的属性配置 子 Bean 也可以覆盖从父 Bean 继承过来的配置 父 Bean 可以作为配置模板, 也可以作为 Bean 实例. 若只想把父 Bean 作为模板, 可以设置 &lt;bean&gt;的abstract 属性为 true, 这样 Spring 将不会实例化这个 Bean 并不是 &lt;bean&gt; 元素里的所有属性都会被继承. 比如: autowire, abstract 等. 也可以忽略父 Bean 的 class 属性, 让子 Bean 指定自己的类, 而共享相同的属性配置. 但此时 abstract 必须设为 true123456789101112&lt;beans&gt; &lt;bean class="pers.mrxiexie.spring.Car" id="car1"&gt; &lt;property name="price" value="100"/&gt; &lt;property name="maxSpeed" value="100"/&gt; &lt;property name="brand" value="brand"/&gt; &lt;property name="company" value="company"/&gt; &lt;/bean&gt; &lt;bean id="car2" parent="car1"&gt; &lt;property name="maxSpeed" value="10000"/&gt; &lt;/bean&gt;&lt;/beans&gt; 2、依赖 Bean 配置 Spring 允许用户通过 depends-on 属性设定 Bean 前置依赖的Bean，前置依赖的 Bean 会在本 Bean 实例化之前创建好 如果前置依赖于多个 Bean，则可以通过逗号，空格或的方式配置 Bean 的名称123456789101112&lt;!-- bean 的依赖，Spring 允许用户通过 depends-on 属性设定 Bean 前置依赖的Bean，前置依赖的 Bean 会在本 Bean 实例化之前创建好 初始化顺序 car4 -&gt; car3--&gt;&lt;beans&gt; &lt;bean id="car3" parent="car1" depends-on="car4"&gt; &lt;property name="company" value="car3"/&gt; &lt;/bean&gt; &lt;bean id="car4" parent="car1"&gt; &lt;property name="company" value="car4"/&gt; &lt;/bean&gt;&lt;/beans&gt; （6）Bean 的作用域 Bean的作用域有四种，分别为：singleton、prototype、request 和 session 在 Spring 中, 可以在 &lt;bean&gt; 元素的 scope 属性里设置 Bean 的作用域. 默认情况下, Spring 只为每个在 IOC 容器里声明的 Bean 创建唯一一个实例, 整个 IOC 容器范围内都能共享该实例：所有后续的 getBean() 调用和 Bean 引用都将返回这个唯一的 Bean 实例.该作用域被称为 singleton, 它是所有 Bean 的默认作用域. 类别 说明 singleton 在SpringIOC容器中仅存在一个Bean实例，Bean以单实例的方式存在 prototype 每次调用getBean() 时都会返回一个新的实例 request 每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境 session 同一个HttpSession共享一个Bean，不同的HTTP Session使用不同的Bean，该作用域仅适用于WebApplicationContext环境 （7）使用外部属性文件 在配置文件里配置 Bean 时, 有时需要在 Bean 的配置里混入系统部署的细节信息(例如: 文件路径, 数据源配置信息等). 而这些部署细节实际上需要和 Bean 配置相分离 Spring 提供了一个 PropertyPlaceholderConfigurer 的 BeanFactory 后置处理器, 这个处理器允许用户将 Bean 配置的部分内容外移到属性文件中. 可以在 Bean 配置文件里使用形式为 ${var} 的变量, PropertyPlaceholderConfigurer 从属性文件里加载属性, 并使用这些属性来替换变量. Spring 还允许在属性文件中使用 ${propName}，以实现属性之间的相互引用。 Spring 2.5 之后: 可通过 context:property-placeholder 元素简化:&lt;beans&gt; 中添加 context Schema 定义在配置文件中加入如下配置:12345678910111213&lt;beans&gt; &lt;!-- 使用外部配置文件，可以在 Bean 配置文件里使用形式为 $&#123;var&#125; 的变量 --&gt; &lt;context:property-placeholder location="jdbc.properties"/&gt; &lt;bean class="com.mchange.v2.c3p0.ComboPooledDataSource" id="source"&gt; &lt;property name="driverClass" value="$&#123;driver&#125;"/&gt; &lt;property name="user" value="$&#123;user&#125;"/&gt; &lt;property name="password" value="$&#123;password&#125;"/&gt; &lt;property name="jdbcUrl" value="$&#123;url&#125;"/&gt; &lt;/bean&gt;&lt;/beans&gt; （8）Spring表达式语言：SpEL Spring 表达式语言（简称SpEL）：是一个支持运行时查询和操作对象图的强大的表达式语言。 语法类似于 EL：SpEL 使用 #{…} 作为定界符，所有在大框号中的字符都将被认为是 SpEL SpEL 为 bean 的属性进行动态赋值提供了便利 通过 SpEL 可以实现： 通过 bean 的 id 对 bean 进行引用 调用方法以及引用对象中的属性 计算表达式的值 正则表达式的匹配 1、字面量 整数：&lt;property name=&quot;count&quot; value=&quot;#{5}&quot;/&gt; 小数：&lt;property name=&quot;frequency&quot; value=&quot;#{89.7}&quot;/&gt; 科学计数法：&lt;property name=&quot;capacity&quot; value=&quot;#{1e4}&quot;/&gt; String可以使用单引号或者双引号作为字符串的定界符号：&lt;property name=“name” value=&quot;#{&#39;Chuck&#39;}&quot;/&gt; 或 &lt;property name=&#39;name&#39; value=&#39;#{&quot;Chuck&quot;}&#39;/&gt; Boolean：&lt;property name=&quot;enabled&quot; value=&quot;#{false}&quot;/&gt; 2、引用 Bean、属性和方法 引用其他对象&lt;property name=&quot;car&quot; ref=&quot;#{car}&quot;/&gt; 引用其他对象的属性&lt;property name=&quot;carName&quot; value=&quot;#{car.name}&quot;/&gt; 调用其他方法，还可以链式操作&lt;property name=&quot;carName&quot; value=&quot;#{car.toString()}&quot;/&gt; 调用静态方法或静态属性&lt;property name=&quot;price&quot; value=&quot;#{T(Math).random() != 0 ? 100000.0 : 0.0 } &quot;/&gt; 3、运算符号 算数运算符：+, -, *, /, %, ^： 加号还可以用作字符串连接： 比较运算符： &lt;, &gt;, ==, &lt;=, &gt;=, lt, gt, eq, le, ge 逻辑运算符号： and, or, not, | if-else 运算符：?: (ternary), ?: (Elvis) if-else 的变体 正则表达式：matches （9）IOC 容器中 Bean 的生命周期方法 Spring IOC 容器可以管理 Bean 的生命周期, Spring 允许在 Bean 生命周期的特定点执行定制的任务. Spring IOC 容器对 Bean 的生命周期进行管理的过程: 通过构造器或工厂方法创建 Bean 实例 为 Bean 的属性设置值和对其他 Bean 的引用 调用 Bean 的初始化方法 Bean 可以使用了 当容器关闭时, 调用 Bean 的销毁方法 在 Bean 的声明里设置 init-method 和 destroy-method 属性, 为 Bean 指定初始化和销毁方法. 12345&lt;!-- 在 Bean 的声明里设置 init-method 和 destroy-method 属性, 为 Bean 指定初始化和销毁方法.--&gt;&lt;bean class="pers.mrxiexie.spring.life.Person" id="person" p:name="MrXieXie" init-method="init" destroy-method="destroy"/&gt; 创建 Bean 后置处理器 Bean 后置处理器允许在调用初始化方法前后对 Bean 进行额外的处理. Bean 后置处理器对 IOC 容器里的所有 Bean 实例逐一处理, 而非单一实例. 其典型应用是: 检查 Bean 属性的正确性或根据特定的标准更改 Bean 的属性. 对Bean 后置处理器而言, 需要实现接口. 在初始化方法被调用前后, Spring 将把每个 Bean 实例分别传递给上述接口的以下两个方法:123456789101112public class MyBeanPostProcessor implements BeanPostProcessor &#123; @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123; return bean; &#125; @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123; return bean; &#125;&#125; 添加 Bean 后置处理器后 Bean 的生命周期，Spring IOC 容器对 Bean 的生命周期进行管理的过程: 通过构造器或工厂方法创建 Bean 实例 为 Bean 的属性设置值和对其他 Bean 的引用 将 Bean 实例传递给 Bean 后置处理器的 postProcessBeforeInitialization 方法 调用 Bean 的初始化方法 将 Bean 实例传递给 Bean 后置处理器的 postProcessAfterInitialization方法 Bean 可以使用了 当容器关闭时, 调用 Bean 的销毁方法 五、在 Spring 的 IOC 容器里配置 Bean(Annotation)（1）在 classpath 中扫描组件 组件扫描(component scanning): Spring 能够从 classpath 下自动扫描, 侦测和实例化具有特定注解的组件. 特定组件包括: @Component: 基本注解, 标识了一个受 Spring 管理的组件 @Respository: 标识持久层组件 @Service: 标识服务层(业务层)组件 @Controller: 标识表现层组件 对于扫描到的组件, Spring 有默认的命名策略: 使用非限定类名, 第一个字母小写. 也可以在注解中通过 value 属性值标识组件的名称 当在组件类上使用了特定的注解之后, 还需要在 Spring 的配置文件中声明 context:component-scan ： base-package 属性指定一个需要扫描的基类包，Spring 容器将会扫描这个基类包里及其子包中的所有类. 当需要扫描多个包时, 可以使用逗号分隔. 如果仅希望扫描特定的类而非基包下的所有类，可使用 resource-pattern 属性过滤特定的类， context:include-filter 子节点表示要包含的目标类 context:exclude-filter 子节点表示要排除在外的目标类 context:component-scan 下可以拥有若干个 context:include-filter 和 context:exclude-filter 子节点1234567891011&lt;context:component-scan base-package="pers.mrxiexie.spring.annotation"&gt; &lt;!-- 不扫描特定注解 --&gt; &lt;!--&lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/&gt;--&gt; &lt;!-- 不扫描特定包名 --&gt; &lt;!--&lt;context:exclude-filter type="assignable" expression="pers.mrxiexie.spring.annotation.controller.UserController"/&gt;--&gt;&lt;/context:component-scan&gt; （2）组件装配 context:component-scan 元素还会自动注册 AutowiredAnnotationBeanPostProcessor 实例, 该实例可以自动装配具有 @Autowired 和 @Resource 、@Inject注解的属性. （3）使用 @Autowired 自动装配 Bean @Autowired 注解自动装配具有兼容类型的单个 Bean属性 构造器, 普通字段(即使是非 public), 一切具有参数的方法都可以应用@Authwired 注解 默认情况下, 所有使用 @Authwired 注解的属性都需要被设置. 当 Spring 找不到匹配的 Bean 装配属性时, 会抛出异常, 若某一属性允许不被设置, 可以设置 @Authwired 注解的 required 属性为 false 默认情况下, 当 IOC 容器里存在多个类型兼容的 Bean 时, 通过类型的自动装配将无法工作. 此时可以在 @Qualifier 注解里提供 Bean 的名称. Spring 允许对方法的入参标注 @Qualifiter 已指定注入 Bean 的名称@Authwired 注解也可以应用在数组类型的属性上, 此时 Spring 将会把所有匹配的 Bean 进行自动装配. @Authwired 注解也可以应用在集合属性上, 此时 Spring 读取该集合的类型信息, 然后自动装配所有与之兼容的 Bean. @Authwired 注解用在 java.util.Map 上时, 若该 Map 的键值为 String, 那么 Spring 将自动装配与之 Map 值类型兼容的 Bean, 此时 Bean 的名称作为键值 （4）使用 @Resource 或 @Inject 自动装配 Bean Spring 还支持 @Resource 和 @Inject 注解，这两个注解和 @Autowired 注解的功用类似 @Resource 注解要求提供一个 Bean 名称的属性，若该属性为空，则自动采用标注处的变量或方法名作为 Bean 的名称 @Inject 和 @Autowired 注解一样也是按类型匹配注入的 Bean， 但没有 reqired 属性 建议使用 @Autowired 注解 五、泛型依赖注入Spring 4.x 中可以为子类注入子类对应的泛型类型的成员变量的引用 看 package pers.mrxiexie.spring.annotation.generic下的示例 六、整合多个资源文件 Spring 允许通过 &lt;import&gt; 将多个配置文件引入到一个文件中，进行配置文件的集成。这样在启动 Spring 容器时，仅需要指定这个合并好的配置文件就可以。 import 元素的 resource 属性支持 Spring 的标准的路径资源 地址前缀 示例 对应资源类型 classpath: classpath:spring-mvc.xml 从类路径下加载资源，classpath:和classpath:/是等价的 file: file:/conf/security/spring-shiro.xml 从文件系统目录中装载资源，可采用绝对或相对路径 http:// http://www.atguigu.com/resource/beans.xml 从WEB服务器中加载资源 ftp:// ftp://www.atguigu.com/resource/bean.xml 从FTP服务器中加载资源 七、Spring AOP代码示例：123456789101112131415@Overridepublic int add(int x, int y) &#123; System.out.println("method add begin x = " + x + " y = " + y); int result = x + y; System.out.println("result : " + result); return result;&#125;@Overridepublic int sub(int x, int y) &#123; System.out.println("method sub begin x = " + x + " y = " + y); int result = x - y; System.out.println("result : " + result); return result;&#125; 问题 代码混乱：越来越多的非业务需求(日志和验证等)加入后, 原有的业务方法急剧膨胀. 每个方法在处理核心逻辑的同时还必须兼顾其他多个关注点. 代码分散: 以日志需求为例, 只是为了满足这个单一需求, 就不得不在多个模块（方法）里多次重复相同的日志代码. 如果日志需求发生变化, 必须修改所有模块. 使用动态代理解决上述问题 代理设计模式的原理: 使用一个代理将对象包装起来, 然后用该代理对象取代原始对象. 任何对原始对象的调用都要通过代理. 代理对象决定是否以及何时将方法调用转到原始对象上. 1、 创建代理类 1234567891011121314151617181920212223public class ArithmeticCalculatorLoggingProxy &#123; private ArithmeticCalculator target; public ArithmeticCalculatorLoggingProxy(ArithmeticCalculator target) &#123; this.target = target; &#125; public ArithmeticCalculator getLoggingProxy() &#123; Class[] interfaces = new Class[]&#123;ArithmeticCalculator.class&#125;; ArithmeticCalculator proxy = (ArithmeticCalculator) Proxy.newProxyInstance(target.getClass().getClassLoader(), interfaces, new InvocationHandler() &#123; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; System.out.println("mehod " + method.getName() + " begin x = " + args[0] + " y = " + args[1]); Object result = method.invoke(target,args); System.out.println("result : " + result); return result; &#125; &#125;); return proxy; &#125;&#125; 2、 测试12345678910111213141516public class Main &#123; public static void main(String[] args) &#123; ArithmeticCalculator calculator = null; calculator = new ArithmeticCalculatorLoggingImpl(); ArithmeticCalculatorLoggingProxy proxy = new ArithmeticCalculatorLoggingProxy(calculator); calculator = proxy.getLoggingProxy(); int result = calculator.add(1, 2); System.out.println(result); result = calculator.div(4, 2); System.out.println(result); &#125;&#125; （1）AOP 简介 AOP(Aspect-Oriented Programming, 面向切面编程): 是一种新的方法论, 是对传统 OOP(Object-Oriented Programming, 面向对象编程) 的补充. AOP 的主要编程对象是切面(aspect), 而切面模块化横切关注点. 在应用 AOP 编程时, 仍然需要定义公共功能, 但可以明确的定义这个功能在哪里, 以什么方式应用, 并且不必修改受影响的类. 这样一来横切关注点就被模块化到特殊的对象(切面)里. AOP 的好处: 每个事物逻辑位于一个位置, 代码不分散, 便于维护和升级 业务模块更简洁, 只包含核心业务代码. （2）AOP 术语 切面(Aspect): 横切关注点(跨越应用程序多个模块的功能)被模块化的特殊对象 通知(Advice): 切面必须要完成的工作 目标(Target): 被通知的对象 代理(Proxy): 向目标对象应用通知之后创建的对象 连接点（Joinpoint）：程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后等。连接点由两个信息确定：方法表示的程序执行点；相对点表示的方位。例如 ArithmethicCalculator#add() 方法执行前的连接点，执行点为 ArithmethicCalculator#add()； 方位为该方法执行前的位置 切点（pointcut）：每个类都拥有多个连接点：例如 ArithmethicCalculator 的所有方法实际上都是连接点，即连接点是程序类中客观存在的事务。AOP 通过切点定位到特定的连接点。类比：连接点相当于数据库中的记录，切点相当于查询条件。切点和连接点不是一对一的关系，一个切点匹配多个连接点，切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。 （3）用 AspectJ 注解声明切面 AspectJ：Java 社区里最完整最流行的 AOP 框架. 在 Spring2.0 以上版本中, 可以使用基于 AspectJ 注解或基于 XML 配置的 AOP 要在 Spring 中声明 AspectJ 切面, 只需要在 IOC 容器中将切面声明为 Bean 实例. 当在 Spring IOC 容器中初始化 AspectJ 切面之后, Spring IOC 容器就会为那些与 AspectJ 切面相匹配的 Bean 创建代理. 在 AspectJ 注解中, 切面只是一个带有 @Aspect 注解的 Java 类. 通知是标注有某种注解的简单的 Java 方法. AspectJ 支持 5 种类型的通知注解: @Before: 前置通知, 在方法执行之前执行 @After: 后置通知, 在方法执行之后执行 @AfterRunning: 返回通知, 在方法返回结果之后执行 @AfterThrowing: 异常通知, 在方法抛出异常之后 @Around: 环绕通知, 围绕着方法执行 （4）利用方法签名编写 AspectJ 切入点表达式 最典型的切入点表达式时根据方法的签名来匹配各种方法: execution com.atguigu.spring.ArithmeticCalculator.(..): 匹配 ArithmeticCalculator 中声明的所有方法,第一个 代表任意修饰符及任意返回值. 第二个 代表任意方法. .. 匹配任意数量的参数. 若目标类与接口与该切面在同一个包中, 可以省略包名. execution public ArithmeticCalculator.(..): 匹配 ArithmeticCalculator 接口的所有公有方法. execution public double ArithmeticCalculator.*(..): 匹配 ArithmeticCalculator 中返回 double 类型数值的方法 execution public double ArithmeticCalculator.*(double, ..): 匹配第一个参数为 double 类型的方法, .. 匹配任意数量任意类型的参数 execution public double ArithmeticCalculator.*(double, double): 匹配参数类型为 double, double 类型的方法. 在 AspectJ 中, 切入点表达式可以通过操作符 &amp;&amp;, ||, ! 结合起来. （5）让通知访问当前连接点的细节可以在通知方法中声明一个类型为 JoinPoint 的参数. 然后就能访问链接细节. 如方法名称和参数值. 1、前置通知 @Before 前置通知:在方法执行之前执行的通知 前置通知使用 @Before 注解, 并将切入点表达式的值作为注解值. 2、后置通知 @After 后置通知是在连接点完成之后执行的, 即连接点返回结果或者抛出异常的时候, 下面的后置通知记录了方法的终止. 一个切面可以包括一个或者多个通知. 3、返回通知 @AfterRunning 无论连接点是正常返回还是抛出异常, 后置通知都会执行 如果只想在连接点返回的时候记录日志, 应使用返回通知代替后置通知. 4、在返回通知中访问连接点的返回值 在返回通知中, 只要将 returning 属性添加到 @AfterReturning 注解中, 就可以访问连接点的返回值. 该属性的值即为用来传入返回值的参数名称. 必须在通知方法的签名中添加一个同名参数. 在运行时, Spring AOP 会通过这个参数传递返回值.原始的切点表达式需要出现在 pointcut 属性中 5、异常通知 只在连接点抛出异常时才执行异常通知 将 throwing 属性添加到 @AfterThrowing 注解中, 也可以访问连接点抛出的异常. Throwable 是所有错误和异常类的超类. 所以在异常通知方法可以捕获到任何错误和异常. 如果只对某种特殊的异常类型感兴趣, 可以将参数声明为其他异常的参数类型. 然后通知就只在抛出这个类型及其子类的异常时才被执行. 6、环绕通知 环绕通知是所有通知类型中功能最为强大的, 能够全面地控制连接点. 甚至可以控制是否执行连接点.对于环绕通知来说, 连接点的参数类型必须是 ProceedingJoinPoint . 它是 JoinPoint 的子接口, 允许控制何时执行, 是否执行连接点. 在环绕通知中需要明确调用 ProceedingJoinPoint 的 proceed() 方法来执行被代理的方法. 如果忘记这样做就会导致通知被执行了, 但目标方法没有被执行. 注意: 环绕通知的方法需要返回目标方法执行之后的结果, 即调用 joinPoint.proceed(); 的返回值, 否则会出现空指针异常 （6）指定切面的优先级 在同一个连接点上应用不止一个切面时, 除非明确指定, 否则它们的优先级是不确定的. 切面的优先级可以通过实现 Ordered 接口或利用 @Order 注解指定. 实现 Ordered 接口, getOrder() 方法的返回值越小, 优先级越高. 若使用 @Order 注解, 序号出现在注解中 （7）重用切入点定义 在编写 AspectJ 切面时, 可以直接在通知注解中书写切入点表达式. 但同一个切点表达式可能会在多个通知中重复出现. 在 AspectJ 切面中, 可以通过 @Pointcut 注解将一个切入点声明成简单的方法. 切入点的方法体通常是空的, 因为将切入点定义与应用程序逻辑混在一起是不合理的. 切入点方法的访问控制符同时也控制着这个切入点的可见性. 如果切入点要在多个切面中共用, 最好将它们集中在一个公共的类中. 在这种情况下, 它们必须被声明为 public. 在引入这个切入点时, 必须将类名也包括在内. 如果类没有与这个切面放在同一个包中, 还必须包含包名. 其他通知可以通过方法名称引入该切入点. （8）代码示例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192/** * order数字越小，切面优先级越高 */@Order(2)@Aspect@Componentpublic class LoggingAspect &#123; /** * 定义一个方法，用于声明切入点表达式 * 使用@PointCut来声明切入点表达式 * 后面的其他通知直接使用方法名来应用当前切入点表达式 */ @Pointcut(value = "execution(public int pers.mrxiexie.spring.aop.ArithmeticCalculator.*(int, int))") public void declareJoinPointExpression() &#123; &#125; /** * 前置通知 */ @Before(value = "declareJoinPointExpression()") public void before(JoinPoint joinPoint) &#123; String methodName = joinPoint.getSignature().getName(); Object[] args = joinPoint.getArgs(); System.out.println("method " + methodName + " begin " + args); &#125; /** * 后置通知，无论是否出现异常都会执行 */ @After(value = "declareJoinPointExpression()") public void after(JoinPoint joinPoint) &#123; String methodName = joinPoint.getSignature().getName(); Object[] args = joinPoint.getArgs(); System.out.println("method " + methodName + " end"); &#125; /** * 后置通知带返回值，出现异常则不会执行 */ @AfterReturning(value = "declareJoinPointExpression()", returning = "result") public void afterReturning(JoinPoint joinPoint, Object result) &#123; String methodName = joinPoint.getSignature().getName(); System.out.println("method " + methodName + " end with " + result); &#125; /** * 出现异常执行 * @param ex 执行对应的Exception */ @AfterThrowing(value = "declareJoinPointExpression()", throwing = "ex") public void exception(JoinPoint joinPoint, Exception ex) &#123; String methodName = joinPoint.getSignature().getName(); System.out.println("method " + methodName + " occur exception : " + ex); &#125; /** * 环绕通知需要携带 ProceedingJoinPoint 类型的参数. * 环绕通知类似于动态代理的全过程: ProceedingJoinPoint 类型的参数可以决定是否执行目标方法. * 且环绕通知必须有返回值, 返回值即为目标方法的返回值 */ @Around(value = "declareJoinPointExpression()") public Object around(ProceedingJoinPoint proceedingJoinPoint) &#123; String methodName = proceedingJoinPoint.getSignature().getName(); Object[] args = proceedingJoinPoint.getArgs(); Object result = null; try &#123; //前置通知 System.out.println("method " + methodName + " begin " + args); result = proceedingJoinPoint.proceed(); //返回通知 System.out.println("method " + methodName + " end with " + result); &#125; catch (Throwable throwable) &#123; throwable.printStackTrace(); //异常通知 System.out.println("method " + methodName + " occur exception : " + throwable); &#125; //后置通知 System.out.println("method " + methodName + " end"); return result; &#125;&#125; （9）用基于 XML 的配置声明切面//TODO 详情看ppt 八、Spring JDBC（1）JdbcTemplate 简介 为了使 JDBC 更加易于使用, Spring 在 JDBC API 上定义了一个抽象层, 以此建立一个 JDBC 存取框架. 作为 Spring JDBC 框架的核心, JDBC 模板的设计目的是为不同类型的 JDBC 操作提供模板方法. 每个模板方法都能控制整个过程, 并允许覆盖过程中的特定任务. 通过这种方式, 可以在尽可能保留灵活性的情况下, 将数据库存取的工作量降到最低. （2）JdbcTemplate的使用1、更新1234@Overridepublic int update(String sql, Object... args) throws DataAccessException &#123; return update(sql, newArgPreparedStatementSetter(args));&#125; 2、批量更新1234@Overridepublic int[] batchUpdate(String sql, List&lt;Object[]&gt; batchArgs) throws DataAccessException &#123; return batchUpdate(sql, batchArgs, new int[0]);&#125; 3、查询单行12345@Overridepublic &lt;T&gt; T queryForObject(String sql, RowMapper&lt;T&gt; rowMapper, Object... args) throws DataAccessException &#123; List&lt;T&gt; results = query(sql, args, new RowMapperResultSetExtractor&lt;T&gt;(rowMapper, 1)); return DataAccessUtils.requiredSingleResult(results);&#125; 4、查询多行1234@Overridepublic &lt;T&gt; List&lt;T&gt; query(String sql, RowMapper&lt;T&gt; rowMapper, Object... args) throws DataAccessException &#123; return query(sql, args, new RowMapperResultSetExtractor&lt;T&gt;(rowMapper));&#125; 5、单值查询12345@Overridepublic &lt;T&gt; T queryForObject(String sql, RowMapper&lt;T&gt; rowMapper) throws DataAccessException &#123; List&lt;T&gt; results = query(sql, rowMapper); return DataAccessUtils.requiredSingleResult(results);&#125; （3）简化 JDBC 模板查询 每次使用都创建一个 JdbcTemplate 的新实例, 这种做法效率很低下. JdbcTemplate 类被设计成为线程安全的, 所以可以再 IOC 容器中声明它的单个实例, 并将这个实例注入到所有的 DAO 实例中. JdbcTemplate 也利用了 Java 1.5 的特定(自动装箱, 泛型, 可变长度等)来简化开发 Spring JDBC 框架还提供了一个 JdbcDaoSupport 类来简化 DAO 实现. 该类声明了 jdbcTemplate 属性, 它可以从 IOC 容器中注入, 或者自动从数据源中创建. （4）注入 JDBC 模板示例代码1234567891011121314151617&lt;!-- 导入资源文件 --&gt;&lt;context:property-placeholder location="jdbc.properties" /&gt;&lt;!-- 配置 C3P0 数据源 --&gt;&lt;bean class="com.mchange.v2.c3p0.ComboPooledDataSource" id="dataSource"&gt; &lt;property name="user" value="$&#123;user&#125;" /&gt; &lt;property name="password" value="$&#123;password&#125;" /&gt; &lt;property name="jdbcUrl" value="$&#123;jdbcUrl&#125;" /&gt; &lt;property name="driverClass" value="$&#123;driver&#125;" /&gt; &lt;property name="initialPoolSize" value="$&#123;initialPoolSize&#125;"/&gt; &lt;property name="maxPoolSize" value="$&#123;maxPoolSize&#125;"/&gt;&lt;/bean&gt;&lt;!-- 配置 Spirng 的 JdbcTemplate --&gt;&lt;bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate"&gt; &lt;property name="dataSource" ref="dataSource"/&gt;&lt;/bean&gt; （5）在 JDBC 模板中使用具名参数 在经典的 JDBC 用法中, SQL 参数是用占位符 ? 表示,并且受到位置的限制. 定位参数的问题在于, 一旦参数的顺序发生变化, 就必须改变参数绑定. 在 Spring JDBC 框架中, 绑定 SQL 参数的另一种选择是使用具名参数(named parameter). 具名参数: SQL 按名称(以冒号开头)而不是按位置进行指定. 具名参数更易于维护, 也提升了可读性. 具名参数由框架类在运行时用占位符取代 具名参数只在 NamedParameterJdbcTemplate 中得到支持 （6）在 JDBC 模板中使用具名参数 在 SQL 语句中使用具名参数时, 可以在一个 Map 中提供参数值, 参数名为键 也可以使用 SqlParameterSource 参数 批量更新时可以提供 Map 或 SqlParameterSource 的数组 1234&lt;!-- 配置 spring 的 NamedParameterJdbcTemplate 可以给占位符命名 --&gt;&lt;bean class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate" id="namedParameterJdbcTemplate"&gt; &lt;constructor-arg ref="dataSource"/&gt;&lt;/bean&gt; 123456789101112131415161718192021222324252627282930/** * 使用具名参数时, 可以使用 update(String sql, SqlParameterSource paramSource) 方法进行更新操作 * 1. SQL 语句中的参数名和类的属性一致! * 2. 使用 SqlParameterSource 的 BeanPropertySqlParameterSource 实现类作为参数. */@Testpublic void testNamedParameterJdbcTemplate2() &#123; String sql = "insert into `user` (name, address) values (:name, :address)"; User user = new User(); user.setName("MrXieXie"); user.setAddress("address!!!"); SqlParameterSource sqlParameterSource = new BeanPropertySqlParameterSource(user); namedParameterJdbcTemplate.update(sql, sqlParameterSource);&#125;/** * 可以为参数起名字 * 1、好处：若有多个参数，则不用再去对应位置，直接对应参数名，便于维护 * 2、缺点：较为麻烦 */@Testpublic void testNamedParameterJdbcTemplate() &#123; String sql = "insert into `user` (name, address) values (:name, :address)"; Map&lt;String, String&gt; params = new HashMap&lt;&gt;(); params.put("name", "MrXieXie"); params.put("address", "address"); namedParameterJdbcTemplate.update(sql, params);&#125; 九、Spring 事务管理（1）事务简介 事务管理是企业级应用程序开发中必不可少的技术, 用来确保数据的完整性和一致性. 事务就是一系列的动作, 它们被当做一个单独的工作单元. 这些动作要么全部完成, 要么全部不起作用 事务的四个关键属性(ACID) 原子性(atomicity): 事务是一个原子操作, 由一系列动作组成. 事务的原子性确保动作要么全部完成要么完全不起作用. 一致性(consistency): 一旦所有事务动作完成, 事务就被提交. 数据和资源就处于一种满足业务规则的一致性状态中. 隔离性(isolation): 可能有许多事务会同时处理相同的数据, 因此每个事物都应该与其他事务隔离开来, 防止数据损坏. 持久性(durability): 一旦事务完成, 无论发生什么系统错误, 它的结果都不应该受到影响. 通常情况下, 事务的结果被写到持久化存储器中. （2）Spring 中的事务管理 作为企业级应用程序框架, Spring 在不同的事务管理 API 之上定义了一个抽象层. 而应用程序开发人员不必了解底层的事务管理 API, 就可以使用 Spring 的事务管理机制. Spring 既支持编程式事务管理, 也支持声明式的事务管理. 编程式事务管理: 将事务管理代码嵌入到业务方法中来控制事务的提交和回滚. 在编程式管理事务时, 必须在每个事务操作中包含额外的事务管理代码. 声明式事务管理: 大多数情况下比编程式事务管理更好用. 它将事务管理代码从业务方法中分离出来, 以声明的方式来实现事务管理. 事务管理作为一种横切关注点, 可以通过 AOP 方法模块化. Spring 通过 Spring AOP 框架支持声明式事务管理. （3）Spring 中的事务管理器 PlatformTransactionManager Spring 从不同的事务管理 API 中抽象了一整套的事务机制. 开发人员不必了解底层的事务 API, 就可以利用这些事务机制. 有了这些事务机制, 事务管理代码就能独立于特定的事务技术了. Spring 的核心事务管理抽象是 public interface PlatformTransactionManager 它为事务管理封装了一组独立于技术的方法. 无论使用 Spring 的哪种事务管理策略(编程式或声明式), 事务管理器都是必须的. （4）Spring 中的事务管理器的不同实现 DataSourceTransactionManager：在应用程序中只需要处理一个数据源, 而且通过 JDBC 存取 JtaTransactionManager：在 JavaEE 应用服务器上用 JTA(Java Transaction API) 进行事务管理 HibernateTransactionManager：用 Hibernate 框架存取数据库 …… 事务管理器以普通的 Bean 形式声明在 Spring IOC 容器中1234&lt;!-- 配置事务管理器 --&gt;&lt;bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager"&gt; &lt;property name="dataSource" ref="dataSource"/&gt;&lt;/bean&gt; （5）用 @Transactional 注解声明式地管理事务 除了在带有切入点, 通知和增强器的 Bean 配置文件中声明事务外, Spring 还允许简单地用 @Transactional 注解来标注事务方法. 为了将方法定义为支持事务处理的, 可以为方法添加 @Transactional 注解. 根据 Spring AOP 基于代理机制, 只能标注公有方法. 可以在方法或者类级别上添加 @Transactional 注解. 当把这个注解应用到类上时, 这个类中的所有公共方法都会被定义成支持事务处理的. 在 Bean 配置文件中只需要启用 tx:annotation-driven 元素, 并为之指定事务管理器就可以了. 如果事务处理器的名称是 transactionManager, 就可以在tx:annotation-driven 元素中省略 transaction-manager 属性. 这个元素会自动检测该名称的事务处理器. 12&lt;!-- 启用事务注解 --&gt;&lt;tx:annotation-driven transaction-manager="transactionManager"/&gt; （6）事务传播属性 当事务方法被另一个事务方法调用时, 必须指定事务应该如何传播. 例如: 方法可能继续在现有事务中运行, 也可能开启一个新事务, 并在自己的事务中运行. 事务的传播行为可以由传播属性指定. Spring 定义了 7 种类传播行为. 传播属性 描述 REQUIRED 如果有事务在运行，当前的方法就在这个事务内运行，否则，就启动一个新的事务，并在自己的事务内运行 REQUIRED_NEW 当前的方法必须启动新事务，并在它自己的事务内运行，如果有事务在运行，应该将它挂起 SUPPORTS 如果有事务在运行，当前的方法就在这个事务内运行，否则它可以不运行在事务中 NOT_SUPPORTED 当前的方法不应该运行在事务中，如果有运行的事务，则将它挂起 MANDATORY 当前的方法必须运行在事务内部，如果没有正在运行的事务，就抛出异常 NEVER 当前的方法不应该运行在事务中，如果有运行的事务，则抛出异常 NESTED 如果有事务在运行，当前的方法就应该在这个事务的嵌套事务内运行，否则，就启动一个新的事务，并在它自己的事务内运行 12345@Transactional(propagation = Propagation.REQUIRED)@Overridepublic void checkout(String username, List&lt;Long&gt; ids) &#123; ids.forEach(aLong -&gt; bookShopService.purchase(username, aLong));&#125; （7）并发事务所导致的问题 当同一个应用程序或者不同应用程序中的多个事务在同一个数据集上并发执行时, 可能会出现许多意外的问题 并发事务所导致的问题可以分为下面三种类型: 脏读: 对于两个事物 T1, T2, T1 读取了已经被 T2 更新但 还没有被提交的字段. 之后, 若 T2 回滚, T1读取的内容就是临时且无效的. 不可重复读:对于两个事物 T1, T2, T1 读取了一个字段, 然后 T2 更新了该字段. 之后, T1再次读取同一个字段, 值就不同了. 幻读:对于两个事物 T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中插入了一些新的行. 之后, 如果 T1 再次读取同一个表, 就会多出几行. （8）事务的隔离级别 从理论上来说, 事务应该彼此完全隔离, 以避免并发事务所导致的问题. 然而, 那样会对性能产生极大的影响, 因为事务必须按顺序运行. 在实际开发中, 为了提升性能, 事务会以较低的隔离级别运行. 事务的隔离级别可以通过隔离事务属性指定 事务隔离级别 脏读 不可重复读 幻读 读未提交（read-uncommitted） 是 是 是 不可重复读（read-committed） 否 是 是 可重复读（repeatable-read） 否 否 是 串行化（serializable） 否 否 否 （9）设置隔离事务属性 用 @Transactional 注解声明式地管理事务时可以在 @Transactional 的 isolation 属性中设置隔离级别. 12345@Transactional(isolation = Isolation.READ_COMMITTED)@Overridepublic void checkout(String username, List&lt;Long&gt; ids) &#123; ids.forEach(aLong -&gt; bookShopService.purchase(username, aLong));&#125; （10）设置回滚事务属性 默认情况下只有未检查异常(RuntimeException和Error类型的异常)会导致事务回滚. 而受检查异常不会. 事务的回滚规则可以通过 @Transactional 注解的 rollbackFor 和 noRollbackFor 属性来定义. 这两个属性被声明为 Class[] 类型的, 因此可以为这两个属性指定多个异常类. rollbackFor: 遇到时必须进行回滚 noRollbackFor: 一组异常类，遇到时必须不回滚12345@Transactional(rollbackFor = &#123;IOException.class&#125;)@Overridepublic void checkout(String username, List&lt;Long&gt; ids) &#123; ids.forEach(aLong -&gt; bookShopService.purchase(username, aLong));&#125; （11）设置超时和只读属性 由于事务可以在行和表上获得锁, 因此长事务会占用资源, 并对整体性能产生影响. 如果一个事物只读取数据但不做修改, 数据库引擎可以对这个事务进行优化. 超时事务属性: 事务在强制回滚之前可以保持多久. 这样可以防止长期运行的事务占用资源. 只读事务属性: 表示这个事务只读取数据但不更新数据, 这样可以帮助数据库引擎优化事务.12345@Transactional(timeout = 1, readOnly = true)@Overridepublic void checkout(String username, List&lt;Long&gt; ids) &#123; ids.forEach(aLong -&gt; bookShopService.purchase(username, aLong));&#125; 十、Spring 如何在 WEB 应用中使用 ?1). 需要额外加入的 jar 包: spring-web-4.0.0.RELEASE.jarspring-webmvc-4.0.0.RELEASE.jar 2). Spring 的配置文件, 没有什么不同 3). 如何创建 IOC 容器 ? ①. 非 WEB 应用在 main 方法中直接创建②. 应该在 WEB 应用被服务器加载时就创建 IOC 容器: 在 ServletContextListener#contextInitialized(ServletContextEvent sce) 方法中创建 IOC 容器. ③. 在 WEB 应用的其他组件中如何来访问 IOC 容器呢 ? 在 ServletContextListener#contextInitialized(ServletContextEvent sce) 方法中创建 IOC 容器后, 可以把其放在ServletContext(即 application 域)的一个属性中. ④. 实际上, Spring 配置文件的名字和位置应该也是可配置的! 将其配置到当前 WEB 应用的初始化参数中较为合适. 4). 在 WEB 环境下使用 Spring ①. 需要额外加入的 jar 包: spring-web-4.0.0.RELEASE.jarspring-webmvc-4.0.0.RELEASE.jar ②. Spring 的配置文件, 和非 WEB 环境没有什么不同 ③. 需要在 web.xml 文件中加入如下配置: 12345678910&lt;!-- 配置 Spring 配置文件的名称和位置 --&gt;&lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;&lt;/context-param&gt;&lt;!-- 启动 IOC 容器的 ServletContextListener --&gt;&lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis学习笔记]]></title>
    <url>%2FMyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[一、MyBatis简介 MyBatis 是支持定制化 SQL、存储过程以及高级 映射的优秀的持久层框架。 MyBatis 避免了几乎所有的 JDBC 代码和手动设 置参数以及获取结果集。 MyBatis可以使用简单的XML或注解用于配置和原 始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录 （1）为什么使用MyBatis MyBatis是一个半自动化的持久化层框架 JDBC SQL夹在Java代码块里，耦合度高导致硬编码内伤 维护不易且实际开发需求中sql是有变化，频繁修改的情况多见 Hibernate和JPA 长难复杂SQL，对于Hibernate而言处理也不容易 内部自动生产的SQL，不容易做特殊优化。 基于全映射的全自动框架，大量字段的POJO进行部分映射时比较困难。 导致数据库性能下降。 对开发人员而言，核心sql还是需要自己优化 sql和java编码分开，功能边界清晰，一个专注业务、 一个专注数据。 二、MyBatis-HelloWorld（1）创建MyBatis全局配置文件 MyBatis 的全局配置文件包含了影响 MyBatis 行为甚深 的设置（settings）和属性（properties）信息、如数据库连接池信息等。指导着MyBatis进行工作。我们可以参照官方文件的配置示例。 mybatis-config.xml如下 123456789101112131415161718192021&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt; &lt;environments default="development"&gt; &lt;environment id="development"&gt; &lt;transactionManager type="JDBC"/&gt; &lt;dataSource type="POOLED"&gt; &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt; &lt;property name="url" value="jdbc:mysql:///test"/&gt; &lt;property name="username" value="root"/&gt; &lt;property name="password" value="root"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 --&gt; &lt;mappers&gt; &lt;mapper resource="conf/EmployeeMapper.xml"/&gt; &lt;/mappers&gt;&lt;/configuration&gt; （2）创建SQL映射文件 映射文件的作用就相当于是定义Dao接口的实现类如何工作。这也是我们使用MyBatis时编写的最多的文件。 EmployeeMapper.xml如下 12345678910111213141516&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;!-- namespace:名称空间;指定为接口的全类名 id：唯一标识 resultType：返回值类型 #&#123;id&#125;：从传递过来的参数中取出id值 public Employee selectEmployee(Integer id); --&gt;&lt;mapper namespace="pers.mrxiexie.mybatis.mapper.EmployeeMapper"&gt; &lt;select id="selectEmployee" resultType="pers.mrxiexie.mybatis.beans.Employee"&gt; select id, last_name lastName, gender, email from tbl_employee where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; （3）测试123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/** * 1、接口式编程 * 原生： Dao ====&gt; DaoImpl * mybatis： Mapper ====&gt; xxMapper.xml * * 2、SqlSession代表和数据库的一次会话；用完必须关闭； * 3、SqlSession和connection一样她都是非线程安全。每次使用都应该去获取新的对象。 * 4、mapper接口没有实现类，但是mybatis会为这个接口生成一个代理对象。 * （将接口和xml进行绑定） * EmployeeMapper empMapper = sqlSession.getMapper(EmployeeMapper.class); * 5、两个重要的配置文件： * mybatis的全局配置文件：包含数据库连接池信息，事务管理器信息等...系统运行环境信息 * sql映射文件：保存了每一个sql语句的映射信息： * 将sql抽取出来。 */public class HelloWorld &#123; public SqlSessionFactory getSqlSessionFactory() throws IOException &#123; String resource = "conf/mybatis-config.xml"; InputStream inputStream = Resources.getResourceAsStream(resource); return new SqlSessionFactoryBuilder().build(inputStream); &#125; /** * 1、根据xml配置文件（全局配置文件）创建一个SqlSessionFactory对象 有数据源一些运行环境信息 * 2、sql映射文件；配置了每一个sql，以及sql的封装规则等。 * 3、将sql映射文件注册在全局配置文件中 * 4、写代码： * 1）、根据全局配置文件得到SqlSessionFactory； * 2）、使用sqlSession工厂，获取到sqlSession对象使用他来执行增删改查 * 一个sqlSession就是代表和数据库的一次会话，用完关闭 * 3）、使用sql的唯一标志来告诉MyBatis执行哪个sql。sql都是保存在sql映射文件中的。 */ @Test public void test() throws IOException &#123; // 2、获取sqlSession实例，能直接执行已经映射的sql语句 // sql的唯一标识：statement Unique identifier matching the statement to use. // 执行sql要用的参数：parameter A parameter object to pass to the statement. String resource = "conf/mybatis-config.xml"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession sqlSession = null; try &#123; sqlSession = sqlSessionFactory.openSession(); Employee employee = sqlSession.selectOne("selectEmployee", 2); System.out.println(employee); &#125; finally &#123; if (sqlSession != null) &#123; sqlSession.close(); &#125; &#125; &#125; @Test public void test1() throws IOException &#123; SqlSessionFactory sqlSessionFactory = getSqlSessionFactory(); SqlSession sqlSession = sqlSessionFactory.openSession(); EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class); System.out.println(employeeMapper.getClass()); Employee employee = employeeMapper.selectEmployee(2); System.out.println(employee); sqlSession.close(); &#125;&#125; 三、MyBatis配置文件==待续==]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序实现跳转的方法]]></title>
    <url>%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E8%B7%B3%E8%BD%AC%E7%9A%84%E6%96%B9%E6%B3%95.html</url>
    <content type="text"><![CDATA[一、小程序页面跳转（js实现） wx.navigateTo(OBJECT) 保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面。 举个栗子：A页面跳转B页面，B页面调用wx.navigateBack返回A页面 123456//A页面wx.navigateTo(&#123; url: 'B'&#125;)//B页面wx.navigateBack(); wx.redirectTo(OBJECT) 关闭当前页面，跳转到应用内的某个页面。 举个例子：A页面跳转B页面并关闭A页面，B页面上不会又返回箭头 1234//A页面wx.redirectTo(&#123; url: 'B'&#125;) wx.reLaunch(OBJECT) 关闭所有页面，打开到应用内的某个页面。 举个栗子：A页面跳转B页面关闭所有页面 123wx.reLaunch(&#123; url: 'B'&#125;) wx.switchTab(OBJECT) 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面。 举个栗子：A页面跳转到B页面（tabBar） 123wx.switchTab(&#123; url: 'B'&#125;) wx.navigateBack(OBJECT) 关闭当前页面，返回上一页面或多级页面。可通过getCurrentPages()获取当前的页面栈，决定需要返回几层。 举个栗子：A页面跳转B页面，B页面跳转C页面，C页面返回A页面 12345678910111213141516//A页面wx.navigateTo(&#123; url: 'B'&#125;)//B页面wx.navigateTo(&#123; url: 'B'&#125;)//C页面var pages = getCurrentPages();//获取当前页栈for(var i = 0; i &lt; pages.length; i++)&#123; console.log(pages[i].route); //打印页栈路由&#125;wx.navigateBack(&#123; delta: 2 //返回两层，返回A页面，若大于页面数则返回首页&#125;); 注意：wx.navigateTo 和 wx.redirectTo 不允许跳转到 tabbar 页面，只能用 wx.switchTab 跳转到 tabbar 页面 二、小程序页面跳转（wxml实现）1234567&lt;!-- sample.wxml --&gt;&lt;view class="btn-area"&gt; &lt;navigator url="/page/navigate/navigate?title=navigate" hover-class="navigator-hover"&gt;跳转到新页面&lt;/navigator&gt; &lt;navigator url="../../redirect/redirect/redirect?title=redirect" open-type="redirect" hover-class="other-navigator-hover"&gt;在当前页打开&lt;/navigator&gt; &lt;navigator url="/page/index/index" open-type="switchTab" hover-class="other-navigator-hover"&gt;切换 Tab&lt;/navigator&gt; &lt;navigator target="miniProgram" open-type="navigate" app-id="" path="" extra-data="" version="release"&gt;打开绑定的小程序&lt;/navigator&gt;&lt;/view&gt; ==待续小程序间跳转==]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[蜜糖公寓小程序二次开发]]></title>
    <url>%2F%E8%9C%9C%E7%B3%96%E5%85%AC%E5%AF%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91.html</url>
    <content type="text"><![CDATA[请输入密码 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>微容</category>
      </categories>
      <tags>
        <tag>微容</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown基础语法]]></title>
    <url>%2FMarkdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html</url>
    <content type="text"><![CDATA[一、文字示例： 1234this is *italic* and this is **bold** . another _italic_ and another __bold__this is `important` text. and percentage signs : % and `%`This is a paragraph with a footnote (builtin parser only). [^note-id]Insert `[ TOC ]` without spaces to generate a table of contents (builtin parsers only). 效果： this is italic and this is bold . another italic and another bold this is important text. and percentage signs : % and % This is a paragraph with a footnote (builtin parser only). [^note-id] Insert [ TOC ] without spaces to generate a table of contents (builtin parsers only). 二、引用示例： 12&gt; Here is some indented text&gt; &gt; even more indented 效果： Here is some indented text even more indented 三、标题示例： 123456# Big title (h1)## Middle title (h2)### Smaller title (h3)#### and so on (hX)##### and so on (hX)###### and so on (hX) 效果： Big title (h1) Middle title (h2) Smaller title (h3) and so on (hX) and so on (hX) and so on (hX) 四、列表示例： 1234567891011- bullets can be `-`, `+`, or `*`- bullet list 1- bullet list 2 - sub item 1 - sub item 2 with indented text inside- bullet list 3+ bullet list 4* bullet list 5 效果： bullets can be -, +, or * bullet list 1 bullet list 2 sub item 1 sub item 2 with indented text inside bullet list 3 bullet list 4 bullet list 5 五、链接示例： 123This is an [example inline link](http://lmgtfy.com/) and [another one with a title](http://lmgtfy.com/ "Hello, world").Links can also be reference based : [reference 1][ref1] or [reference 2 with title][ref2].References are usually placed at the bottom of the document 效果： This is an example inline link and another one with a title. Links can also be reference based : [reference 1][ref1] or [reference 2 with title][ref2]. References are usually placed at the bottom of the document 六、图像示例： 12345A sample image :![song](http://md.mrxiexie.cn/song/180731/1H7LLFFcID.jpg "song")As links, images can also use references instead of inline links :![song][song][song]: http://md.mrxiexie.cn/song/180731/1H7LLFFcID.jpg "song" 效果： A sample image : As links, images can also use references instead of inline links : 七、代码示例： 12345···html&lt;script&gt; document.location = 'http://lmgtfy.com/?q=markdown+cheat+sheet';&lt;/script&gt;··· 效果： 123&lt;script&gt; document.location = 'http://lmgtfy.com/?q=markdown+cheat+sheet';&lt;/script&gt; 八、数学示例： 12345When `enable_mathjax` is `true`, inline math can be included $$\frac&#123;\pi&#125;&#123;2&#125;$$ $$\pi$$Alternatively, math can be written on its own line:$$F(\omega) = \frac&#123;1&#125;&#123;\sqrt&#123;2\pi&#125;&#125; \int_&#123;-\infty&#125;^&#123;\infty&#125; f(t) \, e^&#123; - i \omega t&#125;dt$$$$\int_0^1 f(t) \mathrm&#123;d&#125;t$$$$\sum_j \gamma_j^2/d_j$$ 效果： When enable_mathjax is true, inline math can be included $$\frac{\pi}{2}$$ $$\pi$$ Alternatively, math can be written on its own line: $$F(\omega) = \frac{1}{\sqrt{2\pi}} \int_{-\infty}^{\infty} f(t) \, e^{ - i \omega t}dt$$ $$\int_0^1 f(t) \mathrm{d}t$$ $$\sum_j \gamma_j^2/d_j$$ 九、表格示例： 12345| Year | Temperature (low) | Temperature (high) || ---- | ----------------- | ------------------ || 1900 | -10 | 25 || 1910 | -15 | 30 || 1920 | -10 | 32 | 效果： Year Temperature (low) Temperature (high) 1900 -10 25 1910 -15 30 1920 -10 32]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora + MPic 快速编写Markdown博客]]></title>
    <url>%2F%E5%BF%AB%E9%80%9F%E7%BC%96%E5%86%99Markdown%E5%8D%9A%E5%AE%A2.html</url>
    <content type="text"><![CDATA[使用Typora，MPic结合七牛云快速编写Markdown博客 一、下载TyporaTypora是一款简单实时预览的Markdown编辑器，点击下载 二、下载MPicMPic是一款支持多种上传方式且自动生成MarkDown链接的图床工具，点击下载 三、注册七牛云账号1、 注册七牛云账号，我用的是126邮箱，之前申请账号使用qq邮箱，第二天才收邮箱激活通知 2、实名认证 3、创建空间 4、创建对象存储 5、记录外链默认域名，登录MPic时需要用到 6、记录AK和SK，登录MPic时需要用到 四、设置MPic图床神奇 五、上传图片到MPic1、直接拖拽或复制图片到MPic窗口 2、微信使用Alt + A进行截图 3、qq使用Ctrl + Alt + A进行截图]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>七牛云</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA使用技巧]]></title>
    <url>%2FIDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html</url>
    <content type="text"><![CDATA[一、设置IDEA默认设置 设置每次新建新项目时候的默认设置 二、设置自动导入包，清除没用的包 三、设置文件编码格式 四、使用Hierarchy查看类层次结构 Eclipse快键键下首次使用按下 F4（Navigate -&gt; Type Hierarchy），以后每次使用按 Alt + 8 五、使用快捷键移动分割线 使用 alt + 1 切换鼠标焦点在project中，然后通过 ctrl + shift + 左右箭头来移动分割线 六、解决控制台乱码 在idea根目录找到idea64.exe.vmoptions 在文件末尾添加-Dfile.encoding=UTF-8，保存重启idea即可~ 123456789101112-Xms128m-Xmx750m-XX:ReservedCodeCacheSize=240m-XX:+UseConcMarkSweepGC-XX:SoftRefLRUPolicyMSPerMB=50-ea-Dsun.io.useCanonCaches=false-Djava.net.preferIPv4Stack=true-Djdk.http.auth.tunneling.disabledSchemes=&quot;&quot;-XX:+HeapDumpOnOutOfMemoryError-XX:-OmitStackTraceInFastThrow-Dfile.encoding=UTF-8]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微容购车计算器转购房计算器]]></title>
    <url>%2F%E5%BE%AE%E5%AE%B9%E8%B4%AD%E8%BD%A6%E8%AE%A1%E7%AE%97%E5%99%A8%E8%BD%AC%E8%B4%AD%E6%88%BF%E8%AE%A1%E7%AE%97%E5%99%A8.html</url>
    <content type="text"><![CDATA[请输入密码 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>微容</category>
      </categories>
      <tags>
        <tag>微容</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序-模板消息]]></title>
    <url>%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E6%B6%88%E6%81%AF.html</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>模板消息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[账号重要文档]]></title>
    <url>%2F%E8%B4%A6%E5%8F%B7%E9%87%8D%E8%A6%81%E6%96%87%E6%A1%A3.html</url>
    <content type="text"><![CDATA[请输入密码 Incorrect Password! No content to display! U2FsdGVkX19meg4XuOXXXMsKaju56HlgczLl7vsvh8q/tF1YCDPMZhMALvCy6V2be3U6qYP/+5EahVYZirlM3cNTz1Vi0hzqklq7PxFw2eNbo+uo3Ww51JQCx40Wm+NTwDNGo+V9bRfwR9m51EInwOkc5E3+9P3OyoZ4VU4RGcO6RCNp8VjN2akOhh8PaLrr0wAVdcPyA+8DO44zomGLR3StcJ66RW9fOETZD1rKiuI1A26WBel2Y6kShbGObbFC+B3ZfpoK/TGF5XYYxYv3a4S32TKhPJsb+jpSID0mb9LgAjXr1eXC/K8IF+kD500Ly3bHMXqbYXgQH+CU8/vwQtSZxb04oIDA3N7kePy4swtIaRdKUtL2Byf5XLGN6oXvgysJJLDS0NmlF0Qcn9CFKNSDib9dNRULd9g7RbOYtMhw8ia3o3v0LcIQH01NsGXoPUBoxZ05Z4CVBWOh/VtNR4vYi/BFulJWiIBU9nVNJGux9OqPUzivZqK3GFxjrVb9WJc0qAbaiRq0H+1+hBBPp40IiT8ZgH1xPuPbB2aBFflUhjgdzl5jY3iW3hJptCgMdlcGPodxzlyOMZtFHNBCpc3nx575IeC6pLWKiz89jwnYn5uDo+N4RaeuanakBftJQ5YGqocDId6o6hrZEn42HXWzvq7ba6IesN2b1SyIQ1lXO/CcHodbxZDl/jbKizoQAwFfnERauK/6ggZX8kH8IjBrQCMoG/mGLTNpn9B7f/NFGlz/IVWl7SxueMwfdKZrWzi1tbSloYCM2LLAj+rbw3DHt2eUj93i1fLBMNW4gS1alXoYxujGDZUcBTsQ+tVXinuAi+BUYYG4NtzZxwjL2ePe42I4/rY2uROmmE8AAFQmy9KKTRODBYWkoUJLGsMEAX9Bkf0KBe9dtYzM/qXr4XjlVqRoZ/1BHcIK9gvCluQ7+lU+IxUIkjZcLcRVCoqlkj0n1wKVoHnwVDI9esD2LcUZkoaF/Z4/QndHCTxmz2wAY9tCmH+M1NIP7KxqJ/ZswQtr6UoQYDhPRgP1EmczjJF6bY4ptbXWJlkmfKavLp9dGU5h3kj/xYflVNkR/S6xaBMl1Ek+0fBpNHRQ98NSUMGv1acE/yr4C4ZIESLJTmWxQ3kAszuBlWGl+FzREkjMdgTFJJDYl1cJg2vKbDH8yXanTRBmtqJqZZzfQ2jlOmnmwi35tAJnn+LJxEINt0aoNyjJH4MBijy4nbt95iJSu1Apbf5bASZAtnuJij/Xu2sRddANbX8BVSItl5ZD7aAYzYQ6GMzE2YPpNKlEQhuUDj7N91unIGWujb70/5EpwaJXoqQ687lR1Rj5asFLPZP54hcVkYWzv9GVaCaBLTbfNCapNimmnAoNgt60XeQvZE/bLBxxJIb8huMRjlHeLLuLL0RNNt/kx7FcdknJxC6A803GaM6dqeq2lDUqu9lHCQrWJJhOaeQNT9ShEvuWLCmpyhlnSqdzQxDx5ebN1mtrRfyFcTPaCqFd1w6Rfjk5XTTkk7yCp4ZruzhVjWilZVkI/V6w61Jlp0IBmkcM5epZq930neL64VuKjRZgLNBv1E5xF/cERItodlT2m3Fia1AdNroDeqgD0zkOZHCWSGushgEDsGbE09Qumikki4d1aETojn17AxZpkf5qf2CMfzG0a8NBaJxPTXDs72rL3etFOeUwRl2e2Sfth6jhbEMv0jVHvirxM1FjJ8pP0Y6L2lbRALOe4zIoYEfcUST1ydJkLWWnZzIgOcueysVzBlyzqYAFhCYhoVrl7AyVGeITNZafuPShODJ6RlplKoQKOafvgmpDOETa4aXCeLFM1/fPMgJGWCQPBb7WUf6O9Zu5OBOu4WKl36jHRAJ/xxlYT0zU4ladbqFKAt0+Fv010iwZkvvoRvOLiEr6gaY6Eul+bKgchDl37j+mmWtoJHTJo/RI8PP8SSut0DD4/AYZbGtlvPmnoYdTXcHHxXKrD4xHBipkeLMa54d52bqv8XxBGWeq4t5sOIvWgRwuEKawfLrDK0mqJvX+ug+zdh6ZirJ4kQQ7XL2Mfs6EYDg5BR/OKBCKe+8DHPDdonwcSc8NkywMi1Qq3/WHOKWCXKREPqotYEaMjyq9ix4nY3OktthArFQSusfYxjcMKKpjUrBjnNNDjlYww0A+GjMtNP25fo+pbSlHQo4aqI/CUOi9lOcEuTp3dSHu4j9Lmv3MK3Cyo/BH3mGuK6Y+zpIvr9W/m6LIPipOx/Am4z6KlPQu74lURmIm6KacoiLxQk0sGEnlzxw6tp2C7YKFF30OKKcY1kd64oxRGHptnRrWoald7PDspnMNjgPkOaEbBMWf5I6PGeM/JALBhkMWNqJJ/F7/MYmIhJqbx0i6f+htTs5hyagLA3uT40AvLDGnjK0CJkSM5EExeGBveJ0RWWuejrfJaGtTnJIPFswZM3utzSjg+Hn/KR2k6l5QBxMBAdlmvpFEYyd4hTvcbs9qXK5ur9b8YrCeLfMxUlFp+z6ap4RM0EX0AaYTLPnmxasXeHx1619E28QaMJzgR5EwTrdWRJaq7hES4LOWZdkInA71WWfCefpOVzfFpO+stXnbXnkj3OZBEDGb1RJrLsWMpphGGLapyauT89BFUjyAWrowghb2fuy0blJ0lxKpydJ3dnWcQvbvWkAD/fZVBJ3sNqzX/Qdkf1dY/XqJg7eru0zekq5TrAv9f3VuC5uStXATyWjXXqvnle7eMweWLhR05fC4gC2B2jPiTn+SZXQuSBXUyqoZo8mOybh5VT/3nEHyFZsp9crLDNhFLzoASCDEbtx1Tu2TfMvgDuvIdOz1lUB1SUaOt+yhIG8x+T/tZ9V6HsB5a4NSFFwLMftKXikOtLqN/KWsZjZnkxnmDTCj3A27A0YHlX59/BAee1lWYUDix4adpzA0cVhRoCI7nLiKtXJmTGEOKsoHFKPE+/eLqEW3UHR/+V3DBw7LJAHCUypzbmASX5bXdTUIUsI8YrsNC3g2EwgTJt/xZZ3ghrhfnvQHr6AOf4r+uW6aVJRctg3smaLcxqMRiutQ2ofI2PZQFDQeRk2TiplBGhrQTIwBeaoSR41SycFdmvDWSZ3Qay9F8kRMgp5j9wcPPKXVjhrTS+lipAlnuwowLp/3umi/yCec1RNGUPoH4NwasedkIS0Jk8wxDb4c6hFemLAe1KMzjwZzi8ywleRsV56YU/cSoiLwhw5UkWCNQP1/0SYdMoUnv5GkYnpR/h0VkvyJSFC0am6ZQ62HHEjdM+nTN8Rk8Cv6z1eV6RM+7nJaeA6kkLTsTjRRxy8i5iEznJ6UfNs2sI7lOihTaChIqb0/t06MTIwDNrjhOJtXtgqk5GCSikyNXqzf6kGYa5cPYNQtk9qOY7skQRIqiKAtvRTw1h9r1bu5jN+hxc67zX8QMCSBbzIJqBcdbOcqqqUq2Hwp/rkeOo9w+xl6SDjoW/DomUQvxzTl/wkVuz1SqJRvtSjhNfG8TjIjH0GVe5mhLLsIfR3mFSqQ4q6Zh5myGxQ+dUyOP2Rh+KAaW0iU11Io7AvwojYE8fbDouqPPsv5y4k=]]></content>
      <categories>
        <category>文档</category>
      </categories>
      <tags>
        <tag>importment</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker安装及简单使用]]></title>
    <url>%2FDocker.html</url>
    <content type="text"><![CDATA[一、简介Docker是一个开源的应用容器引擎；是一个轻量级容器技术； Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像； 运行中的这个镜像称为容器，容器启动是非常快速的。 二、核心概念docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）； docker客户端(Client)：连接docker主机进行操作； docker仓库(Registry)：用来保存各种打包好的软件镜像； docker镜像(Images)：软件打包好的镜像；放在docker仓库中； docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用 使用Docker的步骤： 1）、安装Docker 2）、去Docker仓库找到这个软件对应的镜像； 3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器； 4）、对容器的启动停止就是对软件的启动停止； 三、安装Docker1）、安装linux虚拟机1）、VMWare、VirtualBox（安装）； 2）、导入虚拟机文件centos7-atguigu.ova； 3）、双击启动linux虚拟机;使用 root/ 123456登陆 4）、使用客户端连接linux服务器进行命令操作； 5）、设置虚拟机网络； 桥接网络===选好网卡====接入网线； 6）、设置好网络以后使用命令重启虚拟机的网络 service network restart 7）、查看linux的ip地址 ip addr 8）、使用客户端连接linux； 2）、在linux虚拟机上安装docker步骤： 12345678910111213141、检查内核版本，必须是3.10及以上uname -r2、安装dockeryum install docker3、输入y确认安装4、启动docker[root@localhost ~]# systemctl start docker[root@localhost ~]# docker -vDocker version 1.12.6, build 3e8e77d/1.12.65、开机启动docker[root@localhost ~]# systemctl enable dockerCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.6、停止dockersystemctl stop docker 四、Docker常用命令&amp;操作1）、镜像操作 操 作 命令 说明 检 索 docker search 关键字 eg：docker search redis 我们经常去docker hub上检索镜像的详细信息，如镜 像的TAG。 拉 取 docker pull 镜像名:tag :tag是可选的，tag表示标签，多为软件的版本，默认 是latest 列 表 docker images 查看所有本地镜像 删 除 docker rmi image-id 删除指定的本地镜像 2）、容器操作根据镜像启动容器：docker run –name：为容器起名字 -d：在后台运行容器 -p：本机端口映射到容器端口 1docker run --name mytomcat -d tomcat:lastest -p 8080:8080 启动容器：docker start1docker start 容器的id 查看容器：docker ps -a：查看所有容器 1docker ps -a 停止容器：docker stop1docker stop 容器的id 删除容器：docker rm1docker rm 容器的id 进入容器：docker exec1docker exec -it 容器的id bash 退出容器：Ctrl+P+Q查看容器日志：docker logs -f -t1docker logs -f -t 容器的id 五、踩坑记录1、centos7 启动docker失败–selinux-enabled=falsecentos7，执行完安装命令： yum install docker 执行启动命令： systemctl start docker ，报下面错误： Error starting daemon: SELinux is not supported with the overlay2 graph driver on this kernel. Either boot into a newer kernel or disable selinux in docker (–selinux-enabled=false) 解决方案：重新编辑docker配置文件： 12345678910111213vi /etc/sysconfig/docker //vi编辑器编辑docker文件//修改 --selinux-enabled=false\# /etc/sysconfig/docker\# Modify these options if you want to change the way the docker daemon runsOPTIONS='--selinux-enabled=false --log-driver=journald --signature-verification=false'if [ -z "$&#123;DOCKER_CERT_PATH&#125;" ]; then DOCKER_CERT_PATH=/etc/dockerfi:wq //保存并退出systemctl restart docker //重启docker 参考：http://blog.51cto.com/10950710/2131803 2、用Navicat连接本机Docker的Mysql8.0参考：https://blog.csdn.net/gf0515/article/details/80466213]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring注解驱动开发]]></title>
    <url>%2FSpring-Annotation.html</url>
    <content type="text"><![CDATA[一、组件注册 给容器中注册组件； 包扫描+组件标注注解（@Controller/@Service/@Repository/@Component）[自己写的类] @Bean[导入的第三方包里面的组件] @Import[快速给容器中导入一个组件] @Import(要导入到容器中的组件)；容器中就会自动注册这个组件，id默认是全类名 ImportSelector:返回需要导入的组件的全类名数组； ImportBeanDefinitionRegistrar:手动注册bean到容器中 使用Spring提供的 FactoryBean（工厂Bean）; 默认获取到的是工厂bean调用getObject创建的对象 要获取工厂Bean本身，我们需要给id前面加一个&amp;colorFactoryBean （1）使用@Bean注解注入Bean@Configuration：标注一个类为配置类 @Bean：给容器中注入一个Bean，类型为返回值的类型，id默认使用Bean标注的方法名 1234567891011121314/** * 标注一个类为配置类 */@Configurationpublic class MainConfig &#123; /** * 给容器中注入一个Bean，类型为返回值的类型，id默认使用Bean标注的方法名 */ @Bean("nihao")//设置id名 public Person person() &#123; return new Person("Xieweicheng", 12); &#125;&#125; （2）使用@ComponentScan注解配置自动扫描组件1、@ComponentScan：自动扫描组件，包含以下四个注解@Controller、@Service、@Repository、@Component ①、常用属性： value：指定扫描的包 includeFilters：只扫描哪些 excludeFilters：排除扫描哪些 useDefaultFilters：是否使用默认Filter 123456@ComponentScan( value = "pers.mrxiexie.springannotation", includeFilters = &#123;@ComponentScan.Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class&#125;)&#125;, excludeFilters = &#123;@ComponentScan.Filter(type = FilterType.ANNOTATION, classes = &#123;Repository.class&#125;)&#125;, useDefaultFilters = false)public class MainConfig &#123; 2、使用@Filter设置过滤规则①、type属性 FilterType.ANNOTATION：按照注解 FilterType.ASSIGNABLE_TYPE：按照给定的类型 FilterType.ASPECTJ：ASPECTJ表达式 FilterType.REGEX：使用正则指定 FilterType.CUSTOM：使用自定义规则 ②、使用自定义规则 1234567@Configuration@ComponentScan( value = "pers.mrxiexie.springannotation", includeFilters = &#123;@ComponentScan.Filter(type = FilterType.CUSTOM, classes = &#123;MyTypeFIlter.class&#125;)&#125;, //type指定FilterType.CUSTOM使用自定义规则，classes标注自定义规则的类 useDefaultFilters = false)public class MainConfig &#123;&#125; 1234567891011121314151617181920212223public class MyTypeFIlter implements TypeFilter &#123; /** * @param metadataReader 读取到的当前正在扫描的类的信息 * @param metadataReaderFactory 可以获取到其他任何类信息的 * @return 是否加入容器 */ @Override public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException &#123; //获取当前扫描类注解 AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata(); //获取当前扫描类的信息 ClassMetadata classMetadata = metadataReader.getClassMetadata(); //获取当前类资源（类的路径） Resource resource = metadataReader.getResource(); String className = classMetadata.getClassName(); System.out.println("className : " + className); return className.contains("er"); &#125;&#125; （3）使用@Scope修改组件的作用域 ConfigurableBeanFactory#SCOPE_PROTOTYPE：多实例，ioc容器启动并不会去调用方法创建对象放在容器中，每次获取的时候才会调用方法创建对象。 ConfigurableBeanFactory#SCOPE_SINGLETON：单实例（默认值），ioc容器启动会调用方法创建对象放到ioc容器中，以后每次获取就是直接从容器（map.get()）中拿， org.springframework.web.context.WebApplicationContext#SCOPE_REQUEST：同一次请求创建一个实例 org.springframework.web.context.WebApplicationContext#SCOPE_SESSION：同一个Session创建一个实例 （4）使用@Lazy修改单实例第一次使用才加载1234567891011/** * 懒加载： * 单实例bean：默认在容器启动的时候创建对象； * 懒加载：容器启动不创建对象。第一次使用(获取)Bean创建对象，并初始化； */@Lazy@Bean("person")public Person person()&#123; System.out.println("给容器中添加Person...."); return new Person("张三", 25);&#125; （5）使用@Conditional判断是够注入Bean标注在方法上：判断为true，注入该Bean12345@Conditional(WindowCondition.class)//当操作系统为Window时，注入该Bean@Beanpublic Person window() &#123; return new Person("Window", 11);&#125; 12345678910111213141516171819202122232425262728public class WindowCondition implements Condition &#123; /** * 判断是否为Window系统 * * @param context 判断条件能使用的上下文（环境） * @param metadata 注释信息 * @return 是否加入容器中 */ @Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) &#123; //1、能获取到ioc使用的beanfactory ConfigurableListableBeanFactory beanFactory = context.getBeanFactory(); //2、获取类加载器 ClassLoader classLoader = context.getClassLoader(); //3、获取当前环境信息 Environment environment = context.getEnvironment(); //4、获取到bean定义的注册类 BeanDefinitionRegistry registry = context.getRegistry(); String property = environment.getProperty("os.name"); //可以判断容器中的bean注册情况，也可以给容器中注册bean boolean definition = registry.containsBeanDefinition("person"); return property.contains("Windows"); &#125;&#125; 标注在类上：判断为true，注入类下所有Bean12345678910111213141516@Conditional(LinuxCondition.class)//当操作系统为Linux时，注入该类的所有Bean@Configurationpublic class MainConfig2 &#123;// @Conditional(WindowCondition.class) @Bean public Person window() &#123; return new Person("Window", 11); &#125;// @Conditional(LinuxCondition.class) @Bean public Person linux() &#123; return new Person("Linux", 11); &#125;&#125; 使用IDEA，修改当前操作系统属性 进入Edit Configuration 修改VM options值为 -Dos.name=Linux保存即可 （6）使用@Import注解注入Bean 在类上使用@Import(要导入容器的组件)，会自动注入该组件，其名默认为全类名 123@Import(Red.class) //注入Red组件，其名字为pers.mrxiexie.springannotation.bean.Red@Configurationpublic class MainConfig2 &#123;&#125; 使用ImportSelector，返回需要导入的组件的全类名数组 1234567891011121314@Import(&#123;Red.class, MyImportSelector.class&#125;)@Configurationpublic class MainConfig2 &#123;&#125;//自定义逻辑返回需要导入的组件public class MyImportSelector implements ImportSelector &#123; //返回值，就是到导入到容器中的组件全类名 //AnnotationMetadata:当前标注@Import注解的类的所有注解信息 @Override public String[] selectImports(AnnotationMetadata importingClassMetadata) &#123; return new String[]&#123;"pers.mrxiexie.springannotation.bean.Blue"&#125;; &#125;&#125; 使用ImportBeanDefinitionRegistrar，手动注册Bean到容器中 1234567891011121314151617181920212223242526@Import(&#123;Red.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class&#125;)@Configurationpublic class MainConfig2 &#123;&#125;public class MyImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar &#123; /** * @param importingClassMetadata 当前类的注解信息 * @param registry BeanDefinition注册类； * 把所有需要添加到容器中的bean；调用 * BeanDefinitionRegistry.registerBeanDefinition手工注册进来 */ @Override public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123; boolean containRed = registry.containsBeanDefinition(Red.class.getName()); boolean containBlue = registry.containsBeanDefinition(Blue.class.getName()); if (containBlue &amp;&amp; containRed) &#123; //指定Bean定义信息；（Bean的类型，Bean。。。） RootBeanDefinition rootBeanDefinition = new RootBeanDefinition(Color.class); //注册一个Bean，指定bean名 registry.registerBeanDefinition("color", rootBeanDefinition); &#125; &#125;&#125; （7）使用Spring提供的 FactoryBean（工厂Bean）123456789101112131415161718192021222324252627282930313233343536/** * 创建一个Spring定义的FactoryBean */public class ColorFactoryBean implements FactoryBean&lt;Color&gt; &#123; //返回一个Color对象，这个对象会添加到容器中 @Override public Color getObject() throws Exception &#123; return new Color(); &#125; @Override public Class&lt;?&gt; getObjectType() &#123; return Color.class; &#125; //是单例？ //true：这个bean是单实例，在容器中保存一份 //false：多实例，每次获取都会创建一个新的bean； @Override public boolean isSingleton() &#123; return true; &#125;&#125;//注入ColorFactoryBean@Beanpublic FactoryBean colorFactoryBean()&#123; return new ColorFactoryBean();&#125;//获取ColorObject colorFactoryBean = ioc.getBean("colorFactoryBean");//获取ColorFactoryBeanObject colorFactoryBean = ioc.getBean(BeanFactory.FACTORY_BEAN_PREFIX + "colorFactoryBean"); 二、生命周期 bean的生命周期： bean创建—初始化—-销毁的过程容器管理bean的生命周期；我们可以自定义初始化和销毁方法；容器在bean进行到当前生命周期的时候来调用我们自定义的初始化和销毁方法 （1）通过@Bean指定init-method和destroy-method1234567891011121314151617181920public class Car &#123; public Car()&#123; System.out.println("car's constructor"); &#125; public void init()&#123; System.out.println("init"); &#125; public void destroy()&#123; System.out.println("destroy"); &#125;&#125;//通过Bean注解的initMethod和destroyMethod指定Bean初始化方法和销毁方法@Bean(initMethod = "init", destroyMethod = "destroy")public Car car() &#123; return new Car();&#125; （2）通过让Bean实现InitializingBean（定义初始化逻辑）和DisposableBean（定义销毁逻辑）123456789101112131415161718public class Cat implements InitializingBean, DisposableBean &#123; public Cat()&#123; System.out.println("cat's constructor"); &#125; //Bean设置完属性后触发 @Override public void afterPropertiesSet() throws Exception &#123; System.out.println("init"); &#125; //Bean销毁时触发 @Override public void destroy() throws Exception &#123; System.out.println("destroy"); &#125;&#125; （3）通过可以使用JSR250，@PostConstruct和@PreDestroy @PostConstruct：在bean创建完成并且属性赋值完成；来执行初始化方法 @PreDestroy：在容器销毁bean之前通知我们进行清理工作 123456789101112131415161718@Componentpublic class Dog &#123; public Dog()&#123; System.out.println("dog's constructor"); &#125; //Bean设置完属性后触发 @PostConstruct public void init()&#123; System.out.println("init ... postConstructor"); &#125; //Bean销毁时触发 @PreDestroy public void destroy()&#123; System.out.println("destroy ... preDestroy"); &#125;&#125; （4）BeanPostProcessor：bean的后置处理器 在Bean初始化前后进行一些处理工作 1234567891011121314151617@Componentpublic class MyBeanPostPrecessor implements BeanPostProcessor &#123; //在初始化之前工作，在initMethod和@PostConstruct前执行 @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123; System.out.println("postProcessBeforeInitialization : " + beanName); return bean; &#125; //在初始化之后工作，在initMethod和@PostConstruct后执行 @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123; System.out.println("postProcessAfterInitialization : " + beanName); return bean; &#125;&#125; 执行原理 挨个执行beforeInitialization，一但返回null，跳出for循环，不会执行后面的BeanPostProcessor.postProcessorsBeforeInitialization 1234567891011//给bean进行属性赋值populateBean(beanName, mbd, instanceWrapper);initializeBean&#123; //执行所有postProcessBeforeInitialization方法 applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName); //执行自定义初始化,initMethod和@PostConstruct invokeInitMethods(beanName, wrappedBean, mbd); //执行所有postProcessAfterInitialization方法 applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);&#125; （5）执行顺序 构造器 后置处理器，BeanPostPrecessor.postProcessBeforeInitialization @PostConstruct 标注的方法 实现InitializingBean接口，afterPropertiesSet @Bean属性，initMethod 后置处理器，BeanPostPrecessor.postProcessAfterInitialization @PreDestroy 标注的方法 实现DisposableBean接口，destroy @Bean属性，destroyMethod 三、属性赋值使用@value进行赋值 基础赋值 12@Value("MrXieXie")String name; 可以写SpEL； #{} 12@Value("#&#123;20-2&#125;")int age; 使用@PropertySource导入配置文件，可以写${}；取出配置文件【properties】中的值（在运行环境变量里面的值） 1234567891011//导入resources下的person.properties配置文件@PropertySource("classpath:person.properties")@Configurationpublic class MainConfigOfPropertyValues &#123;&#125;//person.propertiesperson.nickname=你好啊//Person.java@Value("$&#123;person.nickname&#125;")String nickName; 四、自动装配（1）使用@Autowired，装配容器中的Bean Spring利用依赖注入（DI），完成对IOC容器中中各个组件的依赖关系赋值； @Autowired：自动注入： 1）、默认优先按照类型去容器中找对应的组件:applicationContext.getBean(BookDao.class);找到就赋值 2）、如果找到多个相同类型的组件，再将属性的名称作为组件的id去容器中查找applicationContext.getBean(&quot;bookDao&quot;) 3）、@Qualifier(“bookDao”)：使用@Qualifier指定需要装配的组件的id，而不是使用属性名 4）、自动装配默认一定要将属性赋值好，没有就会报错；可以使用@Autowired(required=false); 5）、@Primary：让Spring进行自动装配的时候，默认使用首选的bean；也可以继续使用@Qualifier指定需要装配的bean的名字 12345678910111213141516//MyDao.java@Repositorypublic class MyDao &#123;&#125;//MyService.java@Servicepublic class MyService &#123; //自动装配MyDao，若容器中没有该Bean，会报错，可以使用require属性设置为false，可以不注入该Bean @Autowired MyDao myDao; public void print()&#123; System.out.println(myDao); &#125;&#125; （2）使用@Qualifier指定装配指定id的Bean 若容器中含有多个相同的Bean，默认使用标注了@Autowired注解的属性名为id的Bean 也可以使用@Qualifier来装配指定id的Bean 123456@Autowired //若有多个相同的bean，默认装载id为 mydao 的beanMyDao myDao;@Qualifier("mydao2") //使用@Qualifier，装配id为 mydao2 的Bean@AutowiredMyDao myDao; （3）使用@Primary，默认使用首选的bean 也可以继续使用@Qualifier指定需要装配的bean的名字 1234567@Primary@Bean("mydao2")public MyDao myDao()&#123; MyDao myDao = new MyDao(); myDao.setLable(2); return myDao;&#125; （4）@Autowired与@Resource与@Inject的区别 Spring还支持使用@Resource(JSR250)和@Inject(JSR330)[java规范的注解] @Resource：可以和@Autowired一样实现自动装配功能；默认是按照组件名称进行装配的；没有能支持@Primary功能没有支持@Autowired（reqiured=false）; @Inject：需要导入javax.inject的包，和Autowired的功能一样。没有required=false的功能； @Autowired：Spring定义的； @Resource、@Inject都是java规范 AutowiredAnnotationBeanPostProcessor:解析完成自动装配功能； @Autowired @Resource @Inject 依赖注入 支持 支持 支持 @Primary 支持 不支持 支持 @Qualifier 支持 不支持 支持 required=false 支持 不支持 不支持 （5） @Autowired:构造器，参数，方法，属性；都是从容器中获取参数组件的值 1）、标注在方法位置：@Bean+方法参数；参数从容器中获取;默认不写@Autowired效果是一样的；都能自动装配 2）、标在构造器上：如果组件只有一个有参构造器，这个有参构造器的@Autowired可以省略，参数位置的组件还是可以自动从容器中获取 3）、放在参数位置： （6）自定义组件想要使用Spring容器底层的一些组件 自定义组件如何获取ApplicationContext，BeanFactory，xxx 自定义组件实现xxxAware；在创建对象的时候，会调用接口规定的方法注入相关组件； Aware；把Spring底层一些组件注入到自定义的Bean中；xxxAware：功能使用xxxProcessor； 如：ApplicationContextAware —&gt; ApplicationContextAwareProcessor（后置处理器）； 12345678910111213141516171819202122232425/** * 在Red中使用&#123;@link ApplicationContext,StringValueResolver,Environment&#125; */@Componentpublic class Red implements ApplicationContextAware, EmbeddedValueResolverAware, EnvironmentAware &#123; //获取IOC容器 @Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123; System.out.println(applicationContext); &#125; //获取字符串处理器 @Override public void setEmbeddedValueResolver(StringValueResolver resolver) &#123; String s = resolver.resolveStringValue("你好我是$&#123;os.name&#125;，今年#&#123;20-2&#125;"); System.out.println(s); &#125; //IOC运行环境 @Override public void setEnvironment(Environment environment) &#123; System.out.println(environment.getProperty("os.name")); &#125;&#125; 执行原理 1234567891011121314151617//ApplicationContextAwareProcessor后置处理器//调用初始化方法前执行@Overridepublic Object postProcessBeforeInitialization(final Object bean, String beanName) throws BeansException &#123; //.. invokeAwareInterfaces(bean); //..&#125;private void invokeAwareInterfaces(Object bean) &#123; if (bean instanceof Aware) &#123; if (bean instanceof ApplicationContextAware) &#123; //回调给实现了ApplicationContextAware接口的类的setApplicationContext方法。 ((ApplicationContextAware) bean).setApplicationContext(this.applicationContext); &#125; &#125;&#125; （7）@Profile环境切换Profile：Spring为我们提供的可以根据当前环境，动态的激活和切换一系列组件的功能； @Profile：指定组件在哪个环境的情况下才能被注册到容器中，不指定，任何环境下都能注册这个组件 1）、加了环境标识的bean，只有这个环境被激活的时候才能注册到容器中。默认是default环境 2）、写在配置类上，只有是指定的环境的时候，整个配置类里面的所有配置才能开始生效 3）、没有标注环境标识的bean在，任何环境下都是加载的； 定义环境：开发环境、测试环境、生产环境 1234567891011121314//测试环境@Profile("test") @Bean("test") public DataSource testDataSource()&#123;&#125;//开发环境 @Profile("dev") @Bean("dev") public DataSource devDataSource()&#123;&#125;//生成环境 @Profile("prod") @Bean("prod") public DataSource prodDataSource()&#123;&#125; 切换环境 使用命令行动态参数: 在虚拟机参数位置加载 -Dspring.profiles.active=test； 代码的方式激活某种环境； 123456789AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext();//1、创建一个applicationContext//2、设置需要激活的环境applicationContext.getEnvironment().setActiveProfiles("dev");//3、注册主配置类applicationContext.register(MainConfigOfProfile.class);//4、启动刷新容器applicationContext.refresh(); 五、AOP功能及原理（1）AOP基础使用 AOP：指在程序运行期间动态的将某段代码切入到指定方法指定位置进行运行的编程方式； 导入aop模块；Spring AOP：(spring-aspects) 1compile 'org.springframework:spring-aspects:4.3.12.RELEASE' 定义一个业务逻辑类（MathCalculator）；在业务逻辑运行的时候将日志进行打印（方法之前、方法运行结束、方法出现异常，xxx） 123456public class MathCalculator &#123; public int div(int x, int y) &#123; System.out.println("div"); return x / y; &#125;&#125; 定义一个日志切面类（LogAspects）：切面类里面的方法需要动态感知MathCalculator.div运行到哪里然后执行；通知方法： 前置通知(@Before)：logStart：在目标方法(div)运行之前运行 后置通知(@After)：logEnd：在目标方法(div)运行结束之后运行（无论方法正常结束还是异常结束） 返回通知(@AfterReturning)：logReturn：在目标方法(div)正常返回之后运行 异常通知(@AfterThrowing)：logException：在目标方法(div)出现异常以后运行 环绕通知(@Around)：动态代理，手动推进目标方法运行（joinPoint.procced()） 1234567891011121314151617181920212223242526/** * 告诉Spring这是一个切面类 */@Aspectpublic class LogAspects &#123; //抽取公共的切入点表达式 //1、本类引用 //2、其他的切面引用 @Pointcut(value = "execution(public int pers.mrxiexie.springannotation.aop.MathCalculator.*(..))") public void pointcut() &#123;&#125; //@Before在目标方法之前切入；切入点表达式（指定在哪个方法切入） @Before("pointcut()") public void before(JoinPoint joinPoint) &#123;&#125; @After("pointcut()") public void after(JoinPoint joinPoint) &#123;&#125; //JoinPoint一定要出现在参数表的第一位 @AfterReturning(value = "pointcut()", returning = "obj") public void afterReturning(JoinPoint joinPoint, Object obj) &#123;&#125; @AfterThrowing(value = "pointcut()", throwing = "e") public void exception(JoinPoint joinPoint, Exception e) &#123;&#125;&#125; 将切面类和业务逻辑类（目标方法所在类）都加入到容器中; 123456789101112131415//开启基于注解的aop模式@EnableAspectJAutoProxy@Configurationpublic class MainConfigOfAOP &#123; @Bean public LogAspects logAspects()&#123; return new LogAspects(); &#125; @Bean public MathCalculator calculator()&#123; return new MathCalculator(); &#125;&#125; （2）AOP源码分析2.1 首先先从@EnableAspectJAutoProxy分析 从@EnableAspectJAutoProxy注解入手 1@EnableAspectJAutoProxy @Import(AspectJAutoProxyRegistrar.class) 注解注入 AspectJAutoProxyRegistrar 12@Import(AspectJAutoProxyRegistrar.class)public @interface EnableAspectJAutoProxy &#123;&#125; AspectJAutoProxyRegistrar 实现了 ImportBeanDefinitionRegistrar：手动注册Bean到容器中 12345678910111213141516171819class AspectJAutoProxyRegistrar implements ImportBeanDefinitionRegistrar &#123; @Override public void registerBeanDefinitions( AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123; //给容器注册一个AnnotationAwareAspectJAutoProxyCreator //名为org.springframework.aop.config.internalAutoProxyCreator AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry); AnnotationAttributes enableAspectJAutoProxy = AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class); if (enableAspectJAutoProxy.getBoolean("proxyTargetClass")) &#123; AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry); &#125; if (enableAspectJAutoProxy.getBoolean("exposeProxy")) &#123; AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry); &#125; &#125;&#125; 4、查看ImportBeanDefinitionRegistrar的继承树 ProxyConfig (org.springframework.aop.framework) ProxyProcessorSupport (org.springframework.aop.framework) AbstractAutoProxyCreator (org.springframework.aop.framework.autoproxy) AbstractAdvisorAutoProxyCreator (org.springframework.aop.framework.autoproxy) AspectJAwareAdvisorAutoProxyCreator (org.springframework.aop.aspectj.autoproxy) AnnotationAwareAspectJAutoProxyCreator (org.springframework.aop.aspectj.annotation) 可以看出 AbstractAutoProxyCreator (org.springframework.aop.framework.autoproxy) 实现了： SmartInstantiationAwareBeanPostProcessor 后置处理器 BeanFactoryAware 自动装配BeanFactory 关注后置处理器（在bean初始化完成前后做事情）、自动装配BeanFactory AbstractAutoProxyCreator.setBeanFactory() AbstractAutoProxyCreator.有后置处理器的逻辑 AbstractAdvisorAutoProxyCreator.setBeanFactory() -&gt; initBeanFactory() AnnotationAwareAspectJAutoProxyCreator.initBeanFactory() 结论：@EnableAspectJAutoProxy给容器注册一个AnnotationAwareAspectJAutoProxyCreator 2.2 从AnnotationAwareAspectJAutoProxyCreator创建到注册流程分析 注册配置类，调用refresh()刷新容器 12345public AnnotationConfigApplicationContext(Class&lt;?&gt;... annotatedClasses) &#123; this(); register(annotatedClasses); //注册配置类 refresh(); //刷新容器&#125; 调用registerBeanPostProcessors()注册拦截bean创建的bean处理器 1234567891011@Overridepublic void refresh() throws BeansException, IllegalStateException &#123; synchronized (this.startupShutdownMonitor) &#123; try &#123; //.. // Register bean processors that intercept bean creation. registerBeanPostProcessors(beanFactory); //.. &#125; &#125;&#125; 调用registerBeanPostProcessors()方法注册后置处理器 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869public static void registerBeanPostProcessors( ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) &#123; //先获取ioc容器已经定义了的需要创建对象的所有BeanPostProcessor String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false); int beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + 1 + postProcessorNames.length; //添加其他BeanPostProcessor到容器中 beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount)); //区分哪些BeanPostProcessor实现了PriorityOrdered, Ordered, and the rest接口 List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;(); List&lt;BeanPostProcessor&gt; internalPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;(); List&lt;String&gt; orderedPostProcessorNames = new ArrayList&lt;String&gt;(); List&lt;String&gt; nonOrderedPostProcessorNames = new ArrayList&lt;String&gt;(); for (String ppName : postProcessorNames) &#123; if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123; BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class); priorityOrderedPostProcessors.add(pp); if (pp instanceof MergedBeanDefinitionPostProcessor) &#123; internalPostProcessors.add(pp); &#125; &#125; else if (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123; orderedPostProcessorNames.add(ppName); &#125; else &#123; nonOrderedPostProcessorNames.add(ppName); &#125; &#125; // 首先注册实现了PriorityOrdered接口的BeanPostProcessor sortPostProcessors(priorityOrderedPostProcessors, beanFactory); registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors); // 下一步，注册实现了Ordered接口的BeanPostProcessor // 注意：AnnotationAwareAspectJAutoProxyCreator实现了Ordered接口 List&lt;BeanPostProcessor&gt; orderedPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;(); for (String ppName : orderedPostProcessorNames) &#123; //获取名字为org.springframework.aop.config.internalAutoProxyCreator的BeanPostProcessor //实际是就是获取AnnotationAwareAspectJAutoProxyCreator到第4步创建Bean BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class); orderedPostProcessors.add(pp); if (pp instanceof MergedBeanDefinitionPostProcessor) &#123; internalPostProcessors.add(pp); &#125; &#125; sortPostProcessors(orderedPostProcessors, beanFactory); registerBeanPostProcessors(beanFactory, orderedPostProcessors); // 最后注册剩余的所有BeanPostProcessor List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;(); for (String ppName : nonOrderedPostProcessorNames) &#123; BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class); nonOrderedPostProcessors.add(pp); if (pp instanceof MergedBeanDefinitionPostProcessor) &#123; internalPostProcessors.add(pp); &#125; &#125; registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors); // 最后把BeanPostProcessor注册到BeanFactory中； sortPostProcessors(internalPostProcessors, beanFactory); registerBeanPostProcessors(beanFactory, internalPostProcessors); // Re-register post-processor for detecting inner beans as ApplicationListeners, // moving it to the end of the processor chain (for picking up proxies etc). beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));&#125; 创建Bean 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) throws BeanCreationException &#123; // Instantiate the bean. BeanWrapper instanceWrapper = null; if (mbd.isSingleton()) &#123; instanceWrapper = this.factoryBeanInstanceCache.remove(beanName); &#125; if (instanceWrapper == null) &#123; //创建PostBeanProcessor对象 instanceWrapper = createBeanInstance(beanName, mbd, args); &#125; final Object bean = (instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null); Class&lt;?&gt; beanType = (instanceWrapper != null ? instanceWrapper.getWrappedClass() : null); mbd.resolvedTargetType = beanType; // Allow post-processors to modify the merged bean definition. synchronized (mbd.postProcessingLock) &#123; if (!mbd.postProcessed) &#123; try &#123; applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName); &#125; catch (Throwable ex) &#123; throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Post-processing of merged bean definition failed", ex); &#125; mbd.postProcessed = true; &#125; &#125; // Eagerly cache singletons to be able to resolve circular references // even when triggered by lifecycle interfaces like BeanFactoryAware. boolean earlySingletonExposure = (mbd.isSingleton() &amp;&amp; this.allowCircularReferences &amp;&amp; isSingletonCurrentlyInCreation(beanName)); if (earlySingletonExposure) &#123; if (logger.isDebugEnabled()) &#123; logger.debug("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references"); &#125; addSingletonFactory(beanName, new ObjectFactory&lt;Object&gt;() &#123; @Override public Object getObject() throws BeansException &#123; return getEarlyBeanReference(beanName, mbd, bean); &#125; &#125;); &#125; // Initialize the bean instance. Object exposedObject = bean; try &#123; //给Bean的属性赋值 populateBean(beanName, mbd, instanceWrapper); if (exposedObject != null) &#123; //初始化Bean exposedObject = initializeBean(beanName, exposedObject, mbd); &#125; &#125; //..&#125; 初始化Bean 123456789101112131415161718192021222324252627282930313233343536protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) &#123; if (System.getSecurityManager() != null) &#123; AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123; @Override public Object run() &#123; invokeAwareMethods(beanName, bean); return null; &#125; &#125;, getAccessControlContext()); &#125; else &#123; //处理Aware接口的方法回调，到第6步 invokeAwareMethods(beanName, bean); &#125; Object wrappedBean = bean; if (mbd == null || !mbd.isSynthetic()) &#123; //调用所有后置处理器的postProcessBeforeInitialization wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName); &#125; try &#123; //执行自定义初始化方法 invokeInitMethods(beanName, wrappedBean, mbd); &#125; catch (Throwable ex) &#123; throw new BeanCreationException( (mbd != null ? mbd.getResourceDescription() : null), beanName, "Invocation of init method failed", ex); &#125; if (mbd == null || !mbd.isSynthetic()) &#123; //调用所有后置处理器的postProcessAfterInitialization wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName); &#125; return wrappedBean;&#125; 处理Aware接口的方法回调 123456789101112131415private void invokeAwareMethods(final String beanName, final Object bean) &#123; if (bean instanceof Aware) &#123; if (bean instanceof BeanNameAware) &#123; ((BeanNameAware) bean).setBeanName(beanName); &#125; if (bean instanceof BeanClassLoaderAware) &#123; ((BeanClassLoaderAware) bean).setBeanClassLoader(getBeanClassLoader()); &#125; if (bean instanceof BeanFactoryAware) &#123; //AnnotationAwareAspectJAutoProxyCreator实现了BeanFactoryAware接口 //执行setBeanFactory方法 ((BeanFactoryAware) bean).setBeanFactory(AbstractAutowireCapableBeanFactory.this); &#125; &#125;&#125; 执行setBeanFactory()方法 12345678910111213141516171819public void setBeanFactory(BeanFactory beanFactory) &#123; super.setBeanFactory(beanFactory); if (!(beanFactory instanceof ConfigurableListableBeanFactory)) &#123; throw new IllegalArgumentException( "AdvisorAutoProxyCreator requires a ConfigurableListableBeanFactory: " + beanFactory); &#125; //BeanPostProcessor(AnnotationAwareAspectJAutoProxyCreator)创建成功；aspectJAdvisorsBuilder initBeanFactory((ConfigurableListableBeanFactory) beanFactory);&#125;@Overrideprotected void initBeanFactory(ConfigurableListableBeanFactory beanFactory) &#123; super.initBeanFactory(beanFactory); if (this.aspectJAdvisorFactory == null) &#123; this.aspectJAdvisorFactory = new ReflectiveAspectJAdvisorFactory(beanFactory); &#125; this.aspectJAdvisorsBuilder = new BeanFactoryAspectJAdvisorsBuilderAdapter(beanFactory, this.aspectJAdvisorFactory);&#125; 2.3 从AnnotationAwareAspectJAutoProxyCreator执行流程分析 调用finishBeanFactoryInitialization()方法 1234567@Overridepublic void refresh() throws BeansException, IllegalStateException &#123; synchronized (this.startupShutdownMonitor) &#123; // Instantiate all remaining (non-lazy-init) singletons. finishBeanFactoryInitialization(beanFactory); &#125;&#125; 调用beanFactory.preInstantiateSingletons()方法 12345protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) &#123; //. // Instantiate all remaining (non-lazy-init) singletons. beanFactory.preInstantiateSingletons();&#125; 遍历获取容器中所有的Bean，依次创建对象getBean(beanName) 12//先从缓存中获取当前bean，如果能获取到，说明bean是之前被创建过的，直接使用，否则再创建；只要创建好的Bean都会被缓存起来getBean -&gt; doGetBean() -&gt; getSingleton() 调用createBean()方法 12345678910111213141516171819@Overrideprotected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) throws BeanCreationException &#123; //.. try &#123; //创建Bean实例之前先尝试用后置处理器返回对象的 Object bean = resolveBeforeInstantiation(beanName, mbdToUse); if (bean != null) &#123; return bean; &#125; &#125; //.. //创建Bean，跟创建后置处理器的流程一样（2.2第四条） Object beanInstance = doCreateBean(beanName, mbdToUse, args); if (logger.isDebugEnabled()) &#123; logger.debug("Finished creating instance of bean '" + beanName + "'"); &#125; return beanInstance;&#125; AnnotationAwareAspectJAutoProxyCreator实现了SmartInstantiationAwareBeanPostProcessor接口（InstantiationAwareBeanPostProcessor），会在Bean创建示例之前尝试使用该后置处理器创建对象。 12345678910111213141516171819202122232425262728293031323334353637protected Object resolveBeforeInstantiation(String beanName, RootBeanDefinition mbd) &#123; Object bean = null; if (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) &#123; // Make sure bean class is actually resolved at this point. if (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123; Class&lt;?&gt; targetType = determineTargetType(beanName, mbd); if (targetType != null) &#123; /** * SmartInstantiationAwareBeanPostProcessor继承InstantiationAwareBeanPostProcessor接口 * 执行所有实现了InstantiationAwareBeanPostProcessor接口的后置处理器的postProcessBeforeInstantiation方法 */ bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName); if (bean != null) &#123; //执行所有实现了InstantiationAwareBeanPostProcessor接口的后置处理器的postProcessAfterInitialization方法 bean = applyBeanPostProcessorsAfterInitialization(bean, beanName); &#125; &#125; &#125; mbd.beforeInstantiationResolved = (bean != null); &#125; return bean;&#125;protected Object applyBeanPostProcessorsBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName) &#123; for (BeanPostProcessor bp : getBeanPostProcessors()) &#123; //若实现了InstantiationAwareBeanPostProcessor接口，则执行postProcessBeforeInstantiation或者postProcessAfterInitialization方法尝试创建实例 if (bp instanceof InstantiationAwareBeanPostProcessor) &#123; InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp; Object result = ibp.postProcessBeforeInstantiation(beanClass, beanName); if (result != null) &#123; return result; &#125; &#125; &#125; return null;&#125; 2.4 AnnotationAwareAspectJAutoProxyCreator（InstantiationAwareBeanPostProcessor）作用分析 AnnotationAwareAspectJAutoProxyCreator的postProcessBeforeInstantiation()方法。每个Bean创建之前，调用该方法。 12345678910111213141516171819202122232425262728293031323334@Overridepublic Object postProcessBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName) throws BeansException &#123; Object cacheKey = getCacheKey(beanClass, beanName); if (beanName == null || !this.targetSourcedBeans.contains(beanName)) &#123; //判断当前bean是否在advisedBeans中（保存了所有需要增强bean） if (this.advisedBeans.containsKey(cacheKey)) &#123; return null; &#125; //1. isInfrastructureClass(beanClass): 判断当前bean是否是基础类型的Advice、Pointcut、Advisor、AopInfrastructureBean，或者是否是切面（@Aspect） //2. shouldSkip(beanClass, beanName)): 是否需要跳过 if (isInfrastructureClass(beanClass) || shouldSkip(beanClass, beanName)) &#123; this.advisedBeans.put(cacheKey, Boolean.FALSE); return null; &#125; &#125; // Create proxy here if we have a custom TargetSource. // Suppresses unnecessary default instantiation of the target bean: // The TargetSource will handle target instances in a custom fashion. if (beanName != null) &#123; TargetSource targetSource = getCustomTargetSource(beanClass, beanName); if (targetSource != null) &#123; this.targetSourcedBeans.add(beanName); Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(beanClass, beanName, targetSource); Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource); this.proxyTypes.put(cacheKey, proxy.getClass()); return proxy; &#125; &#125; return null;&#125; shouldSkip(beanClass, beanName)): 是否需要跳过 123456789101112131415@Overrideprotected boolean shouldSkip(Class&lt;?&gt; beanClass, String beanName) &#123; //获取候选的增强器（切面里面的通知方法）【List&lt;Advisor&gt; candidateAdvisors】每一个封装的通知方法的增强器是 InstantiationModelAwarePointcutAdvisor； List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors(); for (Advisor advisor : candidateAdvisors) &#123; //判断每一个增强器是否是 AspectJPointcutAdvisor 类型的；返回true if (advisor instanceof AspectJPointcutAdvisor) &#123; if (((AbstractAspectJAdvice) advisor.getAdvice()).getAspectName().equals(beanName)) &#123; return true; &#125; &#125; &#125; //返回false return super.shouldSkip(beanClass, beanName);&#125; 创建对象，调用postProcessAfterInitialization()方法 1234567891011@Overridepublic Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123; if (bean != null) &#123; Object cacheKey = getCacheKey(bean.getClass(), beanName); if (!this.earlyProxyReferences.contains(cacheKey)) &#123; //包装对象，如果在需要的情况下 return wrapIfNecessary(bean, beanName, cacheKey); &#125; &#125; return bean;&#125; 调用wrapIfNecessary()方法 123456789101112131415161718192021222324252627protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) &#123; if (beanName != null &amp;&amp; this.targetSourcedBeans.contains(beanName)) &#123; return bean; &#125; if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) &#123; return bean; &#125; if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123; this.advisedBeans.put(cacheKey, Boolean.FALSE); return bean; &#125; // 获取当前bean的所有增强器（通知方法） Object[] specificInterceptors（第5步） Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null); if (specificInterceptors != DO_NOT_PROXY) &#123; //如果有代理则把当前Bean加入到advisedBeans并设置为true， this.advisedBeans.put(cacheKey, Boolean.TRUE); //创建代理对象（第6步） Object proxy = createProxy( bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean)); this.proxyTypes.put(cacheKey, proxy.getClass()); return proxy; &#125; //否则为false this.advisedBeans.put(cacheKey, Boolean.FALSE); return bean;&#125; 调用getAdvicesAndAdvisorsForBean()方法，获取当前bean的所有增强器（通知方法） Object[] specificInterceptors 12345678910111213141516171819202122@Overrideprotected Object[] getAdvicesAndAdvisorsForBean(Class&lt;?&gt; beanClass, String beanName, TargetSource targetSource) &#123; List&lt;Advisor&gt; advisors = findEligibleAdvisors(beanClass, beanName); if (advisors.isEmpty()) &#123; return DO_NOT_PROXY; &#125; return advisors.toArray();&#125;protected List&lt;Advisor&gt; findEligibleAdvisors(Class&lt;?&gt; beanClass, String beanName) &#123; //找到候选的所有的增强器（找哪些通知方法是需要切入当前bean方法的） List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors(); //获取到能在bean使用的增强器。 List&lt;Advisor&gt; eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName); extendAdvisors(eligibleAdvisors); if (!eligibleAdvisors.isEmpty()) &#123; //给增强器排序 eligibleAdvisors = sortAdvisors(eligibleAdvisors); &#125; return eligibleAdvisors;&#125; 创建代理对象，调用createProxy()方法 1234567891011121314151617181920212223242526272829303132rotected Object createProxy( Class&lt;?&gt; beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) &#123; if (this.beanFactory instanceof ConfigurableListableBeanFactory) &#123; AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass); &#125; ProxyFactory proxyFactory = new ProxyFactory(); proxyFactory.copyFrom(this); if (!proxyFactory.isProxyTargetClass()) &#123; if (shouldProxyTargetClass(beanClass, beanName)) &#123; proxyFactory.setProxyTargetClass(true); &#125; else &#123; evaluateProxyInterfaces(beanClass, proxyFactory); &#125; &#125; //获取所有增强器（通知方法） Advisor[] advisors = buildAdvisors(beanName, specificInterceptors); //把增强器添加到工厂中 proxyFactory.addAdvisors(advisors); proxyFactory.setTargetSource(targetSource); customizeProxyFactory(proxyFactory); proxyFactory.setFrozen(this.freezeProxy); if (advisorsPreFiltered()) &#123; proxyFactory.setPreFiltered(true); &#125; //创建代理对象 return proxyFactory.getProxy(getProxyClassLoader());&#125; 创建AOP代理对象，getProxy() 一直调用到 createAopProxy()创建AOP代理对象 ，最后给容器中返回当前组件使用cglib增强了的代理对象；以后容器中获取到的就是这个组件的代理对象，执行目标方法的时候，代理对象就会执行通知方法的流程。两种AOP代理对象： JdkDynamicAopProxy ObjenesisCglibAopProxy 1234567891011121314151617@Overridepublic AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException &#123; if (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123; Class&lt;?&gt; targetClass = config.getTargetClass(); if (targetClass == null) &#123; throw new AopConfigException("TargetSource cannot determine target class: " + "Either an interface or a target is required for proxy creation."); &#125; if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123; return new JdkDynamicAopProxy(config); &#125; return new ObjenesisCglibAopProxy(config); &#125; else &#123; return new JdkDynamicAopProxy(config); &#125;&#125; 2.5 AOP代理对象方法执行源码分析 首先执行intercept()拦截目标方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445@Overridepublic Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable &#123; Object oldProxy = null; boolean setProxyContext = false; Class&lt;?&gt; targetClass = null; Object target = null; try &#123; if (this.advised.exposeProxy) &#123; // Make invocation available if necessary. oldProxy = AopContext.setCurrentProxy(proxy); setProxyContext = true; &#125; // May be null. Get as late as possible to minimize the time we // "own" the target, in case it comes from a pool... target = getTarget(); if (target != null) &#123; targetClass = target.getClass(); &#125; //根据ProxyFactory对象获取将要执行的目标方法拦截器链；(第2步) List&lt;Object&gt; chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass); Object retVal; //如果没有拦截器链，直接执行目标方法 if (chain.isEmpty() &amp;&amp; Modifier.isPublic(method.getModifiers())) &#123; Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args); //执行目标方法 retVal = methodProxy.invoke(target, argsToUse); &#125; //如果有拦截器链，把需要执行的目标对象，目标方法，拦截器链等信息传入创建一个 CglibMethodInvocation 对象，并调用 Object retVal = mi.proceed(); else &#123; // 执行拦截器链 retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed(); &#125; retVal = processReturnType(proxy, target, method, retVal); return retVal; &#125; finally &#123; if (target != null) &#123; releaseTarget(target); &#125; if (setProxyContext) &#123; // Restore old proxy. AopContext.setCurrentProxy(oldProxy); &#125; &#125;&#125; 根据ProxyFactory对象获取将要执行的目标方法拦截器链（getInterceptorsAndDynamicInterceptionAdvice） 12345678910public List&lt;Object&gt; getInterceptorsAndDynamicInterceptionAdvice(Method method, Class&lt;?&gt; targetClass) &#123; MethodCacheKey cacheKey = new MethodCacheKey(method); List&lt;Object&gt; cached = this.methodCache.get(cacheKey); if (cached == null) &#123; cached = this.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice( this, method, targetClass); this.methodCache.put(cacheKey, cached); &#125; return cached;&#125; 调用getInterceptorsAndDynamicInterceptionAdvice()方法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647@Overridepublic List&lt;Object&gt; getInterceptorsAndDynamicInterceptionAdvice( Advised config, Method method, Class&lt;?&gt; targetClass) &#123; //保存所有的拦截器，一个默认的ExposeInvocationInterceptor 和 4个增强器 List&lt;Object&gt; interceptorList = new ArrayList&lt;Object&gt;(config.getAdvisors().length); Class&lt;?&gt; actualClass = (targetClass != null ? targetClass : method.getDeclaringClass()); boolean hasIntroductions = hasMatchingIntroductions(config, actualClass); AdvisorAdapterRegistry registry = GlobalAdvisorAdapterRegistry.getInstance(); for (Advisor advisor : config.getAdvisors()) &#123; if (advisor instanceof PointcutAdvisor) &#123; // Add it conditionally. PointcutAdvisor pointcutAdvisor = (PointcutAdvisor) advisor; if (config.isPreFiltered() || pointcutAdvisor.getPointcut().getClassFilter().matches(actualClass)) &#123; //遍历所有的增强器，将其转为Interceptor(第4步) MethodInterceptor[] interceptors = registry.getInterceptors(advisor); MethodMatcher mm = pointcutAdvisor.getPointcut().getMethodMatcher(); if (MethodMatchers.matches(mm, method, actualClass, hasIntroductions)) &#123; if (mm.isRuntime()) &#123; // Creating a new object instance in the getInterceptors() method // isn't a problem as we normally cache created chains. for (MethodInterceptor interceptor : interceptors) &#123; interceptorList.add(new InterceptorAndDynamicMethodMatcher(interceptor, mm)); &#125; &#125; else &#123; interceptorList.addAll(Arrays.asList(interceptors)); &#125; &#125; &#125; &#125; else if (advisor instanceof IntroductionAdvisor) &#123; IntroductionAdvisor ia = (IntroductionAdvisor) advisor; if (config.isPreFiltered() || ia.getClassFilter().matches(actualClass)) &#123; Interceptor[] interceptors = registry.getInterceptors(advisor); interceptorList.addAll(Arrays.asList(interceptors)); &#125; &#125; else &#123; Interceptor[] interceptors = registry.getInterceptors(advisor); interceptorList.addAll(Arrays.asList(interceptors)); &#125; &#125; return interceptorList;&#125; 将增强器转为MethodInterceptor 1234567891011121314151617181920@Overridepublic MethodInterceptor[] getInterceptors(Advisor advisor) throws UnknownAdviceTypeException &#123; List&lt;MethodInterceptor&gt; interceptors = new ArrayList&lt;MethodInterceptor&gt;(3); Advice advice = advisor.getAdvice(); //如果是MethodInterceptor，直接加入到集合中 if (advice instanceof MethodInterceptor) &#123; interceptors.add((MethodInterceptor) advice); &#125; //如果不是，使用AdvisorAdapter将增强器转为MethodInterceptor for (AdvisorAdapter adapter : this.adapters) &#123; if (adapter.supportsAdvice(advice)) &#123; interceptors.add(adapter.getInterceptor(advisor)); &#125; &#125; if (interceptors.isEmpty()) &#123; throw new UnknownAdviceTypeException(advisor.getAdvice()); &#125; //转换完成返回MethodInterceptor数组 return interceptors.toArray(new MethodInterceptor[interceptors.size()]);&#125; 2.6 执行拦截器链new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed(); 执行proceed方法 12345678910111213141516171819202122232425262728@Overridepublic Object proceed() throws Throwable &#123; // 如果没有拦截器执行执行目标方法，或者拦截器的索引和拦截器数组-1大小一样（指定到了最后一个拦截器）执行目标方法 //currentInterceptorIndex一开始为-1 if (this.currentInterceptorIndex == this.interceptorsAndDynamicMethodMatchers.size() - 1) &#123; return invokeJoinpoint(); &#125; //按顺序获取拦截器从0开始 Object interceptorOrInterceptionAdvice = this.interceptorsAndDynamicMethodMatchers.get(++this.currentInterceptorIndex); if (interceptorOrInterceptionAdvice instanceof InterceptorAndDynamicMethodMatcher) &#123; InterceptorAndDynamicMethodMatcher dm = (InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice; if (dm.methodMatcher.matches(this.method, this.targetClass, this.arguments)) &#123; return dm.interceptor.invoke(this); &#125; else &#123; // Dynamic matching failed. // Skip this interceptor and invoke the next in the chain. return proceed(); &#125; &#125; else &#123; ////链式获取每一个拦截器，拦截器执行invoke方法，每一个拦截器等待下一个拦截器执行完成返回以后再来执行；拦截器链的机制，保证通知方法与目标方法的执行顺序； return ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(this); &#125;&#125; （3）AOP总结 @EnableAspectJAutoProxy 开启AOP功能 @EnableAspectJAutoProxy 会给容器中注册一个组件 AnnotationAwareAspectJAutoProxyCreator AnnotationAwareAspectJAutoProxyCreator是一个后置处理器； 容器的创建流程： registerBeanPostProcessors()注册后置处理器 创建AnnotationAwareAspectJAutoProxyCreator对象 finishBeanFactoryInitialization()初始化剩下的单实例bean 创建业务逻辑组件和切面组件 AnnotationAwareAspectJAutoProxyCreator拦截组件的创建过程 组件创建完之后，判断组件是否需要增强 是：切面的通知方法，包装成增强器（Advisor）;给业务逻辑组件创建一个代理对象（cglib） 执行目标方法： 代理对象执行目标方法 CglibAopProxy.intercept()； 得到目标方法的拦截器链（增强器包装成拦截器MethodInterceptor） 利用拦截器的链式机制，依次进入每一个拦截器进行执行； 效果： 正常执行：前置通知-》目标方法-》后置通知-》返回通知 出现异常：前置通知-》目标方法-》后置通知-》异常通知 六、声明式事务（1）环境搭建 1、导入相关依赖 数据源、数据库驱动、Spring-jdbc模块 2、配置数据源、JdbcTemplate（Spring提供的简化数据库操作的工具）操作数据 3、给方法上标注 @Transactional 表示当前方法是一个事务方法； 4、 @EnableTransactionManagement 开启基于注解的事务管理功能； 5、配置事务管理器来控制事务; public PlatformTransactionManager transactionManager() （2）源码分析 @EnableTransactionManagement 123456@Import(TransactionManagementConfigurationSelector.class)public @interface EnableTransactionManagement &#123; //.. AdviceMode mode() default AdviceMode.PROXY; //..&#125; TransactionManagementConfigurationSelector 1234567891011121314public class TransactionManagementConfigurationSelector extends AdviceModeImportSelector&lt;EnableTransactionManagement&gt; &#123; @Override protected String[] selectImports(AdviceMode adviceMode) &#123; switch (adviceMode) &#123; case PROXY: //默认情况下，导入AutoProxyRegistrar（第3步）和ProxyTransactionManagementConfiguration（第4步）两个类 return new String[] &#123;AutoProxyRegistrar.class.getName(), ProxyTransactionManagementConfiguration.class.getName()&#125;; case ASPECTJ: return new String[] &#123;TransactionManagementConfigUtils.TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME&#125;; default: return null; &#125; &#125;&#125; AutoProxyRegistrar实现了ImportBeanDefinitionRegistrar接口，手动注册Bean 12345678910111213141516171819202122232425262728293031public class AutoProxyRegistrar implements ImportBeanDefinitionRegistrar &#123; @Override public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123; boolean candidateFound = false; Set&lt;String&gt; annoTypes = importingClassMetadata.getAnnotationTypes(); for (String annoType : annoTypes) &#123; AnnotationAttributes candidate = AnnotationConfigUtils.attributesFor(importingClassMetadata, annoType); if (candidate == null) &#123; continue; &#125; Object mode = candidate.get("mode"); Object proxyTargetClass = candidate.get("proxyTargetClass"); if (mode != null &amp;&amp; proxyTargetClass != null &amp;&amp; AdviceMode.class == mode.getClass() &amp;&amp; Boolean.class == proxyTargetClass.getClass()) &#123; candidateFound = true; if (mode == AdviceMode.PROXY) &#123; //通过AopConfigUtils工具注册InfrastructureAdvisorAutoProxyCreator组件 //InfrastructureAdvisorAutoProxyCreator，利用后置处理器机制在对象创建以后，包装对象，返回一个代理对象（增强器），代理对象执行方法利用拦截器链进行调用；（同AOP的AnnotationAwareAspectJAutoProxyCreator） AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry); if ((Boolean) proxyTargetClass) &#123; AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry); return; &#125; &#125; &#125; &#125; //.. &#125;&#125; ProxyTransactionManagementConfiguration 12345678910111213141516171819202122232425262728293031323334@Configurationpublic class ProxyTransactionManagementConfiguration extends AbstractTransactionManagementConfiguration &#123; //注册事务增强器 @Bean(name = TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME) @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public BeanFactoryTransactionAttributeSourceAdvisor transactionAdvisor() &#123; BeanFactoryTransactionAttributeSourceAdvisor advisor = new BeanFactoryTransactionAttributeSourceAdvisor(); advisor.setTransactionAttributeSource(transactionAttributeSource()); advisor.setAdvice(transactionInterceptor()); advisor.setOrder(this.enableTx.&lt;Integer&gt;getNumber("order")); return advisor; &#125; //注册AnnotationTransactionAttributeSource解析事务注解 @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public TransactionAttributeSource transactionAttributeSource() &#123; return new AnnotationTransactionAttributeSource(); &#125; //注册事务拦截器 @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public TransactionInterceptor transactionInterceptor() &#123; TransactionInterceptor interceptor = new TransactionInterceptor(); interceptor.setTransactionAttributeSource(transactionAttributeSource()); if (this.txManager != null) &#123; interceptor.setTransactionManager(this.txManager); &#125; return interceptor; &#125;&#125; TransactionAspectSupport.invokeWithinTransaction执行目标方法 123456789101112131415161718192021222324252627282930protected Object invokeWithinTransaction(Method method, Class&lt;?&gt; targetClass, final InvocationCallback invocation) throws Throwable &#123; // If the transaction attribute is null, the method is non-transactional. final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass); final PlatformTransactionManager tm = determineTransactionManager(txAttr); final String joinpointIdentification = methodIdentification(method, targetClass, txAttr); if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) &#123; // Standard transaction demarcation with getTransaction and commit/rollback calls. TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification); Object retVal = null; try &#123; //执行目标方法 retVal = invocation.proceedWithInvocation(); &#125; catch (Throwable ex) &#123; //出现异常则回滚 completeTransactionAfterThrowing(txInfo, ex); throw ex; &#125; finally &#123; cleanupTransactionInfo(txInfo); &#125; //提交事务 commitTransactionAfterReturning(txInfo); return retVal; &#125; //..&#125; 七、扩展原理（1）BeanFactoryPostProcessor BeanFactoryPostProcessor：BeanFactory的后置处理器 在标准初始化之后，修改应用上下文内部的BeanFactory。所有的bean定义信息都已经加载，但是没有bean被初始化。 （2）BeanDefinitionRegistryPostProcessor BeanDefinitionRegistryPostProcessor是BeanFactoryPostProcessor的子接口 在标准初始化之后，修改应用上下文中的bean定义注册表。将加载所有常规bean定义，但是没有bean被初始化。这允许在下一个后处理阶段开始之前添加更多bean定义。 先执行BeanDefinitionRegistryPostProcessor的postProcessBeanDefinitionRegistry()方法 再执行BeanDefinitionRegistryPostProcessor的postProcessBeanFactory()方法 然后执行BeanFactoryPostProcessor的postProcessBeanFactory()方法 最后bean才初始化 源码分析： 创建ioc容器并刷新容器，调用refresh()方法 123456789101112131415161718192021222324252627282930313233@Overridepublic void refresh() throws BeansException, IllegalStateException &#123; synchronized (this.startupShutdownMonitor) &#123; try &#123; // Allows post-processing of the bean factory in context subclasses. postProcessBeanFactory(beanFactory); //在上下文中调用注册为bean的工厂处理器 invokeBeanFactoryPostProcessors(beanFactory); // Register bean processors that intercept bean creation. registerBeanPostProcessors(beanFactory); // Initialize message source for this context. initMessageSource(); // Initialize event multicaster for this context. initApplicationEventMulticaster(); // Initialize other special beans in specific context subclasses. onRefresh(); // Check for listener beans and register them. registerListeners(); //初始化所有的单实例Bean finishBeanFactoryInitialization(beanFactory); // Last step: publish corresponding event. finishRefresh(); &#125; &#125;&#125; invokeBeanFactoryPostProcessors(beanFactory); 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130public static void invokeBeanFactoryPostProcessors( ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors) &#123; // 如果有，先调用BeanDefinitionRegistryPostProcessors Set&lt;String&gt; processedBeans = new HashSet&lt;String&gt;(); if (beanFactory instanceof BeanDefinitionRegistry) &#123; BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory; //常规beanfactory后置处理器列表 List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = new LinkedList&lt;BeanFactoryPostProcessor&gt;(); //注册表beanfactory后置处理器列表 List&lt;BeanDefinitionRegistryPostProcessor&gt; registryProcessors = new LinkedList&lt;BeanDefinitionRegistryPostProcessor&gt;(); for (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123; //分别将BeanDefinitionRegistryPostProcessor和常规BeanFactoryPostProcessor放在对应的列表 if (postProcessor instanceof BeanDefinitionRegistryPostProcessor) &#123; BeanDefinitionRegistryPostProcessor registryProcessor = (BeanDefinitionRegistryPostProcessor) postProcessor; registryProcessor.postProcessBeanDefinitionRegistry(registry); registryProcessors.add(registryProcessor); &#125; else &#123; regularPostProcessors.add(postProcessor); &#125; &#125; // 按顺序执行实现了Ordered, Ordered, 和 没有实现接口的BeanDefinitionRegistryPostProcessorsPriority接口的方法 List&lt;BeanDefinitionRegistryPostProcessor&gt; currentRegistryProcessors = new ArrayList&lt;BeanDefinitionRegistryPostProcessor&gt;(); // 第一，先执行实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessors的postProcessBeanDefinitionRegistry方法 String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false); for (String ppName : postProcessorNames) &#123; if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123; currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class)); processedBeans.add(ppName); &#125; &#125; sortPostProcessors(currentRegistryProcessors, beanFactory); registryProcessors.addAll(currentRegistryProcessors); invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry); currentRegistryProcessors.clear(); // 第二，执行实现了Ordered接口的BeanDefinitionRegistryPostProcessors的postProcessBeanDefinitionRegistry方法 postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false); for (String ppName : postProcessorNames) &#123; if (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered.class)) &#123; currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class)); processedBeans.add(ppName); &#125; &#125; sortPostProcessors(currentRegistryProcessors, beanFactory); registryProcessors.addAll(currentRegistryProcessors); invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry); currentRegistryProcessors.clear(); // 最后，执行没有实现接口的BeanDefinitionRegistryPostProcessors的postProcessBeanDefinitionRegistry方法 boolean reiterate = true; while (reiterate) &#123; reiterate = false; postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false); for (String ppName : postProcessorNames) &#123; if (!processedBeans.contains(ppName)) &#123; currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class)); processedBeans.add(ppName); reiterate = true; &#125; &#125; sortPostProcessors(currentRegistryProcessors, beanFactory); registryProcessors.addAll(currentRegistryProcessors); invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry); currentRegistryProcessors.clear(); &#125; // 执行BeanDefinitionRegistryPostProcessors的postProcessBeanFactory方法 invokeBeanFactoryPostProcessors(registryProcessors, beanFactory); invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory); &#125; else &#123; // Invoke factory processors registered with the context instance. invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory); &#125; //这里不初始化factorybean吗: 我们需要保留所有未初始化的常规bean，以便让bean工厂后处理器应用到它们! String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false); // 按顺序执行实现了Ordered, Ordered, 和 没有实现接口的BeanFactoryPostProcessor接口的方法 List&lt;BeanFactoryPostProcessor&gt; priorityOrderedPostProcessors = new ArrayList&lt;BeanFactoryPostProcessor&gt;(); List&lt;String&gt; orderedPostProcessorNames = new ArrayList&lt;String&gt;(); List&lt;String&gt; nonOrderedPostProcessorNames = new ArrayList&lt;String&gt;(); for (String ppName : postProcessorNames) &#123; if (processedBeans.contains(ppName)) &#123; // 跳过 已在第一阶段以上处理 &#125; else if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123; priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class)); &#125; else if (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123; orderedPostProcessorNames.add(ppName); &#125; else &#123; nonOrderedPostProcessorNames.add(ppName); &#125; &#125; // 第一, 先执行实现了PriorityOrdered接口的BeanFactoryPostProcessors的postProcessBeanFactory方法 sortPostProcessors(priorityOrderedPostProcessors, beanFactory); invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory); // 第二, 执行实现了Ordered接口的BeanFactoryPostProcessors的postProcessBeanFactory方法 List&lt;BeanFactoryPostProcessor&gt; orderedPostProcessors = new ArrayList&lt;BeanFactoryPostProcessor&gt;(); for (String postProcessorName : orderedPostProcessorNames) &#123; orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class)); &#125; sortPostProcessors(orderedPostProcessors, beanFactory); invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory); // 最后，执行实现了没有实现接口的BeanFactoryPostProcessors的postProcessBeanFactory方法 List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors = new ArrayList&lt;BeanFactoryPostProcessor&gt;(); for (String postProcessorName : nonOrderedPostProcessorNames) &#123; nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class)); &#125; invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory); // Clear cached merged bean definitions since the post-processors might have // modified the original metadata, e.g. replacing placeholders in values... beanFactory.clearMetadataCache();&#125; （3）ApplicationListener 监听容器中发布的事件，事件驱动模型开发 12345678910/** * 实现ApplicationListener接口，监听ApplicationEvent事件 */@Componentpublic class MyApplicationListener implements ApplicationListener&lt;ApplicationEvent&gt; &#123; @Override public void onApplicationEvent(ApplicationEvent event) &#123; System.out.println("收到了事件 : " + event); &#125;&#125; 自定义发布事件 1234567@Testpublic void test() &#123; ApplicationContext ioc = new AnnotationConfigApplicationContext(ExtConfig.class); //自定义发布事件 ioc.publishEvent("asd"); ((AnnotationConfigApplicationContext) ioc).close();&#125; 执行结果打印 123收到了事件 : org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.annotation.AnnotationConfigApplicationContext@612fc6eb: startup date [Tue Aug 21 11:33:08 CST 2018]; root of context hierarchy]收到了事件 : org.springframework.context.PayloadApplicationEvent[source=org.springframework.context.annotation.AnnotationConfigApplicationContext@612fc6eb: startup date [Tue Aug 21 11:33:08 CST 2018]; root of context hierarchy]收到了事件 : org.springframework.context.event.ContextClosedEvent[source=org.springframework.context.annotation.AnnotationConfigApplicationContext@612fc6eb: startup date [Tue Aug 21 11:33:08 CST 2018]; root of context hierarchy] 源码分析： 刷新IOC容器 123456789101112131415161718@Overridepublic void refresh() throws BeansException, IllegalStateException &#123; synchronized (this.startupShutdownMonitor) &#123; try &#123; //.. // 为这个上下文初始化事件派发器。（第2步） initApplicationEventMulticaster(); //.. // 检查监听器并注册。（第3步） registerListeners(); //.. // 发布相应的事件。 finishRefresh(); &#125; &#125;&#125; 初始化事件多播器（派发器）applicationEventMulticaster，若容器中没有则创建一个SimpleApplicationEventMulticaster 12345678910111213141516171819protected void initApplicationEventMulticaster() &#123; ConfigurableListableBeanFactory beanFactory = getBeanFactory(); if (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123; this.applicationEventMulticaster = beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class); if (logger.isDebugEnabled()) &#123; logger.debug("Using ApplicationEventMulticaster [" + this.applicationEventMulticaster + "]"); &#125; &#125; //若容器中没有APPLICATION_EVENT_MULTICASTER_BEAN_NAME，则创建一个SimpleApplicationEventMulticaster，并添加到容器中，我们就可以在其他组件要派发事件，自动注入这个applicationEventMulticaster； else &#123; this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory); beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster); if (logger.isDebugEnabled()) &#123; logger.debug("Unable to locate ApplicationEventMulticaster with name '" + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + "': using default [" + this.applicationEventMulticaster + "]"); &#125; &#125; 检查监听器并注册 12345678910111213141516171819202122protected void registerListeners() &#123; // 从容器中拿到所有的监听器，把他们注册到applicationEventMulticaster中 for (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123; getApplicationEventMulticaster().addApplicationListener(listener); &#125; // 不要在这里初始化factorybean:我们需要保留所有未初始化的常规bean，让后处理器应用到它们! String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false); for (String listenerBeanName : listenerBeanNames) &#123; getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName); &#125; // 现在我们终于有了一个事件派发器，发布了早期的应用程序事件 Set&lt;ApplicationEvent&gt; earlyEventsToProcess = this.earlyApplicationEvents; this.earlyApplicationEvents = null; if (earlyEventsToProcess != null) &#123; for (ApplicationEvent earlyEvent : earlyEventsToProcess) &#123; //发布了早期的应用程序事件 getApplicationEventMulticaster().multicastEvent(earlyEvent); &#125; &#125;&#125; publishEvent -&gt; multicastEvent 发布事件 1234567891011121314151617181920@Overridepublic void multicastEvent(final ApplicationEvent event, ResolvableType eventType) &#123; ResolvableType type = (eventType != null ? eventType : resolveDefaultEventType(event)); for (final ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123; Executor executor = getTaskExecutor(); // 如果有Executor，可以支持使用Executor进行异步派发 if (executor != null) &#123; executor.execute(new Runnable() &#123; @Override public void run() &#123; invokeListener(listener, event); &#125; &#125;); &#125; else &#123; // 否则，同步的方式直接执行listener方法 invokeListener(listener, event); &#125; &#125;&#125; （4）@EventListener 使用该注解实现在某个方法中收取事件，而不需要类实现ApplicationListener 1234567@Servicepublic class BookService &#123; @EventListener(classes = &#123;ApplicationEvent.class&#125;) public void received(ApplicationEvent event) &#123; System.out.println("收到了监听 ： " + event); &#125;&#125; 源码分析： @EventListener 123456 * @see EventListenerMethodProcessor // 查看EventListenerMethodProcessor~ */@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface EventListener &#123; 查看EventListenerMethodProcessor，实现了SmartInitializingSingleton接口 1public class EventListenerMethodProcessor implements SmartInitializingSingleton, ApplicationContextAware &#123; SmartInitializingSingleton接口 123public interface SmartInitializingSingleton &#123; void afterSingletonsInstantiated();&#125; refresh() -&gt; finishBeanFactoryInitialization(beanFactory) -&gt; beanFactory.preInstantiateSingletons(); 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253@Overridepublic void preInstantiateSingletons() throws BeansException &#123; //.. // 触发所有非惰性单例bean的初始化。 for (String beanName : beanNames) &#123; RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName); if (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123; if (isFactoryBean(beanName)) &#123; final FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) getBean(FACTORY_BEAN_PREFIX + beanName); boolean isEagerInit; if (System.getSecurityManager() != null &amp;&amp; factory instanceof SmartFactoryBean) &#123; isEagerInit = AccessController.doPrivileged(new PrivilegedAction&lt;Boolean&gt;() &#123; @Override public Boolean run() &#123; return ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit(); &#125; &#125;, getAccessControlContext()); &#125; else &#123; isEagerInit = (factory instanceof SmartFactoryBean &amp;&amp; ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit()); &#125; if (isEagerInit) &#123; getBean(beanName); &#125; &#125; else &#123; // 先创建所有的单实例bean；getBean(); getBean(beanName); &#125; &#125; &#125; // 获取所有创建好的单实例bean，判断是否是SmartInitializingSingleton类型的；如果是就调用afterSingletonsInstantiated(); for (String beanName : beanNames) &#123; Object singletonInstance = getSingleton(beanName); if (singletonInstance instanceof SmartInitializingSingleton) &#123; final SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance; if (System.getSecurityManager() != null) &#123; AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123; @Override public Object run() &#123; smartSingleton.afterSingletonsInstantiated(); return null; &#125; &#125;, getAccessControlContext()); &#125; else &#123; smartSingleton.afterSingletonsInstantiated(); &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo结合GitPages搭建博客]]></title>
    <url>%2FHexo%E7%BB%93%E5%90%88GitPages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.html</url>
    <content type="text"><![CDATA[前言 在接触Hexo之前，一直在使用印象笔记记录笔记，但是由于印象笔记一直不支持Markdown语法，只能通过马克飞象（专为印象笔记打造，要收费，果断卸载）或者SublimeText（上传后样式太丑，自定义太蛋疼，果断抛弃）。后来发现了Hexo，一款快速、简洁且高效的博客框架，支持Markdown语法，并且可以结合GitPages，存储在Github上，不需要另外购买云主机，最终决定使用Hexo创建一个属于自己的博客，记录工作学习中的笔记。 一、Hexo简介Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 二、下载Cmdercmder是window下一款替代默认cmd的命令行界面，其分为Mini版和Full版： Mini版：仅仅替代cmd Full版：包含git命令等功能 1、进入cmder官网，GitPages需要使用git命令上传，需要下载Full版 2、下载完成后解压双击cmder.exe即可使用，打开界面如下： 三、下载Node.js1、Hexo基于Node.js，进入Node.js下载左边最多用户使用的即可 2、默认安装即可 四、安装Hexo1、在cmder下输入如下命令，等待安装完毕即可 1npm install -g hexo-cli 五、初始化Hexo1、在cmder下输入如下命令初始化Hexo &lt;folder&gt;为自定义文件夹名字 123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 此过程有点久，耐心等待安装完成即可~ 2、本地浏览博客，依次输入以下命令 12hexo ghexo s 3、最后打开浏览器输入127.0.0.1:4000，查看我们所搭建的博客吧 4、配置主题，发表文章不是本文的重点，更多详情，请参阅官方文档 六、部署到Github上1、登录Github官网，注册账号 2、创建一个新的项目 3、设置仓库名与用户名一致的前缀，后缀为.github.io 举个栗子：我的用户名为MrXieXie，则仓库应该命名为MrXieXie.github.io 4、点击Create repository按钮完成创建 5、获取仓库地址 6、配置_config.yml 7、安装git自动部署发布工具 1npm install hexo-deployer-git --save 8、发布到github（发布前习惯先hexo clean清空缓存文件），第一次登陆需要输入github的账号密码 1hexo deploy 9、最后，打开浏览器输入xieweicheng.github.io就可以访问我的博客了 七、使用自己的域名（可选）1、首先要先有自己的域名，可以在阿里云，腾讯云自行购买 2、在Hexo，source文件夹下创建CNAME文件，并修改内容为你的域名，重新部署到github上 1你的域名 3、解析域名指向你的github名字.github.io即可通过你的域名访问博客了 以阿里云为例 1、进入阿里云后台，找到域名列表，点击解析按钮解析你的域名 2、点击添加记录 3、添加一条新的记录，记录类型选择CNAME，记录值为你的github名.github.io 4、点击确定，稍等一段时间即可通过你的域名访问你的Hexo博客]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
